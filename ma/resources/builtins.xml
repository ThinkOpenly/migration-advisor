<?xml version="1.0" encoding="UTF-8"?>
<builtins>
	<!-- x86 HEADERS -->
	<include name="mmintrin.h">altivec.h</include>
	<include name="xmmintrin.h">altivec.h</include>
	<include name="emmintrin.h">altivec.h</include>
	<include name="pmmintrin.h">altivec.h</include>
	<include name="tmmintrin.h">altivec.h</include>
	<include name="smmintrin.h">altivec.h</include>
	<include name="nmmintrin.h">altivec.h</include>
	<include name="immintrin.h">altivec.h</include>
	<include name="x86intrin.h">altivec.h</include>
	<include name="wmmintrin.h">altivec.h</include>

	<!-- X86 TYPES -->
	<type name="__m128i">__vector signed char</type>
	<type name="__m128">__vector float</type>
	<type name="__m128d">__vector double</type>
	<type name="__m256i">char __attribute__ ((__vector_size__ (32)))</type>
	<type name="__m256d">double __attribute__ ((__vector_size__ (32)))</type>
	<type name="__m256">float __attribute__ ((__vector_size__ (32)))</type>
	<type name="__m512i">char __attribute__ ((__vector_size__ (64)))</type>
	<type name="__m512">float __attribute__ ((__vector_size__ (64)))</type>
	<type name="__m512d">double __attribute__ ((__vector_size__ (64)))</type>

	<type name="__int64">long long</type>

	<type name="__m64">__vector signed char</type>
	<type name="__v2sf">__vector float</type>
	<type name="__v2si">__vector int</type>
	<type name="__v2df">__vector double</type>
	<type name="__v2di">__vector long long</type>
	<type name="__v2du">__vector unsigned long long</type>
	<type name="__v4sf">__vector float</type>
	<type name="__v4si">__vector int</type>
	<type name="__v4su">__vector unsigned int</type>
	<type name="__v4hi">__vector short</type>
	<type name="__v4hu">__vector unsigned short</type>
	<type name="__v8qi">__vector signed char</type>
	<type name="__v16qi">__vector signed char</type>
	<type name="__v16qu">__vector unsigned char</type>

	<!-- LOAD INSTRUCTIONS -->
	<function name="_mm_load_sd">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="le" nlines="1">
			(__vector double){(%0)[0], 0}
		</code>
		<code endian="be" nlines="1">
			(__vector double){(%0)[1], 0}
		</code>
	</function>

	<function name="_mm_load_ss">
		<in>float const*</in>
		<out>__m128</out>

		<code endian="le" nlines="1">
			(__vector float){(%0)[0], 0, 0, 0}
		</code>
		<code endian="be" nlines="1">
			(__vector float){(%0)[3], 0, 0, 0}
		</code>
	</function>

	<function name="_mm_load_pd">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			*(__vector double*) (%0)
		</code>
	</function>

	<function name="_mm_loadu_pd">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			*(__vector double*) (%0)
		</code>
	</function>

	<function name="_mm_load_pd1">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="le" nlines="1">
			vec_splats((%0)[0])
		</code>
		<code endian="be" nlines="1">
			vec_splats((%0)[1])
		</code>
	</function>

	<function name="_mm_load1_pd">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="le" nlines="1">
			vec_splats((%0)[0])
		</code>
		<code endian="be" nlines="1">
			vec_splats((%0)[1])
		</code>
	</function>

	<function name="_mm_loaddup_pd">
		<in>double const*</in>
		<out>__m128d</out>

		<code endian="le" nlines="1">
			vec_splats((%0)[0])
		</code>
		<code endian="be" nlines="1">
			vec_splats((%0)[1])
		</code>
	</function>

	<function name="_mm_load_ps">
		<in>float const*</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			*(__vector float*) (%0)
		</code>
	</function>

	<function name="_mm_loadu_ps">
		<in>float const*</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			*(__vector float*) (%0)
		</code>
	</function>

	<function name="_mm_load_ps1">
		<in>float const*</in>
		<out>__m128</out>

		<code endian="le" nlines="1">
			vec_splats((%0)[0])
		</code>
		<code endian="be" nlines="1">
			vec_splats((%0)[3])
		</code>
	</function>

	<function name="_mm_load1_ps">
		<in>float const*</in>
		<out>__m128</out>

		<code endian="le" nlines="1">
			vec_splats((%0)[0])
		</code>
		<code endian="be" nlines="1">
			vec_splats((%0)[3])
		</code>
	</function>

	<function name="_mm_load_si128">
		<in>__m128i const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			*(__vector signed char*) (%0)
		</code>
	</function>

	<function name="_mm_lddqu_si128">
		<in>__m128i const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			*(__vector signed char*) (%0)
		</code>
	</function>

	<function name="_mm_loadu_si128">
		<in>__m128i const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			*(__vector signed char*) (%0)
		</code>
	</function>

	<function name="_mm_loadu_si16">
		<in>void const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector short){*((short*)%0), 0, 0, 0, 0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_loadu_si32">
		<in>void const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector int){*((int*)%0), 0, 0, 0}
		</code>
	</function>

	<function name="_mm_loadu_si64">
		<in>void const*</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector long long){*((long long*)%0), 0}
		</code>
	</function>

	<!-- STORE INSTRUCTIONS -->
	<function name="_mm_store_si128">
		<in>__m128i*,__m128i</in>

		<code endian="bi" nlines="1">
			*(__vector char*) (%0) = (%1)
		</code>
	</function>

	<function name="_mm_store_pd">
		<in>double*,__m128d</in>

		<code endian="bi" nlines="1">
			*(__vector double*) (%0) = (%1)
		</code>
	</function>

	<function name="_mm_store1_pd">
		<in>double*,__m128d</in>

		<code endian="bi" nlines="3">
		<![CDATA[
			double d0 = ((double*)(&%1))[0];
			%0[0] = d0;
			%0[1] = d0;
		]]>
		</code>
	</function>

	<function name="_mm_store_pd1">
		<in>double*,__m128d</in>

		<code endian="bi" nlines="3">
		<![CDATA[
			double d0 = ((double*)(&%1))[0];
			%0[0] = d0;
			%0[1] = d0;
		]]>
		</code>
	</function>

	<function name="_mm_store1_ps">
		<in>float*,__m128</in>

		<code endian="bi" nlines="3">
		<![CDATA[
			float f0 = ((float*)(&%1))[3];
			%0[0] = f0; %0[1] = f0;
			%0[2] = f0; %0[3] = f0;
		]]>
		</code>
	</function>

	<function name="_mm_store_ps1">
		<in>float*,__m128</in>

		<code endian="bi" nlines="3">
		<![CDATA[
			float f0 = ((float*)(&%1))[0];
			%0[0] = f0; %0[1] = f0;
			%0[2] = f0; %0[3] = f0;
		]]>
		</code>
	</function>

	<function name="_mm_store_ps">
		<in>float*,__m128</in>

		<code endian="bi" nlines="1">
			*(__vector float*) (%0) = %1
		</code>
	</function>

	<function name="_mm_store_sd">
		<in>double*,__m128d</in>

		<code endian="bi" nlines="1">
			(%0)[0] = (%1)[0]
		</code>
	</function>

	<function name="_mm_store_ss">
		<in>float*,__m128</in>

		<code endian="bi" nlines="1">
			(%0)[0] = (%1)[0]
		</code>
	</function>

	<!-- SET INSTRUCTIONS -->
	<function name="_mm_set_epi8">
		<in>char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2, %1, %0}
		</code>
	</function>

	<function name="_mm_set1_epi8">
		<in>char</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0, %0}
		</code>
	</function>

	<function name="_mm_set_epi16">
		<in>short,short,short,short,short,short,short,short</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%7, %6, %5, %4, %3, %2, %1, %0})
		</code>
	</function>

	<function name="_mm_set1_epi16">
		<in>short</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%0, %0, %0, %0, %0, %0, %0, %0})
		</code>
	</function>

	<function name="_mm_set_epi32">
		<in>int,int,int,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%3, %2, %1, %0})
		</code>
	</function>

	<function name="_mm_set1_epi32">
		<in>int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%0, %0, %0, %0})
		</code>
	</function>

	<function name="_mm_set_epi64">
		<in>__m64,__m64</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_mergeh((__vector long long) %1, (__vector long long) %0)
		</code>
	</function>

	<function name="_mm_set1_epi64">
		<in>__m64</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_mergeh((__vector long long) %0, (__vector long long) %0)
		</code>
	</function>

	<function name="_mm_set_epi64x">
		<in>__int64,__int64</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector long long){%1, %0})
		</code>
	</function>

	<function name="_mm_set1_epi64x">
		<in>__int64</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector long long){%0, %0})
		</code>
	</function>

	<function name="_mm_set_pi8">
		<in>char,char,char,char,char,char,char,char</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%7, %6, %5, %4, %3, %2, %1, %0, 0, 0, 0, 0, 0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_set1_pi8">
		<in>char</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%0, %0, %0, %0, %0, %0, %0, %0, 0, 0, 0, 0, 0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_set_pi16">
		<in>short,short,short,short</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%3, %2, %1, %0, 0, 0, 0, 0})
		</code>
	</function>

	<function name="_mm_set1_pi16">
		<in>short</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%0, %0, %0, %0, 0, 0, 0, 0})
		</code>
	</function>

	<function name="_mm_set_pi32">
		<in>int,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%1, %0, 0, 0})
		</code>
	</function>

	<function name="_mm_set1_pi32">
		<in>int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%0, %0, 0, 0})
		</code>
	</function>

	<!-- This intrinsic wasn't defined in the manual, but generates a valid instruction. -->
	<function name="_mm_set_pi64x">
		<in>int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%0, 0, 0, 0})
		</code>
	</function>

	<function name="_mm_set1_pd">
		<in>double</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){%0, %0}
		</code>
	</function>

	<function name="_mm_set_pd">
		<in>double,double</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){%1, %0}
		</code>
	</function>

	<function name="_mm_set_pd1">
		<in>double</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){%0, %0}
		</code>
	</function>

	<function name="_mm_set_ps">
		<in>float,float,float,float</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){%3, %2, %1, %0}
		</code>
	</function>

	<function name="_mm_set_ps1">
		<in>float</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){%0, %0, %0, %0}
		</code>
	</function>

	<function name="_mm_set1_ps">
		<in>float</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){%0, %0, %0, %0}
		</code>
	</function>

	<function name="_mm_set_sd">
		<in>double</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){%0, 0}
		</code>
	</function>

	<function name="_mm_set_ss">
		<in>float</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){%0, 0, 0, 0}
		</code>
	</function>

	<!-- SETR INSTRUCTIONS -->
	<function name="_mm_setr_epi8">
		<in>char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15}
		</code>
	</function>

	<function name="_mm_setr_epi16">
		<in>short,short,short,short,short,short,short,short</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%0, %1, %2, %3, %4, %5, %6, %7})
		</code>
	</function>

	<function name="_mm_setr_epi32">
		<in>int,int,int,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%0, %1, %2, %3})
		</code>
	</function>

	<function name="_mm_setr_epi64">
		<in>__m64,__m64</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_mergeh((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_setr_pi8">
		<in>char,char,char,char,char,char,char,char</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char){%0, %1, %2, %3, %4, %5, %6, %7, 0, 0, 0, 0, 0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_setr_pi16">
		<in>short,short,short,short</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector short){%0, %1, %2, %3, 0, 0, 0, 0})
		</code>
	</function>

	<function name="_mm_setr_pi32">
		<in>int,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector int){%0, %1, 0, 0})
		</code>
	</function>

	<function name="_mm_setr_pd">
		<in>double,double</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){%0, %1}
		</code>
	</function>

	<function name="_mm_setr_ps">
		<in>float,float,float,float</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){%0, %1, %2, %3}
		</code>
	</function>

	<!-- SET ZERO INSTRUCTIONS -->
	<function name="_mm_setzero_pd">
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double){0, 0}
		</code>
	</function>

	<function name="_mm_setzero_ps">
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float){0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_setzero_si128">
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector long long){0, 0}
		</code>
	</function>

	<function name="_mm_setzero_si64">
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector long long){0, 0}
		</code>
	</function>

	<!-- ADD INSTRUCTIONS -->
	<function name="__builtin_ia32_paddb">
		<in>__v8qi,__v8qi</in>
		<out>__v8qi</out>

		<code endian="bi" nlines="1">
			%0 + %1
		</code>
	</function>

	<function name="_mm_add_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_mm_add_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_mm_add_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_add_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_add_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_add_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="__builtin_ia32_paddd128">
		<in>__v4si,__v4si</in>
		<out>__v4si</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_mm_add_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_add_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_adds_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_adds(%0, %1)
		</code>
	</function>

	<function name="_mm_adds_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_adds_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_adds_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_adds_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_adds_pu16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_adds_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_adds(%0, %1)
		</code>
	</function>

	<function name="_mm_adds_pu8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_add_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_addpd">
		<in>__v2df,__v2df</in>
		<out>__v2df</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_mm_add_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_addps">
		<in>__v4sf,__v4sf</in>
		<out>__v4sf</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_m_paddb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_add(%0, %1)
		</code>
	</function>

	<function name="_m_paddsb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_adds(%0, %1)
		</code>
	</function>

	<function name="_m_paddw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_paddsw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_paddd">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_add((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_m_paddusb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_m_paddusw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_adds((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_add_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
			__vector double result = %0;
			result[0] +=  %1[0];
			return result;
		</code>
	</function>

	<function name="_mm_add_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
			__vector float result = %0;
			result[0] +=  %1[0];
			return result;
		</code>
	</function>

	<!-- SUB INSTRUCTIONS -->
	<function name="__builtin_ia32_psubb">
		<in>__v8qi,__v8qi</in>
		<out>__v8qi</out>

		<code endian="bi" nlines="1">
			%0 - %1
		</code>
	</function>

	<function name="_mm_sub_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_subs_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_subs(%0, %1)
		</code>
	</function>

	<function name="_mm_subs_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_subs_pu8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_subs_pu16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="__builtin_ia32_subpd">
		<in>__v2df,__v2df</in>
		<out>__v2df</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_subps">
		<in>__v4sf,__v4sf</in>
		<out>__v4sf</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_sub_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_sub_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_sub_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="__builtin_ia32_psubd128">
		<in>__v4si,__v4si</in>
		<out>__v4si</out>

		<code endian="bi" nlines="1">
			vec_sub(%0, %1)
		</code>
	</function>

	<function name="_mm_sub_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_subs_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_subs(%0, %1)
		</code>
	</function>

	<function name="_mm_subs_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_subs_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_subs_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_m_psubb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector signed char) %0, (__vector signed char) %1)
		</code>
	</function>

	<function name="_m_psubsb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector signed char) %0, (__vector signed char) %1)
		</code>
	</function>

	<function name="_m_psubusb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_m_psubw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_psubsw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_psubusw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_subs((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_m_psubd">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_sub((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<!-- MUL INSTRUCTIONS -->
	<function name="_mm_mul_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_mul(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_mulpd">
		<in>__v2df,__v2df</in>
		<out>__v2df</out>

		<code endian="bi" nlines="1">
			vec_mul(%0, %1)
		</code>
	</function>

	<function name="_mm_mul_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_mul(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_mulps">
		<in>__v4sf,__v4sf</in>
		<out>__v4sf</out>

		<code endian="bi" nlines="1">
			vec_mul(%0, %1)
		</code>
	</function>

	<function name="_mm_mul_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="10">
			// WARNING: Altivec has no support for vec_mule((__vector int), (__vector int)). Therefore, we need to emulate its behavior.
			// For more information, see http://www.ibm.com/support/knowledgecenter/SSGH2K_13.1.3/com.ibm.xlc1313.aix.doc/compiler_ref/vec_mule.html
			__vector long long result;
			long long a0 = ((__vector int) %0)[0];
			long long b0 = ((__vector int) %1)[0];
			long long a2 = ((__vector int) %0)[2];
			long long b2 = ((__vector int) %1)[2];
			result[0] = a0 * b0;
			result[1] = a2 * b2;
			return (__vector signed char) result;
		</code>
	</function>

	<function name="_mm_mul_epu32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="10">
			// WARNING: Altivec has no support for vec_mule((__vector int), (__vector int)). Therefore, we need to emulate its behavior.
			// For more information, see http://www.ibm.com/support/knowledgecenter/SSGH2K_13.1.3/com.ibm.xlc1313.aix.doc/compiler_ref/vec_mule.html
			__vector unsigned long long result;
			unsigned long long a0 = ((__vector unsigned int) %0)[0];
			unsigned long long b0 = ((__vector unsigned int) %1)[0];
			unsigned long long a2 = ((__vector unsigned int) %0)[2];
			unsigned long long b2 = ((__vector unsigned int) %1)[2];
			result[0] = a0 * b0;
			result[1] = a2 * b2;
			return (__vector signed char) result;
		</code>
	</function>

	<function name="_mm_mul_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
			__vector double result = %0;
			result[0] *= %1[0];
			return result;
		</code>
	</function>

	<function name="_mm_mul_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
			__vector float result = %0;
			result[0] *= %1[0];
			return result;
		</code>
	</function>

	<function name="_mm_mullo_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) (((__vector short) %0) * ((__vector short) %1))
		</code>
	</function>

	<function name="_mm_mullo_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) (((__vector int) %0) * ((__vector int) %1))
		</code>
	</function>

	<function name="_mm_mul_su32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="8">
			// WARNING: Altivec has no support for vec_mule((__vector int), (__vector int)). Therefore, we need to emulate its behavior.
			// For more information, see http://www.ibm.com/support/knowledgecenter/SSGH2K_13.1.3/com.ibm.xlc1313.aix.doc/compiler_ref/vec_mule.html
			__vector unsigned long long result;
			unsigned long long a0 = ((__vector unsigned int) %0)[0];
			unsigned long long b0 = ((__vector unsigned int) %1)[0];
			result[0] = a0 * b0;
			result[1] = 0;
			return (__vector signed char) result;
		</code>
	</function>

	<function name="_mm_mullo_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) (((__vector long long) %0) * ((__vector long long) %1))
		</code>
	</function>

	<function name="_mm_mullo_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) (((__vector short) %0) * ((__vector short) %1))
		</code>
	</function>

	<function name="_m_pmullw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) (((__vector short) %0) * ((__vector short) %1))
		</code>
	</function>

	<!-- DIV INSTRUCTIONS -->
	<function name="_mm_div_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_div(%0, %1)
		</code>
	</function>

	<function name="_mm_div_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_div_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_div_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_div_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_div_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_div_epu32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector unsigned int) %0, (__vector unsigned int) %1)
		</code>
	</function>

	<function name="_mm_div_epu64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_div((__vector unsigned long long) %0, (__vector unsigned long long) %1)
		</code>
	</function>

	<function name="_mm_div_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_div(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_divpd">
		<in>__v2df,__v2df</in>
		<out>__v2df</out>

		<code endian="bi" nlines="1">
			vec_div(%0, %1)
		</code>
	</function>

	<function name="_mm_div_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_div(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_divps">
		<in>__v4sf,__v4sf</in>
		<out>__v4sf</out>

		<code endian="bi" nlines="1">
			vec_div(%0, %1)
		</code>
	</function>

	<function name="_mm_div_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
			__vector double result = %0;
			result[0] /= %1[0];
			return result;
		</code>
	</function>

	<function name="_mm_div_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
			__vector float result = %0;
			result[0] /= %1[0];
			return result;
		</code>
	</function>

	<!-- OR INSTRUCTIONS -->
	<function name="_mm_or_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<function name="_mm_or_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<function name="_mm_or_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<function name="_mm_or_si128">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_por128">
		<in>__v2di,__v2di</in>
		<out>__v2di</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<function name="_m_por">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_or(%0, %1)
		</code>
	</function>

	<!-- AND INSTRUCTIONS -->
	<function name="_mm_and_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="_mm_and_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="_mm_and_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_pand">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="_mm_andnot_si128">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_andc(%1, %0)
		</code>
	</function>

	<function name="_mm_andnot_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_andc(%1, %0)
		</code>
	</function>

	<function name="_mm_andnot_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_andc(%1, %0)
		</code>
	</function>

	<function name="_mm_andnot_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_andc(%1, %0)
		</code>
	</function>

	<function name="_mm_and_si128">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_pand128">
		<in>__v2di,__v2di</in>
		<out>__v2di</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<function name="_m_pand">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_and(%0, %1)
		</code>
	</function>

	<!-- XOR INSTRUCTIONS -->
	<function name="_mm_xor_si128">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<function name="__builtin_ia32_pxor128">
		<in>__v2di,__v2di</in>
		<out>__v2di</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<function name="_m_pxor">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<function name="_mm_xor_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<function name="_mm_xor_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<function name="_mm_xor_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_xor(%0, %1)
		</code>
	</function>

	<!-- MAX INSTRUCTIONS -->
	<function name="_mm_max_pu8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_max_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			__vector double result = %0;
			if ( %1[0] > %0[0] ) result[0] = %1[0];
			return result;
		]]>
		</code>
	</function>

	<function name="_mm_max_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			__vector float result = %0;
			if ( %1[0] > %0[0] ) result[0] = %1[0];
			return result;
		]]>
		</code>
	</function>

	<function name="_mm_max_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_max(%0, %1)
		</code>
	</function>

	<function name="_mm_max_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_max_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_max_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_max_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_max_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_max_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_max_epu32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_max_epu64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_max((__vector unsigned long long) %0, (__vector unsigned long long) %1)
		</code>
	</function>

	<function name="_mm_max_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_max(%0, %1)
		</code>
	</function>

	<function name="_mm_max_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_max(%0, %1)
		</code>
	</function>

	<!-- MIN INSTRUCTIONS -->
	<function name="_mm_min_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			__vector double result = %0;
			if ( %1[0] < %0[0] ) result[0] = %1[0];
			return result;
		]]>
		</code>
	</function>

	<function name="_mm_min_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			__vector float result = %0;
			if ( %1[0] < %0[0] ) result[0] = %1[0];
			return result;
		]]>
		</code>
	</function>

	<function name="_mm_min_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_min(%0, %1)
		</code>
	</function>

	<function name="_mm_min_pu8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_min_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_min_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_min_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_min_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_min_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector unsigned char) %0, (__vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_min_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector unsigned short) %0, (__vector unsigned short) %1)
		</code>
	</function>

	<function name="_mm_min_epu32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector unsigned int) %0, (__vector unsigned int) %1)
		</code>
	</function>

	<function name="_mm_min_epu64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_min((__vector unsigned long long) %0, (__vector unsigned long long) %1)
		</code>
	</function>

	<function name="_mm_min_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_min(%0, %1)
		</code>
	</function>

	<function name="_mm_min_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_min(%0, %1)
		</code>
	</function>

	<!-- FLOOR INSTRUCTIONS -->
	<function name="_mm_floor_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_floor(%0)
		</code>
	</function>

	<function name="_mm_floor_ps">
		<in>__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_floor(%0)
		</code>
	</function>

	<!-- CEIL INSTRUCTIONS -->
	<function name="_mm_ceil_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_ceil(%0)
		</code>
	</function>

	<function name="_mm_ceil_ps">
		<in>__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_ceil(%0)
		</code>
	</function>

	<!-- TRUNC INSTRUCTIONS -->
	<function name="_mm_trunc_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_roundz(%0)
		</code>
	</function>

	<function name="_mm_trunc_ps">
		<in>__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_roundz(%0)
		</code>
	</function>

	<!-- ROUND INSTRUCTIONS -->
	<function name="_mm_round_pd">
		<in>__m128d,int</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_round(%0 /**, %1 */)
		</code>
	</function>

	<function name="_mm_round_ps">
		<in>__m128,int</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_round(%0 /**, %1 */)
		</code>
	</function>

	<!-- ABS INSTRUCTIONS -->
	<function name="_mm_abs_pi8">
		<in>__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_abs(%0)
		</code>
	</function>

	<function name="_mm_abs_epi8">
		<in>__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_abs(%0)
		</code>
	</function>

	<function name="_mm_abs_pi16">
		<in>__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_abs((__vector short) %0)
		</code>
	</function>

	<function name="_mm_abs_epi16">
		<in>__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_abs((__vector short) %0)
		</code>
	</function>

	<function name="_mm_abs_pi32">
		<in>__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_abs((__vector int) %0)
		</code>
	</function>

	<function name="_mm_abs_epi32">
		<in>__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_abs((__vector int) %0)
		</code>
	</function>

	<function name="_mm_abs_epi64">
		<in>__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_abs((__vector long long) %0)
		</code>
	</function>

	<!-- AVG INSTRUCTIONS -->
	<function name="_mm_avg_epu8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(vector signed char) vec_avg((vector unsigned char) %0, (vector unsigned char) %1)
		</code>
	</function>

	<function name="_mm_avg_epu16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(vector signed char) vec_avg((vector unsigned short) %0, (vector unsigned short) %1)
		</code>
	</function>

	<!-- MOVE INSTRUCTIONS -->
	<function name="_mm_movedup_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_mergeh(%0, %0)
		</code>
	</function>

	<function name="_mm_movelh_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float) vec_mergeh((__vector double) %0, (__vector double) %1)
		</code>
	</function>

	<function name="_mm_movehl_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float) vec_mergel((__vector double) %1, (__vector double) %0)
		</code>
	</function>

	<function name="_mm_move_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="4">
			__vector double result;
			result[0] = %1[0];
			result[1] = %0[1];
			return result;
		</code>
	</function>

	<function name="_mm_move_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
			__vector float result = %0;
			result[0] = %1[0];
			return result;
		</code>
	</function>

	<function name="_mm_move_epi64">
		<in>__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector long long){((__vector long long) %0)[0], 0})
		</code>
	</function>

	<!-- NOP INSTRUCTIONS -->
	<function name="_mm_empty">
		<code endian="bi" nlines="1">
			/** NOP */
		</code>
	</function>

	<function name="_m_empty">
		<code endian="bi" nlines="1">
			/** NOP */
		</code>
	</function>

	<!-- CMP INSTRUCTIONS -->
	<function name="_mm_cmpeq_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_cmpeq(%0, %1)
		</code>
	</function>

	<function name="_m_pcmpeqb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_cmpeq(%0, %1)
		</code>
	</function>

	<function name="_mm_cmplt_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_cmplt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpgt_epi8">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpeq_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_cmpeq(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpgt_pi8">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpeq_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_cmpeq_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_cmpgt_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_pcmpeqw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_pcmpgtw">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_m_pcmpgtb">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmplt_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmplt((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_cmpgt_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector short) %0, (__vector short) %1)
		</code>
	</function>

	<function name="_mm_cmpeq_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_cmplt_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmplt((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_cmpgt_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_cmpeq_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_m_pcmpeqd">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_m_pcmpgtd">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_cmpgt_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector int) %0, (__vector int) %1)
		</code>
	</function>

	<function name="_mm_cmpeq_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpeq((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_cmpgt_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_cmpgt((__vector long long) %0, (__vector long long) %1)
		</code>
	</function>

	<function name="_mm_cmpeq_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmpeq(%0, %1)
		</code>
	</function>

	<function name="_mm_cmple_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmple(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpgt_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpge_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmpge(%0, %1)
		</code>
	</function>

	<function name="_mm_cmplt_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmplt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpneq_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="2">
			__vector double result = (__vector double) vec_cmpeq(%0, %1);
			return vec_nand(result,result);
		</code>
	</function>

	<function name="_mm_cmpnge_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmplt(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpnle_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpngt_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmple(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpnlt_pd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_cmpge(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpeq_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmpeq(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpge_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmpge(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpgt_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmple_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmple(%0, %1)
		</code>
	</function>

	<function name="_mm_cmplt_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmplt(%0, %1)
		</code>
	</function>

	<function name="_mm_cmpnge_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmplt(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpneq_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="2">
			__vector float result = (__vector float) vec_cmpeq(%0, %1);
			return vec_nand(result,result);
		</code>
	</function>

	<function name="_mm_cmpngt_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmple(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpnle_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmpgt(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpnlt_ps">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_cmpge(%0,%1)
		</code>
	</function>

	<function name="_mm_cmpeq_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] == %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpge_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] >= %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpgt_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] > %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmple_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] <= %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmplt_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] < %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpneq_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] != %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0,%0,0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnge_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] < %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpngt_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] <= %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnle_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] > %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnlt_ss">
		<in>__m128,__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] >= %1[0])
				return (__vector float) vec_insert(0xFFFFFFFF, (__vector int) %0, 0);
			return vec_insert(0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpeq_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] == %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpge_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] >= %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpgt_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] > %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmple_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] <= %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmplt_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] < %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpneq_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] != %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnge_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] < %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpngt_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] <= %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnle_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] > %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<function name="_mm_cmpnlt_sd">
		<in>__m128d,__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="3">
		<![CDATA[
			if (%0[0] >= %1[0])
				return (__vector double) vec_insert(0xFFFFFFFFFFFFFFFF, (__vector long long) %0, 0);
			return vec_insert(0.0, %0, 0);
		]]>
		</code>
	</function>

	<!-- SQRT INSTRUCTIONS -->
	<function name="_mm_sqrt_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_sqrt(%0)
		</code>
	</function>

	<function name="_mm_sqrt_ps">
		<in>__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_sqrt(%0)
		</code>
	</function>

	<!-- SHIFT INSTRUCTIONS -->
	<function name="_mm_sll_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector short)(%0), vec_splats(((__vector unsigned short)(%1))[0]));
		</code>
	</function>

	<function name="_mm_srl_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector short)(%0), vec_splats(((__vector unsigned short)(%1))[0]));
		</code>
	</function>

	<function name="_mm_sll_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector int)(%0), vec_splats(((__vector unsigned int)(%1))[0]));
		</code>
	</function>

	<function name="_mm_srl_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector int)(%0), vec_splats(((__vector unsigned int)(%1))[0]));
		</code>
	</function>

	<function name="_mm_sll_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector long long)(%0), vec_splats(((__vector unsigned long long)(%1))[0]));
		</code>
	</function>

	<function name="_mm_srl_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector long long)(%0), vec_splats(((__vector unsigned long long)(%1))[0]));
		</code>
	</function>

	<function name="_mm_slli_epi16">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector short)(%0), vec_splats((unsigned short) %1));
		</code>
	</function>

	<function name="_mm_srli_epi16">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector short)(%0), vec_splats((unsigned short) %1));
		</code>
	</function>

	<function name="_mm_slli_epi32">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector int)(%0), vec_splats((unsigned int) %1));
		</code>
	</function>

	<function name="_mm_srli_epi32">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector int)(%0), vec_splats((unsigned int) %1));
		</code>
	</function>

	<function name="_mm_slli_epi64">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector long long)(%0), vec_splats((unsigned long long) %1));
		</code>
	</function>

	<function name="_mm_srli_epi64">
		<in>__m128i,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector long long)(%0), vec_splats((unsigned long long) %1));
		</code>
	</function>

	<function name="_mm_slli_pi16">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector short)(%0), vec_splats((unsigned short) %1));
		</code>
	</function>

	<function name="_mm_srli_pi16">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			return vec_sr((__vector short)(%0), vec_splats((unsigned short) %1));
		</code>
	</function>

	<function name="_mm_slli_pi32">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector int)(%0), vec_splats((unsigned int) %1));
		</code>
	</function>

	<function name="_mm_srli_pi32">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector int)(%0), vec_splats((unsigned int) %1));
		</code>
	</function>

	<function name="_mm_slli_si64">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector long long)(%0), vec_splats((unsigned long long) %1));
		</code>
	</function>

	<function name="_mm_srli_si64">
		<in>__m64,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector long long)(%0), vec_splats((unsigned long long) %1));
		</code>
	</function>

	<function name="_mm_sll_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sl((__vector short)(%0), vec_splats((unsigned short) count));
		]]>
		</code>
	</function>

	<function name="_mm_srl_pi16">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sr((__vector short)(%0), vec_splats((unsigned short) count));
		]]>
		</code>
	</function>

	<function name="_mm_sll_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sl((__vector int)(%0), vec_splats((unsigned int) count));
		]]>
		</code>
	</function>

	<function name="_mm_srl_pi32">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sr((__vector int)(%0), vec_splats((unsigned int) count));
		]]>
		</code>
	</function>

	<function name="_mm_sll_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sl((__vector long long)(%0), vec_splats((unsigned long long) count));
		]]>
		</code>
	</function>

	<function name="_mm_srl_si64">
		<in>__m64,__m64</in>
		<out>__m64</out>

		<code endian="bi" nlines="2">
		<![CDATA[
			unsigned long long count = ((__vector unsigned long long)(%1))[0];
			return vec_sr((__vector long long)(%0), vec_splats((unsigned long long) count));
		]]>
		</code>
	</function>

	<function name="_mm_sllv_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector short)(%0), (__vector unsigned short)(%1))
		</code>
	</function>

	<function name="_mm_srlv_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector short)(%0), (__vector unsigned short)(%1))
		</code>
	</function>

	<function name="_mm_sllv_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector int)(%0), (__vector unsigned int)(%1))
		</code>
	</function>

	<function name="_mm_srlv_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector int)(%0), (__vector unsigned int)(%1))
		</code>
	</function>

	<function name="_mm_sllv_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sl((__vector long long)(%0), (__vector unsigned long long)(%1))
		</code>
	</function>

	<function name="_mm_srlv_epi64">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_sr((__vector long long)(%0), (__vector unsigned long long)(%1))
		</code>
	</function>

	<!-- PACK INSTRUCTIONS -->
	<function name="_mm_packs_epi16">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="le" nlines="1">
			(__vector signed char) vec_packs((__vector short)(%0), (__vector short)(%1))
		</code>
		<code endian="be" nlines="1">
			(__vector signed char) vec_packs((__vector short)(%0), (__vector short)(%1))
		</code>
	</function>

	<function name="_mm_packs_epi32">
		<in>__m128i,__m128i</in>
		<out>__m128i</out>

		<code endian="le" nlines="1">
			(__vector signed char) vec_packs((__vector int)(%0), (__vector int)(%1))
		</code>
		<code endian="be" nlines="1">
			(__vector signed char) vec_packs((__vector int)(%0), (__vector int)(%1))
		</code>
	</function>

	<!-- CAST OPERATIONS -->
	<function name="_mm_castpd_ps">
		<in>__m128d</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float) %0
		</code>
	</function>

	<function name="_mm_castpd_si128">
		<in>__m128d</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) %0
		</code>
	</function>

	<function name="_mm_castps_pd">
		<in>__m128</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double) %0
		</code>
	</function>

	<function name="_mm_castps_si128">
		<in>__m128</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) %0
		</code>
	</function>

	<function name="_mm_castsi128_pd">
		<in>__m128i</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			(__vector double) %0
		</code>
	</function>

	<function name="_mm_castsi128_ps">
		<in>__m128i</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			(__vector float) %0
		</code>
	</function>

	<!-- EXTRACT OPERATIONS -->
	<function name="_mm_extract_epi16">
		<in>__m128i,int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector short) %0)[%1]
		</code>
	</function>

	<function name="_mm_extract_epi32">
		<in>__m128i,const int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector int) %0)[%1]
		</code>
	</function>

	<function name="_mm_extract_epi64">
		<in>__m128i,const int</in>
		<out>__int64</out>

		<code endian="bi" nlines="1">
			(int) ((__vector long long) %0)[%1]
		</code>
	</function>

	<function name="_mm_extract_epi8">
		<in>__m128i,const int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector signed char) %0)[%1]
		</code>
	</function>

	<function name="_mm_extract_pi16">
		<in>__m64,int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector short) %0)[%1]
		</code>
	</function>

	<function name="_mm_extract_ps">
		<in>__m128,const int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector float) %0)[%1]
		</code>
	</function>

	<function name="_m_pextrw">
		<in>__m64,int</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			(int) ((__vector short) %0)[%1]
		</code>
	</function>

	<!-- TEST INSTRUCTIONS -->
	<function name="_mm_test_all_ones">
		<in>__m128i</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			vec_all_eq(%0,((__vector signed char){0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}))
		</code>
	</function>

	<function name="_mm_test_all_zeros">
		<in>__m128i,__m128i</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			vec_all_eq(vec_and(%0,%1),((__vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}))
		</code>
	</function>

	<!-- SVML INSTRUCTIONS -->
	<function name="_mm_log2_pd">
		<in>__m128d</in>
		<out>__m128d</out>

		<code endian="bi" nlines="1">
			vec_loge(%0)
		</code>
	</function>

	<function name="_mm_log2_ps">
		<in>__m128</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_loge(%0)
		</code>
	</function>

	<!-- INSERT INSTRUCTIONS -->
	<function name="_mm_insert_epi8">
		<in>__m128i,int,const int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			vec_insert(%1, %0, %2)
		</code>
	</function>

	<function name="_mm_insert_epi16">
		<in>__m128i,int,int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_insert(%1, (__vector short)(%0), %2)
		</code>
	</function>

	<function name="_mm_insert_pi16">
		<in>__m64,int,int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_insert(%1, (__vector short)(%0), %2)
		</code>
	</function>

	<function name="_mm_insert_epi32">
		<in>__m128i,int,const int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_insert(%1, (__vector int)(%0), %2)
		</code>
	</function>

	<function name="_mm_insert_epi64">
		<in>__m128i,__int64,const int</in>
		<out>__m128i</out>

		<code endian="bi" nlines="1">
			(__vector signed char) vec_insert(%1, (__vector long long)(%0), %2)
		</code>
	</function>

	<function name="_mm_insert_ps">
		<in>__m128,__m128,const int</in>
		<out>__m128</out>

		<code endian="bi" nlines="1">
			vec_insert(%1, %0, %2)
		</code>
	</function>

	<!-- CONVERT INSTRUCTIONS -->
	<function name="_m_from_int64">
		<in>__int64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector long long){%0, 0})
		</code>
	</function>

	<function name="_m_from_int">
		<in>int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector signed char)((__vector long long){%0, 0})
		</code>
	</function>

	<function name="_m_to_int64">
		<in>__m64</in>
		<out>__int64</out>

		<code endian="bi" nlines="1">
			((__vector long long) %0)[0]
		</code>
	</function>

	<function name="_m_to_int">
		<in>__m64</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			((__vector int) %0)[0]
		</code>
	</function>

	<function name="_mm_cvtm64_si64">
		<in>__m64</in>
		<out>__int64</out>

		<code endian="bi" nlines="1">
			((__vector long long) %0)[0]
		</code>
	</function>

	<function name="_mm_cvtsi32_si64">
		<in>int</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector int){%0, 0, 0, 0}
		</code>
	</function>

	<function name="_mm_cvtsi64_m64">
		<in>__int64</in>
		<out>__m64</out>

		<code endian="bi" nlines="1">
			(__vector long long){%0, 0}
		</code>
	</function>

	<function name="_mm_cvtsi64_si32">
		<in>__m64</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			((__vector int) %0)[0]
		</code>
	</function>

	<function name="_mm_cvtsi128_si32">
		<in>__m128i</in>
		<out>int</out>

		<code endian="bi" nlines="1">
			((__vector int) %0)[0]
		</code>
	</function>

	<function name="_mm_cvtsi128_si64">
		<in>__m128i</in>
		<out>__int64</out>

		<code endian="bi" nlines="1">
			((__vector long long) %0)[0]
		</code>
	</function>

	<function name="_mm_cvtsi128_si64x">
		<in>__m128i</in>
		<out>__int64</out>

		<code endian="bi" nlines="1">
			((__vector long long) %0)[0]
		</code>
	</function>

	<function name="_addcarry_u32"><in>unsigned char,unsigned int,unsigned int,unsigned int *</in><out>unsigned char</out></function>
	<function name="_addcarry_u64"><in>unsigned char,unsigned __int64,unsigned __int64,unsigned __int64 *</in><out>unsigned char</out></function>
	<function name="_addcarryx_u32"><in>unsigned char,unsigned int,unsigned int,unsigned int *</in><out>unsigned char</out></function>
	<function name="_addcarryx_u64"><in>unsigned char,unsigned __int64,unsigned __int64,unsigned __int64 *</in><out>unsigned char</out></function>
	<function name="_allow_cpu_features"><in>unsigned __int64</in></function>
	<function name="_bextr_u32"><in>unsigned int,unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_bextr_u64"><in>unsigned __int64,unsigned int,unsigned int</in><out>unsigned __int64</out></function>
	<function name="_BitScanForward64"><in>unsigned __int32*,unsigned __int64</in><out>unsigned char</out></function>
	<function name="_bit_scan_forward"><in>int</in><out>int</out></function>
	<function name="_BitScanForward"><in>unsigned __int32*,unsigned __int32</in><out>unsigned char</out></function>
	<function name="_BitScanReverse64"><in>unsigned __int32*,unsigned __int64</in><out>unsigned char</out></function>
	<function name="_bit_scan_reverse"><in>int</in><out>int</out></function>
	<function name="_BitScanReverse"><in>unsigned __int32*,unsigned __int32</in><out>unsigned char</out></function>
	<function name="_bittest64"><in>__int64*,__int64</in><out>unsigned char</out></function>
	<function name="_bittestandcomplement64"><in>__int64*,__int64</in><out>unsigned char</out></function>
	<function name="_bittestandcomplement"><in>__int32*,__int32</in><out>unsigned char</out></function>
	<function name="_bittestandreset64"><in>__int64*,__int64</in><out>unsigned char</out></function>
	<function name="_bittestandreset"><in>__int32*,__int32</in><out>unsigned char</out></function>
	<function name="_bittestandset64"><in>__int64*,__int64</in><out>unsigned char</out></function>
	<function name="_bittestandset"><in>__int32*,__int32</in><out>unsigned char</out></function>
	<function name="_bittest"><in>__int32*,__int32</in><out>unsigned char</out></function>
	<function name="_blsi_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_blsi_u64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_blsmsk_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_blsmsk_u64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_blsr_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_blsr_u64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_bnd_chk_ptr_bounds"><in>const void *,size_t</in></function>
	<function name="_bnd_chk_ptr_lbounds"><in>const void *</in></function>
	<function name="_bnd_chk_ptr_ubounds"><in>const void *</in></function>
	<function name="_bnd_copy_ptr_bounds"><in>const void *,const void *</in><out>void *</out></function>
	<function name="_bnd_get_ptr_lbound"><in>const void *</in><out>const void *</out></function>
	<function name="_bnd_get_ptr_ubound"><in>const void *</in><out>const void *</out></function>
	<function name="_bnd_init_ptr_bounds"><in>const void *</in><out>void *</out></function>
	<function name="_bnd_narrow_ptr_bounds"><in>const void *,const void *,size_t</in><out>void *</out></function>
	<function name="_bnd_set_ptr_bounds"><in>const void *,size_t</in><out>void *</out></function>
	<function name="_bnd_store_ptr_bounds"><in>const void **,const void *</in></function>
	<function name="_bswap64"><in>__int64</in><out>__int64</out></function>
	<function name="_bswap"><in>int</in><out>int</out></function>
	<function name="_bzhi_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_bzhi_u64"><in>unsigned __int64,unsigned int</in><out>unsigned __int64</out></function>
	<function name="_castf32_u32"><in>float</in><out>unsigned __int32</out></function>
	<function name="_castf64_u64"><in>double</in><out>unsigned __int64</out></function>
	<function name="_castu32_f32"><in>unsigned __int32</in><out>float</out></function>
	<function name="_castu64_f64"><in>unsigned __int64</in><out>double</out></function>
	<function name="_cvtsh_ss"><in>unsigned short</in><out>float</out></function>
	<function name="_cvtss_sh"><in>float,int</in><out>unsigned short</out></function>
	<function name="_fxrstor64"><in>void *</in></function>
	<function name="_fxrstor"><in>void *</in></function>
	<function name="_fxsave64"><in>void *</in></function>
	<function name="_fxsave"><in>void *</in></function>
	<function name="_invpcid"><in>unsigned int,void*</in></function>
	<function name="_loadbe_i16"><in>void const *</in><out>short</out></function>
	<function name="_loadbe_i32"><in>void const *</in><out>int</out></function>
	<function name="_loadbe_i64"><in>void const *</in><out>__int64</out></function>
	<function name="_lrotl"><in>unsigned long,int</in><out>unsigned long</out></function>
	<function name="_lrotr"><in>unsigned long,int</in><out>unsigned long</out></function>
	<function name="_lzcnt_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_lzcnt_u64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_may_i_use_cpu_feature"><in>unsigned __int64</in><out>int</out></function>
	<function name="_pdep_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_pdep_u64"><in>unsigned __int64,unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_pext_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_pext_u64"><in>unsigned __int64,unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_popcnt32"><in>int</in><out>int</out></function>
	<function name="_popcnt64"><in>__int64</in><out>int</out></function>
	<function name="_rdpmc"><in>int</in><out>__int64</out></function>
	<function name="_rdrand16_step"><in>unsigned short*</in><out>int</out></function>
	<function name="_rdrand32_step"><in>unsigned int*</in><out>int</out></function>
	<function name="_rdrand64_step"><in>unsigned __int64*</in><out>int</out></function>
	<function name="_rdseed16_step"><in>unsigned short *</in><out>int</out></function>
	<function name="_rdseed32_step"><in>unsigned int *</in><out>int</out></function>
	<function name="_rdseed64_step"><in>unsigned __int64 *</in><out>int</out></function>
	<function name="_rdtsc"><out>__int64</out></function>
	<function name="__rdtscp"><in>unsigned int *</in><out>unsigned __int64</out></function>
	<function name="_readfsbase_u32"><out>unsigned int</out></function>
	<function name="_readfsbase_u64"><out>unsigned __int64</out></function>
	<function name="_readgsbase_u32"><out>unsigned int</out></function>
	<function name="_readgsbase_u64"><out>unsigned __int64</out></function>
	<function name="_rotl"><in>unsigned int,int</in><out>unsigned int</out></function>
	<function name="_rotr"><in>unsigned int,int</in><out>unsigned int</out></function>
	<function name="_rotwl"><in>unsigned short,int</in><out>unsigned short</out></function>
	<function name="_rotwr"><in>unsigned short,int</in><out>unsigned short</out></function>
	<function name="_storebe_i16"><in>void *,short</in></function>
	<function name="_storebe_i32"><in>void *,int</in></function>
	<function name="_storebe_i64"><in>void *,__int64</in></function>
	<function name="_subborrow_u32"><in>unsigned char,unsigned int,unsigned int,unsigned int *</in><out>unsigned char</out></function>
	<function name="_subborrow_u64"><in>unsigned char,unsigned __int64,unsigned __int64,unsigned __int64 *</in><out>unsigned char</out></function>
	<function name="_tzcnt_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_tzcnt_u64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_writefsbase_u32"><in>unsigned int</in></function>
	<function name="_writefsbase_u64"><in>unsigned __int64</in></function>
	<function name="_writegsbase_u32"><in>unsigned int</in></function>
	<function name="_writegsbase_u64"><in>unsigned __int64</in></function>
	<function name="_xgetbv"><in>unsigned int</in><out>unsigned __int64</out></function>
	<function name="_xrstor64"><in>void *,unsigned __int64</in></function>
	<function name="_xrstor"><in>void *,unsigned __int64</in></function>
	<function name="_xrstors64"><in>const void *,unsigned __int64</in></function>
	<function name="_xrstors"><in>const void *,unsigned __int64</in></function>
	<function name="_xsave64"><in>void *,unsigned __int64</in></function>
	<function name="_xsavec64"><in>void *,unsigned __int64</in></function>
	<function name="_xsavec"><in>void *,unsigned __int64</in></function>
	<function name="_xsave"><in>void *,unsigned __int64</in></function>
	<function name="_xsaveopt64"><in>void *,unsigned __int64</in></function>
	<function name="_xsaveopt"><in>void *,unsigned __int64</in></function>
	<function name="_xsaves64"><in>void *,unsigned __int64</in></function>
	<function name="_xsaves"><in>void *,unsigned __int64</in></function>
	<function name="_xsetbv"><in>unsigned int,unsigned __int64</in></function>

	<function name="_mm256_abs_epi16"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_abs_epi32"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_abs_epi64"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_abs_epi8"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_acosh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_acosh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_acos_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_acos_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_add_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_add_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_add_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_add_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_add_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_add_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_adds_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_adds_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_adds_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_adds_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_addsub_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_addsub_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_alignr_epi32"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_alignr_epi64"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_alignr_epi8"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_andnot_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_andnot_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_andnot_si256"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_and_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_and_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_and_si256"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_asinh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_asinh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_asin_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_asin_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_atan2_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_atan2_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_atanh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_atanh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_atan_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_atan_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_avg_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_avg_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_blend_epi16"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_blend_epi32"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_blend_pd"><in>__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_blend_ps"><in>__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_blendv_epi8"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_blendv_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_blendv_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_broadcastb_epi8"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcastd_epi32"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_f32x2"><in>__m128</in><out>__m256</out></function>
	<function name="_mm256_broadcast_f32x4"><in>__m128</in><out>__m256</out></function>
	<function name="_mm256_broadcast_f64x2"><in>__m128d</in><out>__m256d</out></function>
	<function name="_mm256_broadcast_i32x2"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_i32x4"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_i64x2"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcastmb_epi64"><in>__mmask8</in><out>__m256i</out></function>
	<function name="_mm256_broadcastmw_epi32"><in>__mmask16</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_pd"><in>__m128d const *</in><out>__m256d</out></function>
	<function name="_mm256_broadcast_ps"><in>__m128 const *</in><out>__m256</out></function>
	<function name="_mm256_broadcastq_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_sd"><in>double const *</in><out>__m256d</out></function>
	<function name="_mm256_broadcastsd_pd"><in>__m128d</in><out>__m256d</out></function>
	<function name="_mm256_broadcastsi128_si256"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_broadcast_ss"><in>float const *</in><out>__m256</out></function>
	<function name="_mm256_broadcastss_ps"><in>__m128</in><out>__m256</out></function>
	<function name="_mm256_broadcastw_epi16"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_bslli_epi128"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_bsrli_epi128"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_castpd128_pd256"><in>__m128d</in><out>__m256d</out></function>
	<function name="_mm256_castpd256_pd128"><in>__m256d</in><out>__m128d</out></function>
	<function name="_mm256_castpd_ps"><in>__m256d</in><out>__m256</out></function>
	<function name="_mm256_castpd_si256"><in>__m256d</in><out>__m256i</out></function>
	<function name="_mm256_castps128_ps256"><in>__m128</in><out>__m256</out></function>
	<function name="_mm256_castps256_ps128"><in>__m256</in><out>__m128</out></function>
	<function name="_mm256_castps_pd"><in>__m256</in><out>__m256d</out></function>
	<function name="_mm256_castps_si256"><in>__m256</in><out>__m256i</out></function>
	<function name="_mm256_castsi128_si256"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_castsi256_pd"><in>__m256i</in><out>__m256d</out></function>
	<function name="_mm256_castsi256_ps"><in>__m256i</in><out>__m256</out></function>
	<function name="_mm256_castsi256_si128"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cbrt_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cbrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cdfnorminv_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cdfnorminv_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cdfnorm_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cdfnorm_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_ceil_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_ceil_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cexp_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_clog_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cmp_epi16_mask"><in>__m256i,__m256i,const int</in><out>__mmask16</out></function>
	<function name="_mm256_cmp_epi32_mask"><in>__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_cmp_epi64_mask"><in>__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_cmp_epi8_mask"><in>__m256i,__m256i,const int</in><out>__mmask32</out></function>
	<function name="_mm256_cmp_epu16_mask"><in>__m256i,__m256i,const int</in><out>__mmask16</out></function>
	<function name="_mm256_cmp_epu32_mask"><in>__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_cmp_epu64_mask"><in>__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_cmp_epu8_mask"><in>__m256i,__m256i,const int</in><out>__mmask32</out></function>
	<function name="_mm256_cmpeq_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpeq_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpeq_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpeq_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpeq_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpeq_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpeq_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpeq_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpeq_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpeq_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpeq_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpeq_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpge_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpge_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpge_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpge_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpge_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpge_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpge_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpge_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpgt_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpgt_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpgt_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpgt_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpgt_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpgt_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpgt_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cmpgt_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpgt_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpgt_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpgt_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpgt_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmple_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmple_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmple_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmple_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmple_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmple_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmple_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmple_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmplt_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmplt_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmplt_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmplt_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmplt_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmplt_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmplt_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmplt_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpneq_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpneq_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpneq_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpneq_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmpneq_epu16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_cmpneq_epu32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpneq_epu64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_cmpneq_epu8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_cmp_pd"><in>__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_cmp_pd_mask"><in>__m256d,__m256d,const int</in><out>__mmask8</out></function>
	<function name="_mm256_cmp_ps"><in>__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_cmp_ps_mask"><in>__m256,__m256,const int</in><out>__mmask8</out></function>
	<function name="_mm256_conflict_epi32"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_conflict_epi64"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_cosd_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cosd_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cosh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cosh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cos_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_cos_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_csqrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_cvtepi16_epi32"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepi16_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepi16_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi32_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi32_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepi32_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi32_pd"><in>__m128i</in><out>__m256d</out></function>
	<function name="_mm256_cvtepi32_ps"><in>__m256i</in><out>__m256</out></function>
	<function name="_mm256_cvtepi64_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi64_epi32"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi64_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtepi64_pd"><in>__m256i</in><out>__m256d</out></function>
	<function name="_mm256_cvtepi64_ps"><in>__m256i</in><out>__m128</out></function>
	<function name="_mm256_cvtepi8_epi16"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepi8_epi32"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepi8_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu16_epi32"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu16_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu32_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu32_pd"><in>__m128i</in><out>__m256d</out></function>
	<function name="_mm256_cvtepu64_pd"><in>__m256i</in><out>__m256d</out></function>
	<function name="_mm256_cvtepu64_ps"><in>__m256i</in><out>__m128</out></function>
	<function name="_mm256_cvtepu8_epi16"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu8_epi32"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtepu8_epi64"><in>__m128i</in><out>__m256i</out></function>
	<function name="_mm256_cvtpd_epi32"><in>__m256d</in><out>__m128i</out></function>
	<function name="_mm256_cvtpd_epi64"><in>__m256d</in><out>__m256i</out></function>
	<function name="_mm256_cvtpd_epu32"><in>__m256d</in><out>__m128i</out></function>
	<function name="_mm256_cvtpd_epu64"><in>__m256d</in><out>__m256i</out></function>
	<function name="_mm256_cvtpd_ps"><in>__m256d</in><out>__m128</out></function>
	<function name="_mm256_cvtph_ps"><in>__m128i</in><out>__m256</out></function>
	<function name="_mm256_cvtps_epi32"><in>__m256</in><out>__m256i</out></function>
	<function name="_mm256_cvtps_epi64"><in>__m128</in><out>__m256i</out></function>
	<function name="_mm256_cvtps_epu32"><in>__m256</in><out>__m256i</out></function>
	<function name="_mm256_cvtps_epu64"><in>__m128</in><out>__m256i</out></function>
	<function name="_mm256_cvtps_pd"><in>__m128</in><out>__m256d</out></function>
	<function name="_mm256_cvtps_ph"><in>__m256,int</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi16_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi32_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi32_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi64_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi64_epi32"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtsepi64_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvttpd_epi32"><in>__m256d</in><out>__m128i</out></function>
	<function name="_mm256_cvttpd_epi64"><in>__m256d</in><out>__m256i</out></function>
	<function name="_mm256_cvttpd_epu32"><in>__m256d</in><out>__m128i</out></function>
	<function name="_mm256_cvttpd_epu64"><in>__m256d</in><out>__m256i</out></function>
	<function name="_mm256_cvttps_epi32"><in>__m256</in><out>__m256i</out></function>
	<function name="_mm256_cvttps_epi64"><in>__m128</in><out>__m256i</out></function>
	<function name="_mm256_cvttps_epu32"><in>__m256</in><out>__m256i</out></function>
	<function name="_mm256_cvttps_epu64"><in>__m128</in><out>__m256i</out></function>
	<function name="_mm256_cvtusepi16_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtusepi32_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtusepi32_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtusepi64_epi16"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtusepi64_epi32"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_cvtusepi64_epi8"><in>__m256i</in><out>__m128i</out></function>
	<function name="_mm256_dbsad_epu8"><in>__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_div_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epu32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epu64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_div_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_div_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_dp_ps"><in>__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_erfcinv_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_erfcinv_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_erfc_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_erfc_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_erfinv_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_erfinv_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_erf_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_erf_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_exp10_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_exp10_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_exp2_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_exp2_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_expm1_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_expm1_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_exp_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_exp_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_extract_epi16"><in>__m256i,const int</in><out>__int16</out></function>
	<function name="_mm256_extract_epi32"><in>__m256i,const int</in><out>__int32</out></function>
	<function name="_mm256_extract_epi64"><in>__m256i,const int</in><out>__int64</out></function>
	<function name="_mm256_extract_epi8"><in>__m256i,const int</in><out>__int8</out></function>
	<function name="_mm256_extractf128_pd"><in>__m256d,const int</in><out>__m128d</out></function>
	<function name="_mm256_extractf128_ps"><in>__m256,const int</in><out>__m128</out></function>
	<function name="_mm256_extractf128_si256"><in>__m256i,const int</in><out>__m128i</out></function>
	<function name="_mm256_extractf32x4_ps"><in>__m256,int</in><out>__m128</out></function>
	<function name="_mm256_extractf64x2_pd"><in>__m256d,int</in><out>__m128d</out></function>
	<function name="_mm256_extracti128_si256"><in>__m256i,const int</in><out>__m128i</out></function>
	<function name="_mm256_extracti32x4_epi32"><in>__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_extracti64x2_epi64"><in>__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_fixupimm_pd"><in>__m256d,__m256d,__m256i,int</in><out>__m256d</out></function>
	<function name="_mm256_fixupimm_ps"><in>__m256,__m256,__m256i,int</in><out>__m256</out></function>
	<function name="_mm256_floor_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_floor_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_fmadd_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fmadd_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fmaddsub_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fmaddsub_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fmsubadd_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fmsubadd_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fmsub_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fmsub_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fnmadd_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fnmadd_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fnmsub_pd"><in>__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_fnmsub_ps"><in>__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_fpclass_pd_mask"><in>__m256d,int</in><out>__mmask8</out></function>
	<function name="_mm256_fpclass_ps_mask"><in>__m256,int</in><out>__mmask8</out></function>
	<function name="_mm256_getexp_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_getexp_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_getmant_pd"><in>__m256d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256d</out></function>
	<function name="_mm256_getmant_ps"><in>__m256,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256</out></function>
	<function name="_mm256_hadd_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hadd_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hadd_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_hadd_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_hadds_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hsub_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hsub_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hsub_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_hsub_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_hsubs_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_hypot_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_hypot_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_i32gather_epi32"><in>int const*,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_i32gather_epi64"><in>__int64 const*,__m128i,const int</in><out>__m256i</out></function>
	<function name="_mm256_i32gather_pd"><in>double const*,__m128i,const int</in><out>__m256d</out></function>
	<function name="_mm256_i32gather_ps"><in>float const*,__m256i,const int</in><out>__m256</out></function>
	<function name="_mm256_i32scatter_epi32"><in>void*,__m256i,__m256i,const int</in></function>
	<function name="_mm256_i32scatter_epi64"><in>void*,__m128i,__m256i,const int</in></function>
	<function name="_mm256_i32scatter_pd"><in>void*,__m128i,__m256d,const int</in></function>
	<function name="_mm256_i32scatter_ps"><in>void*,__m256i,__m256,const int</in></function>
	<function name="_mm256_i64gather_epi32"><in>int const*,__m256i,const int</in><out>__m128i</out></function>
	<function name="_mm256_i64gather_epi64"><in>__int64 const*,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_i64gather_pd"><in>double const*,__m256i,const int</in><out>__m256d</out></function>
	<function name="_mm256_i64gather_ps"><in>float const*,__m256i,const int</in><out>__m128</out></function>
	<function name="_mm256_i64scatter_epi32"><in>void*,__m256i,__m128i,const int</in></function>
	<function name="_mm256_i64scatter_epi64"><in>void*,__m256i,__m256i,const int</in></function>
	<function name="_mm256_i64scatter_pd"><in>void*,__m256i,__m256d,const int</in></function>
	<function name="_mm256_i64scatter_ps"><in>void*,__m256i,__m128,const int</in></function>
	<function name="_mm256_idiv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_idivrem_epi32"><in>__m256i *,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_insert_epi16"><in>__m256i,__int16,const int</in><out>__m256i</out></function>
	<function name="_mm256_insert_epi32"><in>__m256i,__int32,const int</in><out>__m256i</out></function>
	<function name="_mm256_insert_epi64"><in>__m256i,__int64,const int</in><out>__m256i</out></function>
	<function name="_mm256_insert_epi8"><in>__m256i,__int8,const int</in><out>__m256i</out></function>
	<function name="_mm256_insertf128_pd"><in>__m256d,__m128d,int</in><out>__m256d</out></function>
	<function name="_mm256_insertf128_ps"><in>__m256,__m128,int</in><out>__m256</out></function>
	<function name="_mm256_insertf128_si256"><in>__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_insertf32x4"><in>__m256,__m128,int</in><out>__m256</out></function>
	<function name="_mm256_insertf64x2"><in>__m256d,__m128d,int</in><out>__m256d</out></function>
	<function name="_mm256_inserti128_si256"><in>__m256i,__m128i,const int</in><out>__m256i</out></function>
	<function name="_mm256_inserti32x4"><in>__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_inserti64x2"><in>__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_invcbrt_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_invcbrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_invsqrt_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_invsqrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_irem_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_lddqu_si256"><in>__m256i const *</in><out>__m256i</out></function>
	<function name="_mm256_load_pd"><in>double const *</in><out>__m256d</out></function>
	<function name="_mm256_load_ps"><in>float const *</in><out>__m256</out></function>
	<function name="_mm256_load_si256"><in>__m256i const *</in><out>__m256i</out></function>
	<function name="_mm256_loadu2_m128d"><in>double const*,double const*</in><out>__m256d</out></function>
	<function name="_mm256_loadu2_m128i"><in>__m128i const*,__m128i const*</in><out>__m256i</out></function>
	<function name="_mm256_loadu2_m128"><in>float const*,float const*</in><out>__m256</out></function>
	<function name="_mm256_loadu_pd"><in>double const *</in><out>__m256d</out></function>
	<function name="_mm256_loadu_ps"><in>float const *</in><out>__m256</out></function>
	<function name="_mm256_loadu_si256"><in>__m256i const *</in><out>__m256i</out></function>
	<function name="_mm256_log10_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_log10_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_log1p_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_log1p_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_log2_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_log2_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_logb_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_logb_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_log_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_log_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_lzcnt_epi32"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_lzcnt_epi64"><in>__m256i</in><out>__m256i</out></function>
	<function name="_mm256_madd52hi_epu64"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_madd52lo_epu64"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_madd_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maddubs_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask2_permutex2var_epi16"><in>__m256i,__m256i,__mmask16,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask2_permutex2var_epi32"><in>__m256i,__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask2_permutex2var_epi64"><in>__m256i,__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask2_permutex2var_epi8"><in>__m256i,__m256i,__mmask32,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask2_permutex2var_pd"><in>__m256d,__m256i,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask2_permutex2var_ps"><in>__m256,__m256i,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask3_fmadd_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fmadd_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask3_fmaddsub_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fmaddsub_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask3_fmsubadd_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fmsubadd_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask3_fmsub_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fmsub_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask3_fnmadd_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fnmadd_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask3_fnmsub_pd"><in>__m256d,__m256d,__m256d,__mmask8</in><out>__m256d</out></function>
	<function name="_mm256_mask3_fnmsub_ps"><in>__m256,__m256,__m256,__mmask8</in><out>__m256</out></function>
	<function name="_mm256_mask_abs_epi16"><in>__m256i,__mmask16,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_abs_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_abs_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_abs_epi8"><in>__m256i,__mmask32,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_add_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_add_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_add_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_add_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_add_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_add_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_adds_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_adds_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_adds_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_adds_epu8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_alignr_epi32"><in>__m256i,__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_alignr_epi64"><in>__m256i,__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_alignr_epi8"><in>__m256i,__mmask32,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_and_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_and_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_andnot_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_andnot_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_andnot_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_andnot_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_and_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_and_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_avg_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_avg_epu8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_blend_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_blend_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_blend_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_blend_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_blend_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_blend_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_broadcastb_epi8"><in>__m256i,__mmask32,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcastd_epi32"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcast_f32x2"><in>__m256,__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_mask_broadcast_f32x4"><in>__m256,__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_mask_broadcast_f64x2"><in>__m256d,__mmask8,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_mask_broadcast_i32x2"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcast_i32x4"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcast_i64x2"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcastq_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_broadcastsd_pd"><in>__m256d,__mmask8,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_mask_broadcastss_ps"><in>__m256,__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_mask_broadcastw_epi16"><in>__m256i,__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cmp_epi16_mask"><in>__mmask16,__m256i,__m256i,const int</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmp_epi32_mask"><in>__mmask8,__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmp_epi64_mask"><in>__mmask8,__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmp_epi8_mask"><in>__mmask32,__m256i,__m256i,const int</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmp_epu16_mask"><in>__mmask16,__m256i,__m256i,const int</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmp_epu32_mask"><in>__mmask8,__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmp_epu64_mask"><in>__mmask8,__m256i,__m256i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmp_epu8_mask"><in>__mmask32,__m256i,__m256i,const int</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpeq_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpeq_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpeq_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpeq_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpeq_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpeq_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpeq_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpeq_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpge_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpge_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpge_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpge_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpge_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpge_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpge_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpge_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpgt_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpgt_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpgt_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpgt_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpgt_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpgt_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpgt_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpgt_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmple_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmple_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmple_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmple_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmple_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmple_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmple_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmple_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmplt_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmplt_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmplt_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmplt_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmplt_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmplt_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmplt_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmplt_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpneq_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpneq_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpneq_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpneq_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmpneq_epu16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_cmpneq_epu32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpneq_epu64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmpneq_epu8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_cmp_pd_mask"><in>__mmask8,__m256d,__m256d,const int</in><out>__mmask8</out></function>
	<function name="_mm256_mask_cmp_ps_mask"><in>__mmask8,__m256,__m256,const int</in><out>__mmask8</out></function>
	<function name="_mm256_mask_compress_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_compress_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_compress_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_compress_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_compressstoreu_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_compressstoreu_epi64"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_compressstoreu_pd"><in>void*,__mmask8,__m256d</in></function>
	<function name="_mm256_mask_compressstoreu_ps"><in>void*,__mmask8,__m256</in></function>
	<function name="_mm256_mask_conflict_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_conflict_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi16_epi32"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi16_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi16_epi8"><in>__m128i,__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi16_storeu_epi8"><in>void*,__mmask16,__m256i</in></function>
	<function name="_mm256_mask_cvtepi32_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi32_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi32_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi32_pd"><in>__m256d,__mmask8,__m128i</in><out>__m256d</out></function>
	<function name="_mm256_mask_cvtepi32_ps"><in>__m256,__mmask8,__m256i</in><out>__m256</out></function>
	<function name="_mm256_mask_cvtepi32_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtepi32_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtepi64_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi64_epi32"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi64_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtepi64_pd"><in>__m256d,__mmask8,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_mask_cvtepi64_ps"><in>__m128,__mmask8,__m256i</in><out>__m128</out></function>
	<function name="_mm256_mask_cvtepi64_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtepi64_storeu_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtepi64_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtepi8_epi16"><in>__m256i,__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi8_epi32"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepi8_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu16_epi32"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu16_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu32_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu32_pd"><in>__m256d,__mmask8,__m128i</in><out>__m256d</out></function>
	<function name="_mm256_mask_cvtepu64_pd"><in>__m256d,__mmask8,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_mask_cvtepu64_ps"><in>__m128,__mmask8,__m256i</in><out>__m128</out></function>
	<function name="_mm256_mask_cvtepu8_epi16"><in>__m256i,__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu8_epi32"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtepu8_epi64"><in>__m256i,__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtpd_epi32"><in>__m128i,__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtpd_epi64"><in>__m256i,__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtpd_epu32"><in>__m128i,__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtpd_epu64"><in>__m256i,__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtpd_ps"><in>__m128,__mmask8,__m256d</in><out>__m128</out></function>
	<function name="_mm256_mask_cvtph_ps"><in>__m256,__mmask8,__m128i</in><out>__m256</out></function>
	<function name="_mm256_mask_cvtps_epi32"><in>__m256i,__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtps_epi64"><in>__m256i,__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtps_epu32"><in>__m256i,__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtps_epu64"><in>__m256i,__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtps_ph"><in>__m128i,__mmask8,__m256,int</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvt_roundps_ph"><in>__m128i,__mmask8,__m256,int</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi16_epi8"><in>__m128i,__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi16_storeu_epi8"><in>void*,__mmask16,__m256i</in></function>
	<function name="_mm256_mask_cvtsepi32_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi32_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi32_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtsepi32_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtsepi64_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi64_epi32"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi64_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtsepi64_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtsepi64_storeu_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtsepi64_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvttpd_epi32"><in>__m128i,__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvttpd_epi64"><in>__m256i,__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvttpd_epu32"><in>__m128i,__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvttpd_epu64"><in>__m256i,__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvttps_epi32"><in>__m256i,__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvttps_epi64"><in>__m256i,__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvttps_epu32"><in>__m256i,__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvttps_epu64"><in>__m256i,__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_mask_cvtusepi16_epi8"><in>__m128i,__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi16_storeu_epi8"><in>void*,__mmask16,__m256i</in></function>
	<function name="_mm256_mask_cvtusepi32_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi32_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi32_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtusepi32_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtusepi64_epi16"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi64_epi32"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi64_epi8"><in>__m128i,__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_mask_cvtusepi64_storeu_epi16"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtusepi64_storeu_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_cvtusepi64_storeu_epi8"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_dbsad_epu8"><in>__m256i,__mmask16,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_div_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_div_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_expand_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_expand_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_expandloadu_epi32"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_expandloadu_epi64"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_expandloadu_pd"><in>__m256d,__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_mask_expandloadu_ps"><in>__m256,__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_mask_expand_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_expand_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_extractf32x4_ps"><in>__m128,__mmask8,__m256,int</in><out>__m128</out></function>
	<function name="_mm256_mask_extractf64x2_pd"><in>__m128d,__mmask8,__m256d,int</in><out>__m128d</out></function>
	<function name="_mm256_mask_extracti32x4_epi32"><in>__m128i,__mmask8,__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_mask_extracti64x2_epi64"><in>__m128i,__mmask8,__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_mask_fixupimm_pd"><in>__m256d,__mmask8,__m256d,__m256i,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_fixupimm_ps"><in>__m256,__mmask8,__m256,__m256i,int</in><out>__m256</out></function>
	<function name="_mm256_mask_fmadd_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fmadd_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fmaddsub_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fmaddsub_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fmsubadd_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fmsubadd_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fmsub_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fmsub_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fnmadd_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fnmadd_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fnmsub_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_fnmsub_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_fpclass_pd_mask"><in>__mmask8,__m256d,int</in><out>__mmask8</out></function>
	<function name="_mm256_mask_fpclass_ps_mask"><in>__mmask8,__m256,int</in><out>__mmask8</out></function>
	<function name="_mm256_mask_getexp_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_getexp_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_getmant_pd"><in>__m256d,__mmask8,__m256d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256d</out></function>
	<function name="_mm256_mask_getmant_ps"><in>__m256,__mmask8,__m256,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256</out></function>
	<function name="_mm256_mask_i32gather_epi32"><in>__m256i,int const*,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_i32gather_epi64"><in>__m256i,__int64 const*,__m128i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_i32gather_pd"><in>__m256d,double const*,__m128i,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_mask_i32gather_ps"><in>__m256,float const*,__m256i,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_mask_i32scatter_epi32"><in>void*,__mmask8,__m256i,__m256i,const int</in></function>
	<function name="_mm256_mask_i32scatter_epi64"><in>void*,__mmask8,__m128i,__m256i,const int</in></function>
	<function name="_mm256_mask_i32scatter_pd"><in>void*,__mmask8,__m128i,__m256d,const int</in></function>
	<function name="_mm256_mask_i32scatter_ps"><in>void*,__mmask8,__m256i,__m256,const int</in></function>
	<function name="_mm256_mask_i64gather_epi32"><in>__m128i,int const*,__m256i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm256_mask_i64gather_epi64"><in>__m256i,__int64 const*,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_i64gather_pd"><in>__m256d,double const*,__m256i,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_mask_i64gather_ps"><in>__m128,float const*,__m256i,__m128,const int</in><out>__m128</out></function>
	<function name="_mm256_mask_i64scatter_epi32"><in>void*,__mmask8,__m256i,__m128i,const int</in></function>
	<function name="_mm256_mask_i64scatter_epi64"><in>void*,__mmask8,__m256i,__m256i,const int</in></function>
	<function name="_mm256_mask_i64scatter_pd"><in>void*,__mmask8,__m256i,__m256d,const int</in></function>
	<function name="_mm256_mask_i64scatter_ps"><in>void*,__mmask8,__m256i,__m128,const int</in></function>
	<function name="_mm256_mask_insertf32x4"><in>__m256,__mmask8,__m256,__m128,int</in><out>__m256</out></function>
	<function name="_mm256_mask_insertf64x2"><in>__m256d,__mmask8,__m256d,__m128d,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_inserti32x4"><in>__m256i,__mmask8,__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_inserti64x2"><in>__m256i,__mmask8,__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskload_epi32"><in>int const*,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_load_epi32"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskload_epi64"><in>__int64 const*,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_load_epi64"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskload_pd"><in>double const *,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_mask_load_pd"><in>__m256d,__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_maskload_ps"><in>float const *,__m256i</in><out>__m256</out></function>
	<function name="_mm256_mask_load_ps"><in>__m256,__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_mask_loadu_epi16"><in>__m256i,__mmask16,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_loadu_epi32"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_loadu_epi64"><in>__m256i,__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_loadu_epi8"><in>__m256i,__mmask32,void const*</in><out>__m256i</out></function>
	<function name="_mm256_mask_loadu_pd"><in>__m256d,__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_mask_loadu_ps"><in>__m256,__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_mask_lzcnt_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_lzcnt_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_madd52hi_epu64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_madd52lo_epu64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_madd_epi16"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_maddubs_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epu32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epu64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_epu8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_max_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_max_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_min_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epu32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epu64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_epu8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_min_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_min_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_movedup_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_movehdup_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_moveldup_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_mov_epi16"><in>__m256i,__mmask16,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mov_epi32"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mov_epi64"><in>__m256i,__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mov_epi8"><in>__m256i,__mmask32,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mov_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_mov_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_mul_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mul_epu32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mulhi_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mulhi_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mulhrs_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mullo_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mullo_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mullo_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_mul_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_mul_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_multishift_epi64_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_or_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_or_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_or_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_or_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_packs_epi16"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_packs_epi32"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_packus_epi16"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_packus_epi32"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permute_pd"><in>__m256d,__mmask8,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_mask_permute_ps"><in>__m256,__mmask8,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_mask_permutevar_pd"><in>__m256d,__mmask8,__m256d,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_mask_permutevar_ps"><in>__m256,__mmask8,__m256,__m256i</in><out>__m256</out></function>
	<function name="_mm256_mask_permutex2var_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutex2var_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutex2var_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutex2var_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutex2var_pd"><in>__m256d,__mmask8,__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_permutex2var_ps"><in>__m256,__mmask8,__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_permutex_epi64"><in>__m256i,__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutex_pd"><in>__m256d,__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_permutexvar_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutexvar_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutexvar_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutexvar_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_permutexvar_pd"><in>__m256d,__mmask8,__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_permutexvar_ps"><in>__m256,__mmask8,__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_range_pd"><in>__m256d,__mmask8,__m256d,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_range_ps"><in>__m256,__mmask8,__m256,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_mask_rcp14_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_rcp14_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_reduce_pd"><in>__m256d,__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_reduce_ps"><in>__m256,__mmask8,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_mask_rol_epi32"><in>__m256i,__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_rol_epi64"><in>__m256i,__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_rolv_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_rolv_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_ror_epi32"><in>__m256i,__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_ror_epi64"><in>__m256i,__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_rorv_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_rorv_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_roundscale_pd"><in>__m256d,__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_mask_roundscale_ps"><in>__m256,__mmask8,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_mask_rsqrt14_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_rsqrt14_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_scalef_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_scalef_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_set1_epi16"><in>__m256i,__mmask16,short</in><out>__m256i</out></function>
	<function name="_mm256_mask_set1_epi32"><in>__m256i,__mmask8,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_set1_epi64"><in>__m256i,__mmask8,__int64</in><out>__m256i</out></function>
	<function name="_mm256_mask_set1_epi8"><in>__m256i,__mmask32,char</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_epi32"><in>__m256i,__mmask8,__m256i,_MM_PERM_ENUM</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_f32x4"><in>__m256,__mmask8,__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_mask_shuffle_f64x2"><in>__m256d,__mmask8,__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_mask_shufflehi_epi16"><in>__m256i,__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_i32x4"><in>__m256i,__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_i64x2"><in>__m256i,__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mask_shufflelo_epi16"><in>__m256i,__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_shuffle_pd"><in>__m256d,__mmask8,__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_mask_shuffle_ps"><in>__m256,__mmask8,__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_mask_sll_epi16"><in>__m256i,__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sll_epi32"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sll_epi64"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_slli_epi16"><in>__m256i,__mmask16,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_slli_epi32"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_slli_epi64"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_sllv_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sllv_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sllv_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sqrt_pd"><in>__m256d,__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_sqrt_ps"><in>__m256,__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_sra_epi16"><in>__m256i,__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sra_epi32"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sra_epi64"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srai_epi16"><in>__m256i,__mmask16,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srai_epi32"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srai_epi64"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srav_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srav_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srav_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srl_epi16"><in>__m256i,__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srl_epi32"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srl_epi64"><in>__m256i,__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srli_epi16"><in>__m256i,__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srli_epi32"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srli_epi64"><in>__m256i,__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_mask_srlv_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srlv_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_srlv_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskstore_epi32"><in>int*,__m256i,__m256i</in></function>
	<function name="_mm256_mask_store_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_maskstore_epi64"><in>__int64*,__m256i,__m256i</in></function>
	<function name="_mm256_mask_store_epi64"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_maskstore_pd"><in>double *,__m256i,__m256d</in></function>
	<function name="_mm256_mask_store_pd"><in>void*,__mmask8,__m256d</in></function>
	<function name="_mm256_maskstore_ps"><in>float *,__m256i,__m256</in></function>
	<function name="_mm256_mask_store_ps"><in>void*,__mmask8,__m256</in></function>
	<function name="_mm256_mask_storeu_epi16"><in>void*,__mmask16,__m256i</in></function>
	<function name="_mm256_mask_storeu_epi32"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_storeu_epi64"><in>void*,__mmask8,__m256i</in></function>
	<function name="_mm256_mask_storeu_epi8"><in>void*,__mmask32,__m256i</in></function>
	<function name="_mm256_mask_storeu_pd"><in>void*,__mmask8,__m256d</in></function>
	<function name="_mm256_mask_storeu_ps"><in>void*,__mmask8,__m256</in></function>
	<function name="_mm256_mask_sub_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sub_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sub_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sub_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_sub_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_sub_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_subs_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_subs_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_subs_epu16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_subs_epu8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_ternarylogic_epi32"><in>__m256i,__mmask8,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_ternarylogic_epi64"><in>__m256i,__mmask8,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_mask_test_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_test_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_test_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_test_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_testn_epi16_mask"><in>__mmask16,__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_mask_testn_epi32_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_testn_epi64_mask"><in>__mmask8,__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_mask_testn_epi8_mask"><in>__mmask32,__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_mask_unpackhi_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpackhi_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpackhi_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpackhi_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpackhi_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_unpackhi_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_unpacklo_epi16"><in>__m256i,__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpacklo_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpacklo_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpacklo_epi8"><in>__m256i,__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_unpacklo_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_unpacklo_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mask_xor_epi32"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_xor_epi64"><in>__m256i,__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mask_xor_pd"><in>__m256d,__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mask_xor_ps"><in>__m256,__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_abs_epi16"><in>__mmask16,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_abs_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_abs_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_abs_epi8"><in>__mmask32,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_add_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_add_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_add_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_add_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_add_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_add_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_adds_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_adds_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_adds_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_adds_epu8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_alignr_epi32"><in>__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_alignr_epi64"><in>__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_alignr_epi8"><in>__mmask32,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_and_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_and_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_andnot_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_andnot_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_andnot_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_andnot_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_and_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_and_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_avg_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_avg_epu8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcastb_epi8"><in>__mmask32,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcastd_epi32"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcast_f32x2"><in>__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_maskz_broadcast_f32x4"><in>__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_maskz_broadcast_f64x2"><in>__mmask8,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_broadcast_i32x2"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcast_i32x4"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcast_i64x2"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcastq_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_broadcastsd_pd"><in>__mmask8,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_broadcastss_ps"><in>__mmask8,__m128</in><out>__m256</out></function>
	<function name="_mm256_maskz_broadcastw_epi16"><in>__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_compress_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_compress_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_compress_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_compress_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_conflict_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_conflict_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi16_epi32"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi16_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi16_epi8"><in>__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi32_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi32_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi32_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi32_pd"><in>__mmask8,__m128i</in><out>__m256d</out></function>
	<function name="_mm256_maskz_cvtepi32_ps"><in>__mmask8,__m256i</in><out>__m256</out></function>
	<function name="_mm256_maskz_cvtepi64_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi64_epi32"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi64_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtepi64_pd"><in>__mmask8,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_maskz_cvtepi64_ps"><in>__mmask8,__m256i</in><out>__m128</out></function>
	<function name="_mm256_maskz_cvtepi8_epi16"><in>__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi8_epi32"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepi8_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu16_epi32"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu16_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu32_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu32_pd"><in>__mmask8,__m128i</in><out>__m256d</out></function>
	<function name="_mm256_maskz_cvtepu64_pd"><in>__mmask8,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_maskz_cvtepu64_ps"><in>__mmask8,__m256i</in><out>__m128</out></function>
	<function name="_mm256_maskz_cvtepu8_epi16"><in>__mmask16,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu8_epi32"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtepu8_epi64"><in>__mmask8,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtpd_epi32"><in>__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtpd_epi64"><in>__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtpd_epu32"><in>__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtpd_epu64"><in>__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtpd_ps"><in>__mmask8,__m256d</in><out>__m128</out></function>
	<function name="_mm256_maskz_cvtph_ps"><in>__mmask8,__m128i</in><out>__m256</out></function>
	<function name="_mm256_maskz_cvtps_epi32"><in>__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtps_epi64"><in>__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtps_epu32"><in>__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtps_epu64"><in>__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtps_ph"><in>__mmask8,__m256,int</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvt_roundps_ph"><in>__mmask8,__m256,int</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi16_epi8"><in>__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi32_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi32_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi64_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi64_epi32"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtsepi64_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvttpd_epi32"><in>__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvttpd_epi64"><in>__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvttpd_epu32"><in>__mmask8,__m256d</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvttpd_epu64"><in>__mmask8,__m256d</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvttps_epi32"><in>__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvttps_epi64"><in>__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvttps_epu32"><in>__mmask8,__m256</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvttps_epu64"><in>__mmask8,__m128</in><out>__m256i</out></function>
	<function name="_mm256_maskz_cvtusepi16_epi8"><in>__mmask16,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtusepi32_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtusepi32_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtusepi64_epi16"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtusepi64_epi32"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_cvtusepi64_epi8"><in>__mmask8,__m256i</in><out>__m128i</out></function>
	<function name="_mm256_maskz_dbsad_epu8"><in>__mmask16,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_div_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_div_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_expand_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_expand_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_expandloadu_epi32"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_expandloadu_epi64"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_expandloadu_pd"><in>__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_maskz_expandloadu_ps"><in>__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_maskz_expand_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_expand_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_extractf32x4_ps"><in>__mmask8,__m256,int</in><out>__m128</out></function>
	<function name="_mm256_maskz_extractf64x2_pd"><in>__mmask8,__m256d,int</in><out>__m128d</out></function>
	<function name="_mm256_maskz_extracti32x4_epi32"><in>__mmask8,__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_maskz_extracti64x2_epi64"><in>__mmask8,__m256i,int</in><out>__m128i</out></function>
	<function name="_mm256_maskz_fixupimm_pd"><in>__mmask8,__m256d,__m256d,__m256i,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fixupimm_ps"><in>__mmask8,__m256,__m256,__m256i,int</in><out>__m256</out></function>
	<function name="_mm256_maskz_fmadd_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fmadd_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_fmaddsub_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fmaddsub_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_fmsubadd_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fmsubadd_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_fmsub_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fmsub_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_fnmadd_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fnmadd_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_fnmsub_pd"><in>__mmask8,__m256d,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_fnmsub_ps"><in>__mmask8,__m256,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_getexp_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_getexp_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_getmant_pd"><in>__mmask8,__m256d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256d</out></function>
	<function name="_mm256_maskz_getmant_ps"><in>__mmask8,__m256,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m256</out></function>
	<function name="_mm256_maskz_insertf32x4"><in>__mmask8,__m256,__m128,int</in><out>__m256</out></function>
	<function name="_mm256_maskz_insertf64x2"><in>__mmask8,__m256d,__m128d,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_inserti32x4"><in>__mmask8,__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_inserti64x2"><in>__mmask8,__m256i,__m128i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_load_epi32"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_load_epi64"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_load_pd"><in>__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_maskz_load_ps"><in>__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_maskz_loadu_epi16"><in>__mmask16,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_loadu_epi32"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_loadu_epi64"><in>__mmask8,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_loadu_epi8"><in>__mmask32,void const*</in><out>__m256i</out></function>
	<function name="_mm256_maskz_loadu_pd"><in>__mmask8,void const*</in><out>__m256d</out></function>
	<function name="_mm256_maskz_loadu_ps"><in>__mmask8,void const*</in><out>__m256</out></function>
	<function name="_mm256_maskz_lzcnt_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_lzcnt_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_madd52hi_epu64"><in>__mmask8,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_madd52lo_epu64"><in>__mmask8,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_madd_epi16"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_maddubs_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epu32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epu64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_epu8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_max_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_max_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_min_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epu32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epu64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_epu8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_min_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_min_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_movedup_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_movehdup_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_moveldup_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_mov_epi16"><in>__mmask16,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mov_epi32"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mov_epi64"><in>__mmask8,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mov_epi8"><in>__mmask32,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mov_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_mov_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_mul_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mul_epu32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mulhi_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mulhi_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mulhrs_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mullo_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mullo_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mullo_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_mul_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_mul_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_multishift_epi64_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_or_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_or_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_or_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_or_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_packs_epi16"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_packs_epi32"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_packus_epi16"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_packus_epi32"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permute_pd"><in>__mmask8,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_permute_ps"><in>__mmask8,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_maskz_permutevar_pd"><in>__mmask8,__m256d,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_maskz_permutevar_ps"><in>__mmask8,__m256,__m256i</in><out>__m256</out></function>
	<function name="_mm256_maskz_permutex2var_epi16"><in>__mmask16,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutex2var_epi32"><in>__mmask8,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutex2var_epi64"><in>__mmask8,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutex2var_epi8"><in>__mmask32,__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutex2var_pd"><in>__mmask8,__m256d,__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_permutex2var_ps"><in>__mmask8,__m256,__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_permutex_epi64"><in>__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutex_pd"><in>__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_permutexvar_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutexvar_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutexvar_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutexvar_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_permutexvar_pd"><in>__mmask8,__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_permutexvar_ps"><in>__mmask8,__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_range_pd"><in>__mmask8,__m256d,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_range_ps"><in>__mmask8,__m256,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_maskz_rcp14_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_rcp14_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_reduce_pd"><in>__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_reduce_ps"><in>__mmask8,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_maskz_rol_epi32"><in>__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_rol_epi64"><in>__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_rolv_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_rolv_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_ror_epi32"><in>__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_ror_epi64"><in>__mmask8,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_rorv_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_rorv_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_roundscale_pd"><in>__mmask8,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_roundscale_ps"><in>__mmask8,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_maskz_rsqrt14_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_rsqrt14_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_scalef_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_scalef_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_set1_epi16"><in>__mmask16,short</in><out>__m256i</out></function>
	<function name="_mm256_maskz_set1_epi32"><in>__mmask8,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_set1_epi64"><in>__mmask8,__int64</in><out>__m256i</out></function>
	<function name="_mm256_maskz_set1_epi8"><in>__mmask32,char</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_epi32"><in>__mmask8,__m256i,_MM_PERM_ENUM</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_f32x4"><in>__mmask8,__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_maskz_shuffle_f64x2"><in>__mmask8,__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_shufflehi_epi16"><in>__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_i32x4"><in>__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_i64x2"><in>__mmask8,__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shufflelo_epi16"><in>__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_shuffle_pd"><in>__mmask8,__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_maskz_shuffle_ps"><in>__mmask8,__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_maskz_sll_epi16"><in>__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sll_epi32"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sll_epi64"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_slli_epi16"><in>__mmask16,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_slli_epi32"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_slli_epi64"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sllv_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sllv_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sllv_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sqrt_pd"><in>__mmask8,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_sqrt_ps"><in>__mmask8,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_sra_epi16"><in>__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sra_epi32"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sra_epi64"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srai_epi16"><in>__mmask16,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srai_epi32"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srai_epi64"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srav_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srav_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srav_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srl_epi16"><in>__mmask16,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srl_epi32"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srl_epi64"><in>__mmask8,__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srli_epi16"><in>__mmask16,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srli_epi32"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srli_epi64"><in>__mmask8,__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srlv_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srlv_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_srlv_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sub_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sub_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sub_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sub_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_sub_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_sub_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_subs_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_subs_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_subs_epu16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_subs_epu8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_ternarylogic_epi32"><in>__mmask8,__m256i,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_ternarylogic_epi64"><in>__mmask8,__m256i,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpackhi_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpackhi_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpackhi_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpackhi_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpackhi_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_unpackhi_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_unpacklo_epi16"><in>__mmask16,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpacklo_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpacklo_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpacklo_epi8"><in>__mmask32,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_unpacklo_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_unpacklo_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_maskz_xor_epi32"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_xor_epi64"><in>__mmask8,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_maskz_xor_pd"><in>__mmask8,__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_maskz_xor_ps"><in>__mmask8,__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_max_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epu32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epu64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_max_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_max_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_min_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epu32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epu64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_min_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_min_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_mmask_i32gather_epi32"><in>__m256i,__mmask8,__m256i,void const*,const int</in><out>__m256i</out></function>
	<function name="_mm256_mmask_i32gather_epi64"><in>__m256i,__mmask8,__m128i,void const*,const int</in><out>__m256i</out></function>
	<function name="_mm256_mmask_i32gather_pd"><in>__m256d,__mmask8,__m128i,void const*,const int</in><out>__m256d</out></function>
	<function name="_mm256_mmask_i32gather_ps"><in>__m256,__mmask8,__m256i,void const*,const int</in><out>__m256</out></function>
	<function name="_mm256_mmask_i64gather_epi32"><in>__m128i,__mmask8,__m256i,void const*,const int</in><out>__m128i</out></function>
	<function name="_mm256_mmask_i64gather_epi64"><in>__m256i,__mmask8,__m256i,void const*,const int</in><out>__m256i</out></function>
	<function name="_mm256_mmask_i64gather_pd"><in>__m256d,__mmask8,__m256i,void const*,const int</in><out>__m256d</out></function>
	<function name="_mm256_mmask_i64gather_ps"><in>__m128,__mmask8,__m256i,void const*,const int</in><out>__m128</out></function>
	<function name="_mm256_movedup_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_movehdup_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_moveldup_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_movemask_epi8"><in>__m256i</in><out>int</out></function>
	<function name="_mm256_movemask_pd"><in>__m256d</in><out>int</out></function>
	<function name="_mm256_movemask_ps"><in>__m256</in><out>int</out></function>
	<function name="_mm256_movepi16_mask"><in>__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_movepi32_mask"><in>__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_movepi64_mask"><in>__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_movepi8_mask"><in>__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_movm_epi16"><in>__mmask16</in><out>__m256i</out></function>
	<function name="_mm256_movm_epi32"><in>__mmask8</in><out>__m256i</out></function>
	<function name="_mm256_movm_epi64"><in>__mmask8</in><out>__m256i</out></function>
	<function name="_mm256_movm_epi8"><in>__mmask32</in><out>__m256i</out></function>
	<function name="_mm256_mpsadbw_epu8"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_mul_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mul_epu32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mulhi_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mulhi_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mulhrs_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mullo_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mullo_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mullo_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_mul_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_mul_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_multishift_epi64_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_or_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_or_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_or_si256"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_packs_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_packs_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_packus_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_packus_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permute2f128_pd"><in>__m256d,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_permute2f128_ps"><in>__m256,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_permute2f128_si256"><in>__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_permute2x128_si256"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_permute4x64_epi64"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_permute4x64_pd"><in>__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_permute_pd"><in>__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_permute_ps"><in>__m256,int</in><out>__m256</out></function>
	<function name="_mm256_permutevar8x32_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutevar8x32_ps"><in>__m256,__m256i</in><out>__m256</out></function>
	<function name="_mm256_permutevar_pd"><in>__m256d,__m256i</in><out>__m256d</out></function>
	<function name="_mm256_permutevar_ps"><in>__m256,__m256i</in><out>__m256</out></function>
	<function name="_mm256_permutex2var_epi16"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutex2var_epi32"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutex2var_epi64"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutex2var_epi8"><in>__m256i,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutex2var_pd"><in>__m256d,__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_permutex2var_ps"><in>__m256,__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_permutex_epi64"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_permutex_pd"><in>__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_permutexvar_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutexvar_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutexvar_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutexvar_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_permutexvar_pd"><in>__m256i,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_permutexvar_ps"><in>__m256i,__m256</in><out>__m256</out></function>
	<function name="_mm256_pow_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_pow_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_range_pd"><in>__m256d,__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_range_ps"><in>__m256,__m256,int</in><out>__m256</out></function>
	<function name="_mm256_rcp14_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_rcp14_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_rcp_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_reduce_pd"><in>__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_reduce_ps"><in>__m256,int</in><out>__m256</out></function>
	<function name="_mm256_rem_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epu32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epu64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rem_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rol_epi32"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_rol_epi64"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_rolv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rolv_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_ror_epi32"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_ror_epi64"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_rorv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_rorv_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_round_pd"><in>__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_round_ps"><in>__m256,int</in><out>__m256</out></function>
	<function name="_mm256_roundscale_pd"><in>__m256d,int</in><out>__m256d</out></function>
	<function name="_mm256_roundscale_ps"><in>__m256,int</in><out>__m256</out></function>
	<function name="_mm256_rsqrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_sad_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_scalef_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_scalef_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_set1_epi16"><in>short</in><out>__m256i</out></function>
	<function name="_mm256_set1_epi32"><in>int</in><out>__m256i</out></function>
	<function name="_mm256_set1_epi64x"><in>long long</in><out>__m256i</out></function>
	<function name="_mm256_set1_epi8"><in>char</in><out>__m256i</out></function>
	<function name="_mm256_set1_pd"><in>double</in><out>__m256d</out></function>
	<function name="_mm256_set1_ps"><in>float</in><out>__m256</out></function>
	<function name="_mm256_set_epi16"><in>short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short</in><out>__m256i</out></function>
	<function name="_mm256_set_epi32"><in>int,int,int,int,int,int,int,int</in><out>__m256i</out></function>
	<function name="_mm256_set_epi64x"><in>__int64,__int64,__int64,__int64</in><out>__m256i</out></function>
	<function name="_mm256_set_epi8"><in>char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char</in><out>__m256i</out></function>
	<function name="_mm256_set_m128d"><in>__m128d,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_set_m128i"><in>__m128i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_set_m128"><in>__m128,__m128</in><out>__m256</out></function>
	<function name="_mm256_set_pd"><in>double,double,double,double</in><out>__m256d</out></function>
	<function name="_mm256_set_ps"><in>float,float,float,float,float,float,float,float</in><out>__m256</out></function>
	<function name="_mm256_setr_epi16"><in>short,short,short,short,short,short,short,short,short,short,short,short,short,short,short,short</in><out>__m256i</out></function>
	<function name="_mm256_setr_epi32"><in>int,int,int,int,int,int,int,int</in><out>__m256i</out></function>
	<function name="_mm256_setr_epi64x"><in>__int64,__int64,__int64,__int64</in><out>__m256i</out></function>
	<function name="_mm256_setr_epi8"><in>char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char</in><out>__m256i</out></function>
	<function name="_mm256_setr_m128d"><in>__m128d,__m128d</in><out>__m256d</out></function>
	<function name="_mm256_setr_m128i"><in>__m128i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_setr_m128"><in>__m128,__m128</in><out>__m256</out></function>
	<function name="_mm256_setr_pd"><in>double,double,double,double</in><out>__m256d</out></function>
	<function name="_mm256_setr_ps"><in>float,float,float,float,float,float,float,float</in><out>__m256</out></function>
	<function name="_mm256_setzero_pd"><out>__m256d</out></function>
	<function name="_mm256_setzero_ps"><out>__m256</out></function>
	<function name="_mm256_setzero_si256"><out>__m256i</out></function>
	<function name="_mm256_shuffle_epi32"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_shuffle_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_shuffle_f32x4"><in>__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_shuffle_f64x2"><in>__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_shufflehi_epi16"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_shuffle_i32x4"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_shuffle_i64x2"><in>__m256i,__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_shufflelo_epi16"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_shuffle_pd"><in>__m256d,__m256d,const int</in><out>__m256d</out></function>
	<function name="_mm256_shuffle_ps"><in>__m256,__m256,const int</in><out>__m256</out></function>
	<function name="_mm256_sign_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sign_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sign_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sincos_pd"><in>__m256d *,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sincos_ps"><in>__m256 *,__m256</in><out>__m256</out></function>
	<function name="_mm256_sind_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sind_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_sinh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sinh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_sin_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sin_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_sll_epi16"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_sll_epi32"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_sll_epi64"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_slli_epi16"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_slli_epi32"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_slli_epi64"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_slli_si256"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_sllv_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sllv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sllv_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sqrt_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sqrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_sra_epi16"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_sra_epi32"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_sra_epi64"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_srai_epi16"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_srai_epi32"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_srai_epi64"><in>__m256i,unsigned int</in><out>__m256i</out></function>
	<function name="_mm256_srav_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_srav_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_srav_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_srl_epi16"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_srl_epi32"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_srl_epi64"><in>__m256i,__m128i</in><out>__m256i</out></function>
	<function name="_mm256_srli_epi16"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_srli_epi32"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_srli_epi64"><in>__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_srli_si256"><in>__m256i,const int</in><out>__m256i</out></function>
	<function name="_mm256_srlv_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_srlv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_srlv_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_store_pd"><in>double *,__m256d</in></function>
	<function name="_mm256_store_ps"><in>float *,__m256</in></function>
	<function name="_mm256_store_si256"><in>__m256i *,__m256i</in></function>
	<function name="_mm256_storeu2_m128d"><in>double*,double*,__m256d</in></function>
	<function name="_mm256_storeu2_m128i"><in>__m128i*,__m128i*,__m256i</in></function>
	<function name="_mm256_storeu2_m128"><in>float*,float*,__m256</in></function>
	<function name="_mm256_storeu_pd"><in>double *,__m256d</in></function>
	<function name="_mm256_storeu_ps"><in>float *,__m256</in></function>
	<function name="_mm256_storeu_si256"><in>__m256i *,__m256i</in></function>
	<function name="_mm256_stream_load_si256"><in>__m256i const*</in><out>__m256i</out></function>
	<function name="_mm256_stream_pd"><in>double *,__m256d</in></function>
	<function name="_mm256_stream_ps"><in>float *,__m256</in></function>
	<function name="_mm256_stream_si256"><in>__m256i *,__m256i</in></function>
	<function name="_mm256_sub_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sub_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sub_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sub_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_sub_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_sub_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_subs_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_subs_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_subs_epu16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_subs_epu8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_svml_ceil_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_svml_ceil_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_svml_floor_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_svml_floor_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_svml_round_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_svml_round_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_svml_sqrt_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_svml_sqrt_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_tand_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_tand_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_tanh_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_tanh_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_tan_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_tan_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_ternarylogic_epi32"><in>__m256i,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_ternarylogic_epi64"><in>__m256i,__m256i,__m256i,int</in><out>__m256i</out></function>
	<function name="_mm256_testc_pd"><in>__m256d,__m256d</in><out>int</out></function>
	<function name="_mm256_testc_ps"><in>__m256,__m256</in><out>int</out></function>
	<function name="_mm256_testc_si256"><in>__m256i,__m256i</in><out>int</out></function>
	<function name="_mm256_test_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_test_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_test_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_test_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_testn_epi16_mask"><in>__m256i,__m256i</in><out>__mmask16</out></function>
	<function name="_mm256_testn_epi32_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_testn_epi64_mask"><in>__m256i,__m256i</in><out>__mmask8</out></function>
	<function name="_mm256_testn_epi8_mask"><in>__m256i,__m256i</in><out>__mmask32</out></function>
	<function name="_mm256_testnzc_pd"><in>__m256d,__m256d</in><out>int</out></function>
	<function name="_mm256_testnzc_ps"><in>__m256,__m256</in><out>int</out></function>
	<function name="_mm256_testnzc_si256"><in>__m256i,__m256i</in><out>int</out></function>
	<function name="_mm256_testz_pd"><in>__m256d,__m256d</in><out>int</out></function>
	<function name="_mm256_testz_ps"><in>__m256,__m256</in><out>int</out></function>
	<function name="_mm256_testz_si256"><in>__m256i,__m256i</in><out>int</out></function>
	<function name="_mm256_trunc_pd"><in>__m256d</in><out>__m256d</out></function>
	<function name="_mm256_trunc_ps"><in>__m256</in><out>__m256</out></function>
	<function name="_mm256_udiv_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_udivrem_epi32"><in>__m256i *,__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_undefined_pd"><out>__m256d</out></function>
	<function name="_mm256_undefined_ps"><out>__m256</out></function>
	<function name="_mm256_undefined_si256"><out>__m256i</out></function>
	<function name="_mm256_unpackhi_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpackhi_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpackhi_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpackhi_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpackhi_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_unpackhi_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_unpacklo_epi16"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpacklo_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpacklo_epi64"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpacklo_epi8"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_unpacklo_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_unpacklo_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_urem_epi32"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_xor_pd"><in>__m256d,__m256d</in><out>__m256d</out></function>
	<function name="_mm256_xor_ps"><in>__m256,__m256</in><out>__m256</out></function>
	<function name="_mm256_xor_si256"><in>__m256i,__m256i</in><out>__m256i</out></function>
	<function name="_mm256_zeroall"></function>
	<function name="_mm256_zeroupper"></function>

	<function name="_mm512_abs_epi16"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_abs_epi32"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_abs_epi64"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_abs_epi8"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_abs_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_abs_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_acosh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_acosh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_acos_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_acos_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_adc_epi32"><in>__m512i,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_add_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_add_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_add_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_add_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_addn_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_addn_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_addn_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_addn_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_add_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_add_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_add_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_add_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_adds_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_adds_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_adds_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_adds_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_addsetc_epi32"><in>__m512i,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_addsets_epi32"><in>__m512i,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_addsets_ps"><in>__m512,__m512,__mmask16 *</in><out>__m512</out></function>
	<function name="_mm512_addsets_round_ps"><in>__m512,__m512,__mmask16 *,int</in><out>__m512</out></function>
	<function name="_mm512_alignr_epi32"><in>__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_alignr_epi64"><in>__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_alignr_epi8"><in>__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_and_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_and_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_andnot_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_andnot_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_andnot_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_andnot_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_andnot_si512"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_and_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_and_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_and_si512"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_asinh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_asinh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_asin_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_asin_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_atan2_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_atan2_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_atanh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_atanh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_atan_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_atan_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_avg_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_avg_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_broadcastb_epi8"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcastd_epi32"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcast_f32x2"><in>__m128</in><out>__m512</out></function>
	<function name="_mm512_broadcast_f32x4"><in>__m128</in><out>__m512</out></function>
	<function name="_mm512_broadcast_f32x8"><in>__m256</in><out>__m512</out></function>
	<function name="_mm512_broadcast_f64x2"><in>__m128d</in><out>__m512d</out></function>
	<function name="_mm512_broadcast_f64x4"><in>__m256d</in><out>__m512d</out></function>
	<function name="_mm512_broadcast_i32x2"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcast_i32x4"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcast_i32x8"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_broadcast_i64x2"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcast_i64x4"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_broadcastmb_epi64"><in>__mmask8</in><out>__m512i</out></function>
	<function name="_mm512_broadcastmw_epi32"><in>__mmask16</in><out>__m512i</out></function>
	<function name="_mm512_broadcastq_epi64"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_broadcastsd_pd"><in>__m128d</in><out>__m512d</out></function>
	<function name="_mm512_broadcastss_ps"><in>__m128</in><out>__m512</out></function>
	<function name="_mm512_broadcastw_epi16"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_bslli_epi128"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_bsrli_epi128"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_castpd128_pd512"><in>__m128d</in><out>__m512d</out></function>
	<function name="_mm512_castpd256_pd512"><in>__m256d</in><out>__m512d</out></function>
	<function name="_mm512_castpd512_pd128"><in>__m512d</in><out>__m128d</out></function>
	<function name="_mm512_castpd512_pd256"><in>__m512d</in><out>__m256d</out></function>
	<function name="_mm512_castpd_ps"><in>__m512d</in><out>__m512</out></function>
	<function name="_mm512_castpd_si512"><in>__m512d</in><out>__m512i</out></function>
	<function name="_mm512_castps128_ps512"><in>__m128</in><out>__m512</out></function>
	<function name="_mm512_castps256_ps512"><in>__m256</in><out>__m512</out></function>
	<function name="_mm512_castps512_ps128"><in>__m512</in><out>__m128</out></function>
	<function name="_mm512_castps512_ps256"><in>__m512</in><out>__m256</out></function>
	<function name="_mm512_castps_pd"><in>__m512</in><out>__m512d</out></function>
	<function name="_mm512_castps_si512"><in>__m512</in><out>__m512i</out></function>
	<function name="_mm512_castsi128_si512"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_castsi256_si512"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_castsi512_pd"><in>__m512i</in><out>__m512d</out></function>
	<function name="_mm512_castsi512_ps"><in>__m512i</in><out>__m512</out></function>
	<function name="_mm512_castsi512_si128"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_castsi512_si256"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cbrt_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cbrt_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cdfnorminv_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cdfnorminv_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cdfnorm_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cdfnorm_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_ceil_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_ceil_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cmp_epi16_mask"><in>__m512i,__m512i,const int</in><out>__mmask32</out></function>
	<function name="_mm512_cmp_epi32_mask"><in>__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask16</out></function>
	<function name="_mm512_cmp_epi64_mask"><in>__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm512_cmp_epi8_mask"><in>__m512i,__m512i,const int</in><out>__mmask64</out></function>
	<function name="_mm512_cmp_epu16_mask"><in>__m512i,__m512i,const int</in><out>__mmask32</out></function>
	<function name="_mm512_cmp_epu32_mask"><in>__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask16</out></function>
	<function name="_mm512_cmp_epu64_mask"><in>__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm512_cmp_epu8_mask"><in>__m512i,__m512i,const int</in><out>__mmask64</out></function>
	<function name="_mm512_cmpeq_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpeq_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpeq_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpeq_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpeq_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpeq_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpeq_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpeq_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpeq_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpeq_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmpge_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpge_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpge_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpge_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpge_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpge_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpge_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpge_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpgt_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpgt_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpgt_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpgt_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpgt_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpgt_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpgt_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpgt_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmple_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmple_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmple_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmple_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmple_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmple_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmple_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmple_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmple_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmple_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmplt_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmplt_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmplt_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmplt_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmplt_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmplt_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmplt_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmplt_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmplt_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmplt_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmplt_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmpneq_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpneq_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpneq_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpneq_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpneq_epu16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_cmpneq_epu32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_cmpneq_epu64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_cmpneq_epu8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_cmpneq_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpneq_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmpnle_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpnle_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmpnlt_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpnlt_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmpord_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpord_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_cmp_pd_mask"><in>__m512d,__m512d,const int</in><out>__mmask8</out></function>
	<function name="_mm512_cmp_ps_mask"><in>__m512,__m512,const int</in><out>__mmask16</out></function>
	<function name="_mm512_cmp_round_pd_mask"><in>__m512d,__m512d,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm512_cmp_round_ps_mask"><in>__m512,__m512,const int,const int</in><out>__mmask16</out></function>
	<function name="_mm512_cmpunord_pd_mask"><in>__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_cmpunord_ps_mask"><in>__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_conflict_epi32"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_conflict_epi64"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_cosd_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cosd_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cosh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cosh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cos_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_cos_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_cvtepi16_epi32"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepi16_epi64"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepi16_epi8"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtepi32_epi16"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtepi32_epi64"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepi32_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtepi32lo_pd"><in>__m512i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepi32_pd"><in>__m256i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepi32_ps"><in>__m512i</in><out>__m512</out></function>
	<function name="_mm512_cvtepi64_epi16"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtepi64_epi32"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtepi64_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtepi64_pd"><in>__m512i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepi64_ps"><in>__m512i</in><out>__m256</out></function>
	<function name="_mm512_cvtepi8_epi16"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepi8_epi32"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepi8_epi64"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu16_epi32"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu16_epi64"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu32_epi64"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu32lo_pd"><in>__m512i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepu32_pd"><in>__m256i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepu32_ps"><in>__m512i</in><out>__m512</out></function>
	<function name="_mm512_cvtepu64_pd"><in>__m512i</in><out>__m512d</out></function>
	<function name="_mm512_cvtepu64_ps"><in>__m512i</in><out>__m256</out></function>
	<function name="_mm512_cvtepu8_epi16"><in>__m256i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu8_epi32"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtepu8_epi64"><in>__m128i</in><out>__m512i</out></function>
	<function name="_mm512_cvtfxpnt_round_adjustepi32_ps"><in>__m512i,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_cvtfxpnt_round_adjustepu32_ps"><in>__m512i,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_cvtfxpnt_round_adjustps_epi32"><in>__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_cvtfxpnt_round_adjustps_epu32"><in>__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_cvtfxpnt_roundpd_epi32lo"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtfxpnt_roundpd_epu32lo"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtpd_epi32"><in>__m512d</in><out>__m256i</out></function>
	<function name="_mm512_cvtpd_epi64"><in>__m512d</in><out>__m512i</out></function>
	<function name="_mm512_cvtpd_epu32"><in>__m512d</in><out>__m256i</out></function>
	<function name="_mm512_cvtpd_epu64"><in>__m512d</in><out>__m512i</out></function>
	<function name="_mm512_cvtpd_ps"><in>__m512d</in><out>__m256</out></function>
	<function name="_mm512_cvtpd_pslo"><in>__m512d</in><out>__m512</out></function>
	<function name="_mm512_cvtph_ps"><in>__m256i</in><out>__m512</out></function>
	<function name="_mm512_cvtps_epi32"><in>__m512</in><out>__m512i</out></function>
	<function name="_mm512_cvtps_epi64"><in>__m256</in><out>__m512i</out></function>
	<function name="_mm512_cvtps_epu32"><in>__m512</in><out>__m512i</out></function>
	<function name="_mm512_cvtps_epu64"><in>__m256</in><out>__m512i</out></function>
	<function name="_mm512_cvtpslo_pd"><in>__m512</in><out>__m512d</out></function>
	<function name="_mm512_cvtps_pd"><in>__m256</in><out>__m512d</out></function>
	<function name="_mm512_cvtps_ph"><in>__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_cvt_roundepi32_ps"><in>__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_cvt_roundepi64_pd"><in>__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_cvt_roundepi64_ps"><in>__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_cvt_roundepu32_ps"><in>__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_cvt_roundepu64_pd"><in>__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_cvt_roundepu64_ps"><in>__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_cvt_roundpd_epi32"><in>__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_cvt_roundpd_epi64"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundpd_epu32"><in>__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_cvt_roundpd_epu64"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundpd_ps"><in>__m512d,int</in><out>__m256</out></function>
	<function name="_mm512_cvt_roundpd_pslo"><in>__m512d,int</in><out>__m512</out></function>
	<function name="_mm512_cvt_roundph_ps"><in>__m256i,int</in><out>__m512</out></function>
	<function name="_mm512_cvt_roundps_epi32"><in>__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundps_epi64"><in>__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundps_epu32"><in>__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundps_epu64"><in>__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_cvt_roundps_pd"><in>__m256,int</in><out>__m512d</out></function>
	<function name="_mm512_cvt_roundps_ph"><in>__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_cvtsepi16_epi8"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtsepi32_epi16"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtsepi32_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtsepi64_epi16"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtsepi64_epi32"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtsepi64_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvttpd_epi32"><in>__m512d</in><out>__m256i</out></function>
	<function name="_mm512_cvttpd_epi64"><in>__m512d</in><out>__m512i</out></function>
	<function name="_mm512_cvttpd_epu32"><in>__m512d</in><out>__m256i</out></function>
	<function name="_mm512_cvttpd_epu64"><in>__m512d</in><out>__m512i</out></function>
	<function name="_mm512_cvttps_epi32"><in>__m512</in><out>__m512i</out></function>
	<function name="_mm512_cvttps_epi64"><in>__m256</in><out>__m512i</out></function>
	<function name="_mm512_cvttps_epu32"><in>__m512</in><out>__m512i</out></function>
	<function name="_mm512_cvttps_epu64"><in>__m256</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundpd_epi32"><in>__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_cvtt_roundpd_epi64"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundpd_epu32"><in>__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_cvtt_roundpd_epu64"><in>__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundps_epi32"><in>__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundps_epi64"><in>__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundps_epu32"><in>__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtt_roundps_epu64"><in>__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_cvtusepi16_epi8"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtusepi32_epi16"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtusepi32_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtusepi64_epi16"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_cvtusepi64_epi32"><in>__m512i</in><out>__m256i</out></function>
	<function name="_mm512_cvtusepi64_epi8"><in>__m512i</in><out>__m128i</out></function>
	<function name="_mm512_dbsad_epu8"><in>__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_div_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epu64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_div_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_div_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_div_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_div_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_erfcinv_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_erfcinv_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_erfc_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_erfc_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_erfinv_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_erfinv_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_erf_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_erf_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_exp10_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_exp10_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_exp223_ps"><in>__m512i</in><out>__m512</out></function>
	<function name="_mm512_exp2a23_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_exp2a23_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_exp2a23_round_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_exp2a23_round_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_exp2_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_exp2_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_expm1_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_expm1_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_exp_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_exp_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_extload_epi32"><in>void const *,_MM_UPCONV_EPI32_ENUM,_MM_BROADCAST32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extload_epi64"><in>void const *,_MM_UPCONV_EPI64_ENUM,_MM_BROADCAST64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extload_pd"><in>void const *,_MM_UPCONV_PD_ENUM,_MM_BROADCAST64_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_extload_ps"><in>void const *,_MM_UPCONV_PS_ENUM,_MM_BROADCAST32_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_extloadunpackhi_epi32"><in>__m512i,void const *,_MM_UPCONV_EPI32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extloadunpackhi_epi64"><in>__m512i,void const *,_MM_UPCONV_EPI64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extloadunpackhi_pd"><in>__m512d,void const *,_MM_UPCONV_PD_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_extloadunpackhi_ps"><in>__m512,void const *,_MM_UPCONV_PS_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_extloadunpacklo_epi32"><in>__m512i,void const *,_MM_UPCONV_EPI32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extloadunpacklo_epi64"><in>__m512i,void const *,_MM_UPCONV_EPI64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_extloadunpacklo_pd"><in>__m512d,void const *,_MM_UPCONV_PD_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_extloadunpacklo_ps"><in>__m512,void const *,_MM_UPCONV_PS_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_extpackstorehi_epi32"><in>void *,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_extpackstorehi_epi64"><in>void *,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_extpackstorehi_pd"><in>void *,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_extpackstorehi_ps"><in>void *,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_extpackstorelo_epi32"><in>void *,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_extpackstorelo_epi64"><in>void *,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_extpackstorelo_pd"><in>void *,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_extpackstorelo_ps"><in>void *,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_extractf32x4_ps"><in>__m512,int</in><out>__m128</out></function>
	<function name="_mm512_extractf32x8_ps"><in>__m512,int</in><out>__m256</out></function>
	<function name="_mm512_extractf64x2_pd"><in>__m512d,int</in><out>__m128d</out></function>
	<function name="_mm512_extractf64x4_pd"><in>__m512d,int</in><out>__m256d</out></function>
	<function name="_mm512_extracti32x4_epi32"><in>__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_extracti32x8_epi32"><in>__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_extracti64x2_epi64"><in>__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_extracti64x4_epi64"><in>__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_extstore_epi32"><in>void *,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_extstore_epi64"><in>void *,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_extstore_pd"><in>void *,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_extstore_ps"><in>void *,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_fixupimm_pd"><in>__m512d,__m512d,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_fixupimm_ps"><in>__m512,__m512,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_fixupimm_round_pd"><in>__m512d,__m512d,__m512i,int,int</in><out>__m512d</out></function>
	<function name="_mm512_fixupimm_round_ps"><in>__m512,__m512,__m512i,int,int</in><out>__m512</out></function>
	<function name="_mm512_fixupnan_pd"><in>__m512d,__m512d,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_fixupnan_ps"><in>__m512,__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_floor_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_floor_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_fmadd233_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_fmadd233_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fmadd233_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_fmadd_epi32"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_fmadd_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fmadd_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fmadd_round_pd"><in>__m512d,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_fmadd_round_ps"><in>__m512,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_fmaddsub_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fmaddsub_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fmaddsub_round_pd"><in>__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_fmaddsub_round_ps"><in>__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_fmsubadd_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fmsubadd_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fmsubadd_round_pd"><in>__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_fmsubadd_round_ps"><in>__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_fmsub_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fmsub_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fmsub_round_pd"><in>__m512d,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_fmsub_round_ps"><in>__m512,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_fnmadd_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fnmadd_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fnmadd_round_pd"><in>__m512d,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_fnmadd_round_ps"><in>__m512,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_fnmsub_pd"><in>__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_fnmsub_ps"><in>__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_fnmsub_round_pd"><in>__m512d,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_fnmsub_round_ps"><in>__m512,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_fpclass_pd_mask"><in>__m512d,int</in><out>__mmask8</out></function>
	<function name="_mm512_fpclass_ps_mask"><in>__m512,int</in><out>__mmask16</out></function>
	<function name="_mm512_getexp_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_getexp_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_getexp_round_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_getexp_round_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_getmant_pd"><in>__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_getmant_ps"><in>__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512</out></function>
	<function name="_mm512_getmant_round_pd"><in>__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_getmant_round_ps"><in>__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_gmaxabs_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_gmax_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_gmax_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_gmin_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_gmin_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_hypot_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_hypot_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_i32extgather_epi32"><in>__m512i,void const *,_MM_UPCONV_EPI32_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_i32extgather_ps"><in>__m512i,void const *,_MM_UPCONV_PS_ENUM,int,int</in><out>__m512</out></function>
	<function name="_mm512_i32extscatter_epi32"><in>void *,__m512i,__m512i,_MM_DOWNCONV_EPI32_ENUM,int,int</in></function>
	<function name="_mm512_i32extscatter_ps"><in>void *,__m512i,__m512,_MM_DOWNCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_i32gather_epi32"><in>__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_i32gather_epi64"><in>__m256i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_i32gather_pd"><in>__m256i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_i32gather_ps"><in>__m512i,void const*,int</in><out>__m512</out></function>
	<function name="_mm512_i32loextgather_epi64"><in>__m512i,void const *,_MM_UPCONV_EPI64_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_i32loextgather_pd"><in>__m512i,void const *,_MM_UPCONV_PD_ENUM,int,int</in><out>__m512d</out></function>
	<function name="_mm512_i32loextscatter_epi64"><in>void *,__m512i,__m512i,_MM_DOWNCONV_EPI64_ENUM,int,int</in></function>
	<function name="_mm512_i32loextscatter_pd"><in>void *,__m512i,__m512d,_MM_DOWNCONV_PD_ENUM,int,int</in></function>
	<function name="_mm512_i32logather_epi64"><in>__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_i32logather_pd"><in>__m512i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_i32loscatter_epi64"><in>void*,__m512i,__m512i,int</in></function>
	<function name="_mm512_i32loscatter_pd"><in>void*,__m512i,__m512d,int</in></function>
	<function name="_mm512_i32scatter_epi32"><in>void*,__m512i,__m512i,int</in></function>
	<function name="_mm512_i32scatter_epi64"><in>void*,__m256i,__m512i,int</in></function>
	<function name="_mm512_i32scatter_pd"><in>void*,__m256i,__m512d,int</in></function>
	<function name="_mm512_i32scatter_ps"><in>void*,__m512i,__m512,int</in></function>
	<function name="_mm512_i64extgather_epi32lo"><in>__m512i,void const*,_MM_UPCONV_EPI32_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_i64extgather_epi64"><in>__m512i,void const*,_MM_UPCONV_EPI64_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_i64extgather_pd"><in>__m512i,void const *,_MM_UPCONV_PD_ENUM,int,int</in><out>__m512d</out></function>
	<function name="_mm512_i64extgather_pslo"><in>__m512i,void const *,_MM_UPCONV_PS_ENUM,int,int</in><out>__m512</out></function>
	<function name="_mm512_i64extscatter_epi32lo"><in>void *,__m512i,__m512i,_MM_DOWNCONV_EPI32_ENUM,int,int</in></function>
	<function name="_mm512_i64extscatter_epi64"><in>void *,__m512i,__m512i,_MM_DOWNCONV_EPI64_ENUM,int,int</in></function>
	<function name="_mm512_i64extscatter_pd"><in>void *,__m512i,__m512d,_MM_DOWNCONV_PD_ENUM,int,int</in></function>
	<function name="_mm512_i64extscatter_pslo"><in>void *,__m512i,__m512,_MM_DOWNCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_i64gather_epi32"><in>__m512i,void const*,int</in><out>__m256i</out></function>
	<function name="_mm512_i64gather_epi32lo"><in>__m512i,void const *,int</in><out>__m512i</out></function>
	<function name="_mm512_i64gather_epi64"><in>__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_i64gather_pd"><in>__m512i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_i64gather_ps"><in>__m512i,void const*,int</in><out>__m256</out></function>
	<function name="_mm512_i64gather_pslo"><in>__m512i,void const *,int</in><out>__m512</out></function>
	<function name="_mm512_i64scatter_epi32"><in>void*,__m512i,__m256i,int</in></function>
	<function name="_mm512_i64scatter_epi32lo"><in>void *,__m512i,__m512i,int</in></function>
	<function name="_mm512_i64scatter_epi64"><in>void*,__m512i,__m512i,int</in></function>
	<function name="_mm512_i64scatter_pd"><in>void*,__m512i,__m512d,int</in></function>
	<function name="_mm512_i64scatter_ps"><in>void*,__m512i,__m256,int</in></function>
	<function name="_mm512_i64scatter_pslo"><in>void *,__m512i,__m512,int</in></function>
	<function name="_mm512_insertf32x4"><in>__m512,__m128,int</in><out>__m512</out></function>
	<function name="_mm512_insertf32x8"><in>__m512,__m256,int</in><out>__m512</out></function>
	<function name="_mm512_insertf64x2"><in>__m512d,__m128d,int</in><out>__m512d</out></function>
	<function name="_mm512_insertf64x4"><in>__m512d,__m256d,int</in><out>__m512d</out></function>
	<function name="_mm512_inserti32x4"><in>__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_inserti32x8"><in>__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_inserti64x2"><in>__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_inserti64x4"><in>__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_int2mask"><in>int</in><out>__mmask16</out></function>
	<function name="_mm512_int2mask"><in>int</in><out>__mmask16</out></function>
	<function name="_mm512_invsqrt_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_invsqrt_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_kand"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kand"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kandn"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kandn"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kandnr"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kconcathi_64"><in>__mmask16,__mmask16</in><out>__int64</out></function>
	<function name="_mm512_kconcatlo_64"><in>__mmask16,__mmask16</in><out>__int64</out></function>
	<function name="_mm512_kextract_64"><in>__int64,const int</in><out>__mmask16</out></function>
	<function name="_mm512_kmerge2l1h"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kmerge2l1l"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kmov"><in>__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kmov"><in>__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kmovlhb"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_knot"><in>__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_knot"><in>__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kortestc"><in>__mmask16,__mmask16</in><out>int</out></function>
	<function name="_mm512_kortestc"><in>__mmask16,__mmask16</in><out>int</out></function>
	<function name="_mm512_kortestz"><in>__mmask16,__mmask16</in><out>int</out></function>
	<function name="_mm512_kortestz"><in>__mmask16,__mmask16</in><out>int</out></function>
	<function name="_mm512_kswapb"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kunpackb"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kunpackd"><in>__mmask64,__mmask64</in><out>__mmask64</out></function>
	<function name="_mm512_kunpackw"><in>__mmask32,__mmask32</in><out>__mmask32</out></function>
	<function name="_mm512_kxnor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kxnor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kxor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_kxor"><in>__mmask16,__mmask16</in><out>__mmask16</out></function>
	<function name="_mm512_load_epi32"><in>void const*</in><out>__m512i</out></function>
	<function name="_mm512_load_epi64"><in>void const*</in><out>__m512i</out></function>
	<function name="_mm512_load_pd"><in>void const*</in><out>__m512d</out></function>
	<function name="_mm512_load_ps"><in>void const*</in><out>__m512</out></function>
	<function name="_mm512_load_si512"><in>void const*</in><out>__m512i</out></function>
	<function name="_mm512_loadunpackhi_epi32"><in>__m512i,void const*</in><out>__m512i</out></function>
	<function name="_mm512_loadunpackhi_epi64"><in>__m512i,void const*</in><out>__m512i</out></function>
	<function name="_mm512_loadunpackhi_pd"><in>__m512d,void const*</in><out>__m512d</out></function>
	<function name="_mm512_loadunpackhi_ps"><in>__m512,void const*</in><out>__m512</out></function>
	<function name="_mm512_loadunpacklo_epi32"><in>__m512i,void const*</in><out>__m512i</out></function>
	<function name="_mm512_loadunpacklo_epi64"><in>__m512i,void const*</in><out>__m512i</out></function>
	<function name="_mm512_loadunpacklo_pd"><in>__m512d,void const*</in><out>__m512d</out></function>
	<function name="_mm512_loadunpacklo_ps"><in>__m512,void const*</in><out>__m512</out></function>
	<function name="_mm512_loadu_pd"><in>void const*</in><out>__m512d</out></function>
	<function name="_mm512_loadu_ps"><in>void const*</in><out>__m512</out></function>
	<function name="_mm512_loadu_si512"><in>void const*</in><out>__m512i</out></function>
	<function name="_mm512_log10_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_log10_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_log1p_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_log1p_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_log2ae23_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_log2_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_log2_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_logb_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_logb_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_log_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_log_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_lzcnt_epi32"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_lzcnt_epi64"><in>__m512i</in><out>__m512i</out></function>
	<function name="_mm512_madd52hi_epu64"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_madd52lo_epu64"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_madd_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maddubs_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask2int"><in>__mmask16</in><out>int</out></function>
	<function name="_mm512_mask2int"><in>__mmask16</in><out>int</out></function>
	<function name="_mm512_mask2_permutex2var_epi16"><in>__m512i,__m512i,__mmask32,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask2_permutex2var_epi32"><in>__m512i,__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask2_permutex2var_epi64"><in>__m512i,__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask2_permutex2var_epi8"><in>__m512i,__m512i,__mmask64,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask2_permutex2var_pd"><in>__m512d,__m512i,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask2_permutex2var_ps"><in>__m512,__m512i,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmadd_epi32"><in>__m512i,__m512i,__m512i,__mmask16</in><out>__m512i</out></function>
	<function name="_mm512_mask3_fmadd_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmadd_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmadd_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmadd_round_ps"><in>__m512,__m512,__m512,__mmask16,int</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmaddsub_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmaddsub_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmaddsub_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmaddsub_round_ps"><in>__m512,__m512,__m512,__mmask16,const int</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmsubadd_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmsubadd_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmsubadd_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmsubadd_round_ps"><in>__m512,__m512,__m512,__mmask16,const int</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmsub_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmsub_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fmsub_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fmsub_round_ps"><in>__m512,__m512,__m512,__mmask16,int</in><out>__m512</out></function>
	<function name="_mm512_mask3_fnmadd_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fnmadd_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fnmadd_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fnmadd_round_ps"><in>__m512,__m512,__m512,__mmask16,int</in><out>__m512</out></function>
	<function name="_mm512_mask3_fnmsub_pd"><in>__m512d,__m512d,__m512d,__mmask8</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fnmsub_ps"><in>__m512,__m512,__m512,__mmask16</in><out>__m512</out></function>
	<function name="_mm512_mask3_fnmsub_round_pd"><in>__m512d,__m512d,__m512d,__mmask8,int</in><out>__m512d</out></function>
	<function name="_mm512_mask3_fnmsub_round_ps"><in>__m512,__m512,__m512,__mmask16,int</in><out>__m512</out></function>
	<function name="_mm512_mask_abs_epi16"><in>__m512i,__mmask32,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_abs_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_abs_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_abs_epi8"><in>__m512i,__mmask64,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_abs_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_abs_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_acosh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_acosh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_acos_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_acos_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_adc_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_add_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_add_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_add_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_add_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_addn_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_addn_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_addn_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_addn_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_add_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_add_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_add_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_add_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_adds_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_adds_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_adds_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_adds_epu8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_addsetc_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_addsets_epi32"><in>__m512i,__mmask16,__m512i,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_addsets_ps"><in>__m512,__mmask16,__m512,__m512,__mmask16 *</in><out>__m512</out></function>
	<function name="_mm512_mask_addsets_round_ps"><in>__m512,__mmask16,__m512,__m512,__mmask16 *,int</in><out>__m512</out></function>
	<function name="_mm512_mask_alignr_epi32"><in>__m512i,__mmask16,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_alignr_epi64"><in>__m512i,__mmask8,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_alignr_epi8"><in>__m512i,__mmask64,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_and_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_and_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_andnot_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_andnot_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_andnot_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_andnot_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_and_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_and_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_asinh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_asinh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_asin_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_asin_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_atan2_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_atan2_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_atanh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_atanh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_atan_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_atan_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_avg_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_avg_epu8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_blend_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_blend_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_blend_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_blend_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_blend_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_blend_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_broadcastb_epi8"><in>__m512i,__mmask64,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcastd_epi32"><in>__m512i,__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcast_f32x2"><in>__m512,__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_mask_broadcast_f32x4"><in>__m512,__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_mask_broadcast_f32x8"><in>__m512,__mmask16,__m256</in><out>__m512</out></function>
	<function name="_mm512_mask_broadcast_f64x2"><in>__m512d,__mmask8,__m128d</in><out>__m512d</out></function>
	<function name="_mm512_mask_broadcast_f64x4"><in>__m512d,__mmask8,__m256d</in><out>__m512d</out></function>
	<function name="_mm512_mask_broadcast_i32x2"><in>__m512i,__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcast_i32x4"><in>__m512i,__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcast_i32x8"><in>__m512i,__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcast_i64x2"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcast_i64x4"><in>__m512i,__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcastq_epi64"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_broadcastsd_pd"><in>__m512d,__mmask8,__m128d</in><out>__m512d</out></function>
	<function name="_mm512_mask_broadcastss_ps"><in>__m512,__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_mask_broadcastw_epi16"><in>__m512i,__mmask32,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cbrt_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cbrt_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cdfnorminv_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cdfnorminv_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cdfnorm_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cdfnorm_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_ceil_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_ceil_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cmp_epi16_mask"><in>__mmask32,__m512i,__m512i,const int</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmp_epi32_mask"><in>__mmask16,__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmp_epi64_mask"><in>__mmask8,__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmp_epi8_mask"><in>__mmask64,__m512i,__m512i,const int</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmp_epu16_mask"><in>__mmask32,__m512i,__m512i,const int</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmp_epu32_mask"><in>__mmask16,__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmp_epu64_mask"><in>__mmask8,__m512i,__m512i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmp_epu8_mask"><in>__mmask64,__m512i,__m512i,const int</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpeq_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpeq_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpeq_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpeq_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpeq_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpeq_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpeq_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpeq_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpeq_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpeq_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpge_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpge_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpge_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpge_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpge_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpge_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpge_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpge_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpgt_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpgt_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpgt_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpgt_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpgt_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpgt_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpgt_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpgt_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmple_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmple_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmple_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmple_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmple_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmple_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmple_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmple_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmple_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmple_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmplt_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmplt_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmplt_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmplt_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmplt_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmplt_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmplt_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmplt_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmplt_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmplt_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmplt_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpneq_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpneq_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpneq_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpneq_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpneq_epu16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_cmpneq_epu32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpneq_epu64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpneq_epu8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_cmpneq_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpneq_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpnle_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpnle_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpnlt_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpnlt_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpord_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpord_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmp_pd_mask"><in>__mmask8,__m512d,__m512d,const int</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmp_ps_mask"><in>__mmask16,__m512,__m512,const int</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmp_round_pd_mask"><in>__mmask8,__m512d,__m512d,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmp_round_ps_mask"><in>__mmask16,__m512,__m512,const int,const int</in><out>__mmask16</out></function>
	<function name="_mm512_mask_cmpunord_pd_mask"><in>__mmask8,__m512d,__m512d</in><out>__mmask8</out></function>
	<function name="_mm512_mask_cmpunord_ps_mask"><in>__mmask16,__m512,__m512</in><out>__mmask16</out></function>
	<function name="_mm512_mask_compress_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_compress_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_compress_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_compress_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_compressstoreu_epi32"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_compressstoreu_epi64"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_compressstoreu_pd"><in>void*,__mmask8,__m512d</in></function>
	<function name="_mm512_mask_compressstoreu_ps"><in>void*,__mmask16,__m512</in></function>
	<function name="_mm512_mask_conflict_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_conflict_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cosd_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cosd_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cosh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cosh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cos_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_cos_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtepi16_epi32"><in>__m512i,__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepi16_epi64"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepi16_epi8"><in>__m256i,__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtepi16_storeu_epi8"><in>void*,__mmask32,__m512i</in></function>
	<function name="_mm512_mask_cvtepi32_epi16"><in>__m256i,__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtepi32_epi64"><in>__m512i,__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepi32_epi8"><in>__m128i,__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtepi32lo_pd"><in>__m512d,__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepi32_pd"><in>__m512d,__mmask8,__m256i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepi32_ps"><in>__m512,__mmask16,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtepi32_storeu_epi16"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtepi32_storeu_epi8"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtepi64_epi16"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtepi64_epi32"><in>__m256i,__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtepi64_epi8"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtepi64_pd"><in>__m512d,__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepi64_ps"><in>__m256,__mmask8,__m512i</in><out>__m256</out></function>
	<function name="_mm512_mask_cvtepi64_storeu_epi16"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtepi64_storeu_epi32"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtepi64_storeu_epi8"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtepi8_epi16"><in>__m512i,__mmask32,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepi8_epi32"><in>__m512i,__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepi8_epi64"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu16_epi32"><in>__m512i,__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu16_epi64"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu32_epi64"><in>__m512i,__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu32lo_pd"><in>__m512d,__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepu32_pd"><in>__m512d,__mmask8,__m256i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepu32_ps"><in>__m512,__mmask16,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtepu64_pd"><in>__m512d,__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtepu64_ps"><in>__m256,__mmask8,__m512i</in><out>__m256</out></function>
	<function name="_mm512_mask_cvtepu8_epi16"><in>__m512i,__mmask32,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu8_epi32"><in>__m512i,__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtepu8_epi64"><in>__m512i,__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtfxpnt_round_adjustepu32_ps"><in>__m512,__mmask16,__m512i,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtfxpnt_roundpd_epi32lo"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtfxpnt_roundpd_epu32lo"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtpd_epi32"><in>__m256i,__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtpd_epi64"><in>__m512i,__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtpd_epu32"><in>__m256i,__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtpd_epu64"><in>__m512i,__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtpd_ps"><in>__m256,__mmask8,__m512d</in><out>__m256</out></function>
	<function name="_mm512_mask_cvtpd_pslo"><in>__m512,__mmask8,__m512d</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtph_ps"><in>__m512,__mmask16,__m256i</in><out>__m512</out></function>
	<function name="_mm512_mask_cvtps_epi32"><in>__m512i,__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtps_epi64"><in>__m512i,__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtps_epu32"><in>__m512i,__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtps_epu64"><in>__m512i,__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtpslo_pd"><in>__m512d,__mmask8,__m512</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtps_pd"><in>__m512d,__mmask8,__m256</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvtps_ph"><in>__m256i,__mmask16,__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvt_roundepi32_ps"><in>__m512,__mmask16,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_mask_cvt_roundepi64_pd"><in>__m512d,__mmask8,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvt_roundepi64_ps"><in>__m256,__mmask8,__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_mask_cvt_roundepu32_ps"><in>__m512,__mmask16,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_mask_cvt_roundepu64_pd"><in>__m512d,__mmask8,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvt_roundepu64_ps"><in>__m256,__mmask8,__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_mask_cvt_roundpd_epi32"><in>__m256i,__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvt_roundpd_epi64"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundpd_epu32"><in>__m256i,__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvt_roundpd_epu64"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundpd_ps"><in>__m256,__mmask8,__m512d,int</in><out>__m256</out></function>
	<function name="_mm512_mask_cvt_roundpd_pslo"><in>__m512,__mmask8,__m512d,int</in><out>__m512</out></function>
	<function name="_mm512_mask_cvt_roundph_ps"><in>__m512,__mmask16,__m256i,int</in><out>__m512</out></function>
	<function name="_mm512_mask_cvt_roundps_epi32"><in>__m512i,__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundps_epi64"><in>__m512i,__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundps_epu32"><in>__m512i,__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundps_epu64"><in>__m512i,__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvt_roundps_pd"><in>__m512d,__mmask8,__m256,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_cvt_roundps_ph"><in>__m256i,__mmask16,__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtsepi16_epi8"><in>__m256i,__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtsepi16_storeu_epi8"><in>void*,__mmask32,__m512i</in></function>
	<function name="_mm512_mask_cvtsepi32_epi16"><in>__m256i,__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtsepi32_epi8"><in>__m128i,__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtsepi32_storeu_epi16"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtsepi32_storeu_epi8"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtsepi64_epi16"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtsepi64_epi32"><in>__m256i,__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtsepi64_epi8"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtsepi64_storeu_epi16"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtsepi64_storeu_epi32"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtsepi64_storeu_epi8"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvttpd_epi32"><in>__m256i,__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvttpd_epi64"><in>__m512i,__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvttpd_epu32"><in>__m256i,__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvttpd_epu64"><in>__m512i,__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvttps_epi32"><in>__m512i,__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvttps_epi64"><in>__m512i,__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvttps_epu32"><in>__m512i,__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvttps_epu64"><in>__m512i,__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundpd_epi32"><in>__m256i,__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtt_roundpd_epi64"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundpd_epu32"><in>__m256i,__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtt_roundpd_epu64"><in>__m512i,__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundps_epi32"><in>__m512i,__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundps_epi64"><in>__m512i,__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundps_epu32"><in>__m512i,__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtt_roundps_epu64"><in>__m512i,__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_cvtusepi16_epi8"><in>__m256i,__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtusepi16_storeu_epi8"><in>void*,__mmask32,__m512i</in></function>
	<function name="_mm512_mask_cvtusepi32_epi16"><in>__m256i,__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtusepi32_epi8"><in>__m128i,__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtusepi32_storeu_epi16"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtusepi32_storeu_epi8"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_cvtusepi64_epi16"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtusepi64_epi32"><in>__m256i,__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_mask_cvtusepi64_epi8"><in>__m128i,__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_mask_cvtusepi64_storeu_epi16"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtusepi64_storeu_epi32"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_cvtusepi64_storeu_epi8"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_dbsad_epu8"><in>__m512i,__mmask32,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_div_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_div_epu32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_div_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_div_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_div_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_div_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_erfcinv_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_erfcinv_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_erfc_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_erfc_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_erfinv_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_erfinv_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_erf_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_erf_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_exp10_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_exp10_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_exp223_ps"><in>__m512,__mmask16,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_exp2a23_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_exp2a23_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_exp2a23_round_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_exp2a23_round_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_exp2_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_exp2_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_expand_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_expand_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_expandloadu_epi32"><in>__m512i,__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_expandloadu_epi64"><in>__m512i,__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_expandloadu_pd"><in>__m512d,__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_mask_expandloadu_ps"><in>__m512,__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_mask_expand_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_expand_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_expm1_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_expm1_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_exp_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_exp_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_extload_epi32"><in>__m512i,__mmask16,void const *,_MM_UPCONV_EPI32_ENUM,_MM_BROADCAST32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extload_epi64"><in>__m512i,__mmask8,void const *,_MM_UPCONV_EPI64_ENUM,_MM_BROADCAST64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extload_pd"><in>__m512d,__mmask8,void const *,_MM_UPCONV_PD_ENUM,_MM_BROADCAST64_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_extload_ps"><in>__m512,__mmask16,void const *,_MM_UPCONV_PS_ENUM,_MM_BROADCAST32_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_mask_extloadunpackhi_epi32"><in>__m512i,__mmask16,void const *,_MM_UPCONV_EPI32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extloadunpackhi_epi64"><in>__m512i,__mmask8,void const *,_MM_UPCONV_EPI64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extloadunpackhi_pd"><in>__m512d,__mmask8,void const *,_MM_UPCONV_PD_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_extloadunpackhi_ps"><in>__m512,__mmask16,void const *,_MM_UPCONV_PS_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_mask_extloadunpacklo_epi32"><in>__m512i,__mmask16,void const *,_MM_UPCONV_EPI32_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extloadunpacklo_epi64"><in>__m512i,__mmask8,void const *,_MM_UPCONV_EPI64_ENUM,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_extloadunpacklo_pd"><in>__m512d,__mmask8,void const *,_MM_UPCONV_PD_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_extloadunpacklo_ps"><in>__m512,__mmask16,void const *,_MM_UPCONV_PS_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_mask_extpackstorehi_epi32"><in>void *,__mmask16,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorehi_epi64"><in>void *,__mmask8,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorehi_pd"><in>void *,__mmask8,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorehi_ps"><in>void *,__mmask16,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorelo_epi32"><in>void *,__mmask16,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorelo_epi64"><in>void *,__mmask8,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorelo_pd"><in>void *,__mmask8,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_mask_extpackstorelo_ps"><in>void *,__mmask16,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_mask_extractf32x4_ps"><in>__m128,__mmask8,__m512,int</in><out>__m128</out></function>
	<function name="_mm512_mask_extractf32x8_ps"><in>__m256,__mmask8,__m512,int</in><out>__m256</out></function>
	<function name="_mm512_mask_extractf64x2_pd"><in>__m128d,__mmask8,__m512d,int</in><out>__m128d</out></function>
	<function name="_mm512_mask_extractf64x4_pd"><in>__m256d,__mmask8,__m512d,int</in><out>__m256d</out></function>
	<function name="_mm512_mask_extracti32x4_epi32"><in>__m128i,__mmask8,__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_mask_extracti32x8_epi32"><in>__m256i,__mmask8,__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_extracti64x2_epi64"><in>__m128i,__mmask8,__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_mask_extracti64x4_epi64"><in>__m256i,__mmask8,__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_extstore_epi32"><in>void *,__mmask16,__m512i,_MM_DOWNCONV_EPI32_ENUM,int</in></function>
	<function name="_mm512_mask_extstore_epi64"><in>void *,__mmask8,__m512i,_MM_DOWNCONV_EPI64_ENUM,int</in></function>
	<function name="_mm512_mask_extstore_pd"><in>void *,__mmask8,__m512d,_MM_DOWNCONV_PD_ENUM,int</in></function>
	<function name="_mm512_mask_extstore_ps"><in>void *,__mmask16,__m512,_MM_DOWNCONV_PS_ENUM,int</in></function>
	<function name="_mm512_mask_fixupimm_pd"><in>__m512d,__mmask8,__m512d,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fixupimm_ps"><in>__m512,__mmask16,__m512,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fixupimm_round_pd"><in>__m512d,__mmask8,__m512d,__m512i,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fixupimm_round_ps"><in>__m512,__mmask16,__m512,__m512i,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fixupnan_pd"><in>__m512d,__mmask8,__m512d,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_fixupnan_ps"><in>__m512,__mmask16,__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_floor_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_floor_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmadd233_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_fmadd233_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmadd233_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fmadd_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_fmadd_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmadd_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmadd_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmadd_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fmaddsub_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmaddsub_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmaddsub_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmaddsub_round_ps"><in>__m512,__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_mask_fmsubadd_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmsubadd_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmsubadd_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmsubadd_round_ps"><in>__m512,__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_mask_fmsub_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmsub_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fmsub_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fmsub_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fnmadd_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fnmadd_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fnmadd_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fnmadd_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fnmsub_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_fnmsub_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_fnmsub_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_fnmsub_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_fpclass_pd_mask"><in>__mmask8,__m512d,int</in><out>__mmask8</out></function>
	<function name="_mm512_mask_fpclass_ps_mask"><in>__mmask16,__m512,int</in><out>__mmask16</out></function>
	<function name="_mm512_mask_getexp_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_getexp_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_getexp_round_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_getexp_round_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_getmant_pd"><in>__m512d,__mmask8,__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_mask_getmant_ps"><in>__m512,__mmask16,__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_getmant_round_pd"><in>__m512d,__mmask8,__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_getmant_round_ps"><in>__m512,__mmask16,__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_mask_gmaxabs_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_gmax_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_gmax_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_gmin_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_gmin_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_hypot_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_hypot_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_i32extgather_epi32"><in>__m512i,__mmask16,__m512i,void const *,_MM_UPCONV_EPI32_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i32extgather_ps"><in>__m512,__mmask16,__m512i,void const *,_MM_UPCONV_PS_ENUM,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_i32extscatter_epi32"><in>void *,__mmask16,__m512i,__m512i,_MM_DOWNCONV_EPI32_ENUM,int,int</in></function>
	<function name="_mm512_mask_i32extscatter_ps"><in>void *,__mmask16,__m512i,__m512,_MM_DOWNCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_mask_i32gather_epi32"><in>__m512i,__mmask16,__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i32gather_epi64"><in>__m512i,__mmask8,__m256i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i32gather_pd"><in>__m512d,__mmask8,__m256i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_i32gather_ps"><in>__m512,__mmask16,__m512i,void const*,int</in><out>__m512</out></function>
	<function name="_mm512_mask_i32loextgather_epi64"><in>__m512i,__mmask8,__m512i,void const *,_MM_UPCONV_EPI64_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i32loextgather_pd"><in>__m512d,__mmask8,__m512i,void const *,_MM_UPCONV_PD_ENUM,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_i32loextscatter_epi64"><in>void *,__mmask8,__m512i,__m512i,_MM_DOWNCONV_EPI64_ENUM,int,int</in></function>
	<function name="_mm512_mask_i32loextscatter_pd"><in>void *,__mmask8,__m512i,__m512d,_MM_DOWNCONV_PD_ENUM,int,int</in></function>
	<function name="_mm512_mask_i32logather_epi64"><in>__m512i,__mmask8,__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i32logather_pd"><in>__m512d,__mmask8,__m512i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_i32loscatter_epi64"><in>void*,__mmask8,__m512i,__m512i,int</in></function>
	<function name="_mm512_mask_i32loscatter_pd"><in>void*,__mmask8,__m512i,__m512d,int</in></function>
	<function name="_mm512_mask_i32scatter_epi32"><in>void*,__mmask16,__m512i,__m512i,int</in></function>
	<function name="_mm512_mask_i32scatter_epi64"><in>void*,__mmask8,__m256i,__m512i,int</in></function>
	<function name="_mm512_mask_i32scatter_pd"><in>void*,__mmask8,__m256i,__m512d,int</in></function>
	<function name="_mm512_mask_i32scatter_ps"><in>void*,__mmask16,__m512i,__m512,int</in></function>
	<function name="_mm512_mask_i64extgather_epi32lo"><in>__m512i,__mmask8,__m512i,void const*,_MM_UPCONV_EPI32_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i64extgather_epi64"><in>__m512i,__mmask8,__m512i,void const*,_MM_UPCONV_EPI64_ENUM,int,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i64extgather_pd"><in>__m512d,__mmask8,__m512i,void const *,_MM_UPCONV_PD_ENUM,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_i64extgather_pslo"><in>__m512,__mmask8,__m512i,void const *,_MM_UPCONV_PS_ENUM,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_i64extscatter_epi32lo"><in>void *,__mmask8,__m512i,__m512i,_MM_DOWNCONV_EPI32_ENUM,int,int</in></function>
	<function name="_mm512_mask_i64extscatter_epi64"><in>void *,__mmask8,__m512i,__m512i,_MM_DOWNCONV_EPI64_ENUM,int,int</in></function>
	<function name="_mm512_mask_i64extscatter_pd"><in>void *,__mmask8,__m512i,__m512d,_MM_DOWNCONV_PD_ENUM,int,int</in></function>
	<function name="_mm512_mask_i64extscatter_pslo"><in>void *,__mmask8,__m512i,__m512,_MM_DOWNCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_mask_i64gather_epi32"><in>__m256i,__mmask8,__m512i,void const*,int</in><out>__m256i</out></function>
	<function name="_mm512_mask_i64gather_epi32lo"><in>__m512i,__mmask8,__m512i,void const *,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i64gather_epi64"><in>__m512i,__mmask8,__m512i,void const*,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_i64gather_pd"><in>__m512d,__mmask8,__m512i,void const*,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_i64gather_ps"><in>__m256,__mmask8,__m512i,void const*,int</in><out>__m256</out></function>
	<function name="_mm512_mask_i64gather_pslo"><in>__m512,__mmask8,__m512i,void const *,int</in><out>__m512</out></function>
	<function name="_mm512_mask_i64scatter_epi32"><in>void*,__mmask8,__m512i,__m256i,int</in></function>
	<function name="_mm512_mask_i64scatter_epi32lo"><in>void *,__mmask8,__m512i,__m512i,int</in></function>
	<function name="_mm512_mask_i64scatter_epi64"><in>void*,__mmask8,__m512i,__m512i,int</in></function>
	<function name="_mm512_mask_i64scatter_pd"><in>void*,__mmask8,__m512i,__m512d,int</in></function>
	<function name="_mm512_mask_i64scatter_ps"><in>void*,__mmask8,__m512i,__m256,int</in></function>
	<function name="_mm512_mask_i64scatter_pslo"><in>void *,__mmask8,__m512i,__m512,int</in></function>
	<function name="_mm512_mask_insertf32x4"><in>__m512,__mmask16,__m512,__m128,int</in><out>__m512</out></function>
	<function name="_mm512_mask_insertf32x8"><in>__m512,__mmask16,__m512,__m256,int</in><out>__m512</out></function>
	<function name="_mm512_mask_insertf64x2"><in>__m512d,__mmask8,__m512d,__m128d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_insertf64x4"><in>__m512d,__mmask8,__m512d,__m256d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_inserti32x4"><in>__m512i,__mmask16,__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_inserti32x8"><in>__m512i,__mmask16,__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_inserti64x2"><in>__m512i,__mmask8,__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_inserti64x4"><in>__m512i,__mmask8,__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_invsqrt_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_invsqrt_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_load_epi32"><in>__m512i,__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_load_epi64"><in>__m512i,__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_load_pd"><in>__m512d,__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_mask_load_ps"><in>__m512,__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_mask_loadu_epi16"><in>__m512i,__mmask32,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadu_epi32"><in>__m512i,__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadu_epi64"><in>__m512i,__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadu_epi8"><in>__m512i,__mmask64,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadunpackhi_epi32"><in>__m512i,__mmask16,void const *</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadunpackhi_epi64"><in>__m512i,__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadunpackhi_pd"><in>__m512d,__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_mask_loadunpackhi_ps"><in>__m512,__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_mask_loadunpacklo_epi32"><in>__m512i,__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadunpacklo_epi64"><in>__m512i,__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_mask_loadunpacklo_pd"><in>__m512d,__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_mask_loadunpacklo_ps"><in>__m512,__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_mask_loadu_pd"><in>__m512d,__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_mask_loadu_ps"><in>__m512,__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_mask_log10_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_log10_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_log1p_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_log1p_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_log2ae23_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_log2_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_log2_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_logb_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_logb_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_log_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_log_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_lzcnt_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_lzcnt_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_madd52hi_epu64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_madd52lo_epu64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_madd_epi16"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_maddubs_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_maxabs_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_max_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epu32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epu64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_epu8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_max_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_max_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_max_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_max_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_min_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epu32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epu64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_epu8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_min_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_min_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_min_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_min_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_movedup_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_movehdup_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_moveldup_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_mov_epi16"><in>__m512i,__mmask32,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mov_epi32"><in>__m512i,__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mov_epi64"><in>__m512i,__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mov_epi8"><in>__m512i,__mmask64,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mov_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_mov_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_mul_epi32"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mul_epu32"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mulhi_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mulhi_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mulhi_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mulhi_epu32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mulhrs_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mullo_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mullo_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mullo_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mullox_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_mul_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_mul_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_mul_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_mul_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_multishift_epi64_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_nearbyint_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_nearbyint_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_or_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_or_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_or_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_or_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_packs_epi16"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_packs_epi32"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_packstorehi_epi32"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_packstorehi_epi64"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_packstorehi_pd"><in>void*,__mmask8,__m512d</in></function>
	<function name="_mm512_mask_packstorehi_ps"><in>void*,__mmask16,__m512</in></function>
	<function name="_mm512_mask_packstorelo_epi32"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_packstorelo_epi64"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_packstorelo_pd"><in>void*,__mmask8,__m512d</in></function>
	<function name="_mm512_mask_packstorelo_ps"><in>void*,__mmask16,__m512</in></function>
	<function name="_mm512_mask_packus_epi16"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_packus_epi32"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permute4f128_epi32"><in>__m512i,__mmask16,__m512i,_MM_PERM_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_mask_permute4f128_ps"><in>__m512,__mmask16,__m512,_MM_PERM_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_permute_pd"><in>__m512d,__mmask8,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_permute_ps"><in>__m512,__mmask16,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_mask_permutevar_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutevar_pd"><in>__m512d,__mmask8,__m512d,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_mask_permutevar_ps"><in>__m512,__mmask16,__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_permutex2var_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutex2var_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutex2var_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutex2var_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutex2var_pd"><in>__m512d,__mmask8,__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_permutex2var_ps"><in>__m512,__mmask16,__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_permutex_epi64"><in>__m512i,__mmask8,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutex_pd"><in>__m512d,__mmask8,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_permutexvar_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutexvar_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutexvar_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutexvar_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_permutexvar_pd"><in>__m512d,__mmask8,__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_permutexvar_ps"><in>__m512,__mmask16,__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_pow_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_pow_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_prefetch_i32extgather_ps"><in>__m512i,__mmask16,void const *,_MM_UPCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_mask_prefetch_i32extscatter_ps"><in>void *,__mmask16,__m512i,_MM_UPCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_mask_prefetch_i32gather_pd"><in>__m256i,__mmask8,void const*,int,int</in></function>
	<function name="_mm512_mask_prefetch_i32gather_ps"><in>__m512i,__mmask16,void const*,int,int</in></function>
	<function name="_mm512_mask_prefetch_i32scatter_pd"><in>void*,__mmask8,__m256i,int,int</in></function>
	<function name="_mm512_mask_prefetch_i32scatter_ps"><in>void*,__mmask16,__m512i,int,int</in></function>
	<function name="_mm512_mask_prefetch_i64gather_pd"><in>__m512i,__mmask8,void const*,int,int</in></function>
	<function name="_mm512_mask_prefetch_i64gather_ps"><in>__m512i,__mmask8,void const*,int,int</in></function>
	<function name="_mm512_mask_prefetch_i64scatter_pd"><in>void*,__mmask8,__m512i,int,int</in></function>
	<function name="_mm512_mask_prefetch_i64scatter_ps"><in>void*,__mmask8,__m512i,int,int</in></function>
	<function name="_mm512_mask_range_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_range_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_range_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_range_round_ps"><in>__m512,__mmask16,__m512,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_rcp14_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_rcp14_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rcp23_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rcp28_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_rcp28_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rcp28_round_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_rcp28_round_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_recip_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_recip_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_reduce_add_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_add_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_add_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_add_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_and_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_and_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_gmax_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_gmax_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_gmin_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_gmin_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_max_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_max_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_max_epu32"><in>__mmask16,__m512i</in><out>unsigned int</out></function>
	<function name="_mm512_mask_reduce_max_epu64"><in>__mmask8,__m512i</in><out>unsigned __int64</out></function>
	<function name="_mm512_mask_reduce_max_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_max_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_min_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_min_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_min_epu32"><in>__mmask16,__m512i</in><out>unsigned int</out></function>
	<function name="_mm512_mask_reduce_min_epu64"><in>__mmask8,__m512i</in><out>unsigned __int64</out></function>
	<function name="_mm512_mask_reduce_min_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_min_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_mul_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_mul_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_mul_pd"><in>__mmask8,__m512d</in><out>double</out></function>
	<function name="_mm512_mask_reduce_mul_ps"><in>__mmask16,__m512</in><out>float</out></function>
	<function name="_mm512_mask_reduce_or_epi32"><in>__mmask16,__m512i</in><out>int</out></function>
	<function name="_mm512_mask_reduce_or_epi64"><in>__mmask8,__m512i</in><out>__int64</out></function>
	<function name="_mm512_mask_reduce_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_reduce_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_reduce_round_pd"><in>__m512d,__mmask8,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_reduce_round_ps"><in>__m512,__mmask16,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_rem_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_rem_epu32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_rint_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_rint_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rol_epi32"><in>__m512i,__mmask16,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_rol_epi64"><in>__m512i,__mmask8,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_rolv_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_rolv_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_ror_epi32"><in>__m512i,__mmask16,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_ror_epi64"><in>__m512i,__mmask8,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_rorv_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_rorv_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_roundfxpnt_adjust_pd"><in>__m512d,__mmask8,__m512d,int,_MM_EXP_ADJ_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_mask_roundfxpnt_adjust_ps"><in>__m512,__mmask16,__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_round_ps"><in>__m512,__mmask16,__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_roundscale_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_roundscale_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_roundscale_round_pd"><in>__m512d,__mmask8,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_roundscale_round_ps"><in>__m512,__mmask16,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_mask_rsqrt14_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_rsqrt14_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rsqrt23_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rsqrt28_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_rsqrt28_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_rsqrt28_round_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_rsqrt28_round_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_sbb_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_sbbr_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_scalef_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_scalef_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_scalef_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_scalef_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_scale_ps"><in>__m512,__mmask16,__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_mask_scale_round_ps"><in>__m512,__mmask16,__m512,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_mask_set1_epi16"><in>__m512i,__mmask32,short</in><out>__m512i</out></function>
	<function name="_mm512_mask_set1_epi32"><in>__m512i,__mmask16,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_set1_epi64"><in>__m512i,__mmask8,__int64</in><out>__m512i</out></function>
	<function name="_mm512_mask_set1_epi8"><in>__m512i,__mmask64,char</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_epi32"><in>__m512i,__mmask16,__m512i,_MM_PERM_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_f32x4"><in>__m512,__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_mask_shuffle_f64x2"><in>__m512d,__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_shufflehi_epi16"><in>__m512i,__mmask32,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_i32x4"><in>__m512i,__mmask16,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_i64x2"><in>__m512i,__mmask8,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_mask_shufflelo_epi16"><in>__m512i,__mmask32,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_shuffle_pd"><in>__m512d,__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_mask_shuffle_ps"><in>__m512,__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_mask_sincos_pd"><in>__m512d *,__m512d,__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sincos_ps"><in>__m512 *,__m512,__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_sind_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sind_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_sinh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sinh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_sin_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sin_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_sll_epi16"><in>__m512i,__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sll_epi32"><in>__m512i,__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sll_epi64"><in>__m512i,__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_slli_epi16"><in>__m512i,__mmask32,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_slli_epi32"><in>__m512i,__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_slli_epi64"><in>__m512i,__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_sllv_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sllv_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sllv_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sqrt_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sqrt_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_sqrt_round_pd"><in>__m512d,__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_sqrt_round_ps"><in>__m512,__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_sra_epi16"><in>__m512i,__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sra_epi32"><in>__m512i,__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sra_epi64"><in>__m512i,__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srai_epi16"><in>__m512i,__mmask32,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srai_epi32"><in>__m512i,__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srai_epi64"><in>__m512i,__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srav_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srav_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srav_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srl_epi16"><in>__m512i,__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srl_epi32"><in>__m512i,__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srl_epi64"><in>__m512i,__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srli_epi16"><in>__m512i,__mmask32,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srli_epi32"><in>__m512i,__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srli_epi64"><in>__m512i,__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_mask_srlv_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srlv_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_srlv_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_store_epi32"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_store_epi64"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_store_pd"><in>void*,__mmask8,__m512d</in></function>
	<function name="_mm512_mask_store_ps"><in>void*,__mmask16,__m512</in></function>
	<function name="_mm512_mask_storeu_epi16"><in>void*,__mmask32,__m512i</in></function>
	<function name="_mm512_mask_storeu_epi32"><in>void*,__mmask16,__m512i</in></function>
	<function name="_mm512_mask_storeu_epi64"><in>void*,__mmask8,__m512i</in></function>
	<function name="_mm512_mask_storeu_epi8"><in>void*,__mmask64,__m512i</in></function>
	<function name="_mm512_mask_storeu_pd"><in>void*,__mmask8,__m512d</in></function>
	<function name="_mm512_mask_storeu_ps"><in>void*,__mmask16,__m512</in></function>
	<function name="_mm512_mask_sub_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sub_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sub_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sub_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sub_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_sub_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_subr_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_sub_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_sub_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_subr_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_subr_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_subr_round_pd"><in>__m512d,__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mask_subr_round_ps"><in>__m512,__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_mask_subrsetb_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_subs_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_subs_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_subs_epu16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_subs_epu8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_subsetb_epi32"><in>__m512i,__mmask16,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_mask_svml_round_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_swizzle_epi32"><in>__m512i,__mmask16,__m512i,_MM_SWIZZLE_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_mask_swizzle_epi64"><in>__m512i,__mmask8,__m512i,_MM_SWIZZLE_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_mask_swizzle_pd"><in>__m512d,__mmask8,__m512d,_MM_SWIZZLE_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_mask_swizzle_ps"><in>__m512,__mmask16,__m512,_MM_SWIZZLE_ENUM</in><out>__m512</out></function>
	<function name="_mm512_mask_tand_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_tand_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_tanh_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_tanh_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_tan_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_tan_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_ternarylogic_epi32"><in>__m512i,__mmask16,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_ternarylogic_epi64"><in>__m512i,__mmask8,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_mask_test_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_test_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_test_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_test_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_testn_epi16_mask"><in>__mmask32,__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_mask_testn_epi32_mask"><in>__mmask16,__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_mask_testn_epi64_mask"><in>__mmask8,__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_mask_testn_epi8_mask"><in>__mmask64,__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_mask_trunc_pd"><in>__m512d,__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_trunc_ps"><in>__m512,__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_unpackhi_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpackhi_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpackhi_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpackhi_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpackhi_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_unpackhi_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_unpacklo_epi16"><in>__m512i,__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpacklo_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpacklo_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpacklo_epi8"><in>__m512i,__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_unpacklo_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_unpacklo_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mask_xor_epi32"><in>__m512i,__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_xor_epi64"><in>__m512i,__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mask_xor_pd"><in>__m512d,__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mask_xor_ps"><in>__m512,__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_abs_epi16"><in>__mmask32,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_abs_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_abs_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_abs_epi8"><in>__mmask64,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_add_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_add_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_add_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_add_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_add_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_add_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_add_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_add_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_adds_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_adds_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_adds_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_adds_epu8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_alignr_epi32"><in>__mmask16,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_alignr_epi64"><in>__mmask8,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_alignr_epi8"><in>__mmask64,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_and_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_and_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_andnot_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_andnot_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_andnot_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_andnot_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_and_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_and_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_avg_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_avg_epu8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcastb_epi8"><in>__mmask64,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcastd_epi32"><in>__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcast_f32x2"><in>__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_maskz_broadcast_f32x4"><in>__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_maskz_broadcast_f32x8"><in>__mmask16,__m256</in><out>__m512</out></function>
	<function name="_mm512_maskz_broadcast_f64x2"><in>__mmask8,__m128d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_broadcast_f64x4"><in>__mmask8,__m256d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_broadcast_i32x2"><in>__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcast_i32x4"><in>__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcast_i32x8"><in>__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcast_i64x2"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcast_i64x4"><in>__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcastq_epi64"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_broadcastsd_pd"><in>__mmask8,__m128d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_broadcastss_ps"><in>__mmask16,__m128</in><out>__m512</out></function>
	<function name="_mm512_maskz_broadcastw_epi16"><in>__mmask32,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_compress_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_compress_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_compress_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_compress_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_conflict_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_conflict_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi16_epi32"><in>__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi16_epi64"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi16_epi8"><in>__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtepi32_epi16"><in>__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtepi32_epi64"><in>__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi32_epi8"><in>__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtepi32_pd"><in>__mmask8,__m256i</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvtepi32_ps"><in>__mmask16,__m512i</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvtepi64_epi16"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtepi64_epi32"><in>__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtepi64_epi8"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtepi64_pd"><in>__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvtepi64_ps"><in>__mmask8,__m512i</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvtepi8_epi16"><in>__mmask32,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi8_epi32"><in>__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepi8_epi64"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu16_epi32"><in>__mmask16,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu16_epi64"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu32_epi64"><in>__mmask8,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu32_pd"><in>__mmask8,__m256i</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvtepu32_ps"><in>__mmask16,__m512i</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvtepu64_pd"><in>__mmask8,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvtepu64_ps"><in>__mmask8,__m512i</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvtepu8_epi16"><in>__mmask32,__m256i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu8_epi32"><in>__mmask16,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtepu8_epi64"><in>__mmask8,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtpd_epi32"><in>__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtpd_epi64"><in>__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtpd_epu32"><in>__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtpd_epu64"><in>__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtpd_ps"><in>__mmask8,__m512d</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvtph_ps"><in>__mmask16,__m256i</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvtps_epi32"><in>__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtps_epi64"><in>__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtps_epu32"><in>__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtps_epu64"><in>__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtps_pd"><in>__mmask8,__m256</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvtps_ph"><in>__mmask16,__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvt_roundepi32_ps"><in>__mmask16,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvt_roundepi64_pd"><in>__mmask8,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvt_roundepi64_ps"><in>__mmask8,__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvt_roundepu32_ps"><in>__mmask16,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvt_roundepu64_pd"><in>__mmask8,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvt_roundepu64_ps"><in>__mmask8,__m512i,int</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvt_roundpd_epi32"><in>__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvt_roundpd_epi64"><in>__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundpd_epu32"><in>__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvt_roundpd_epu64"><in>__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundpd_ps"><in>__mmask8,__m512d,int</in><out>__m256</out></function>
	<function name="_mm512_maskz_cvt_roundph_ps"><in>__mmask16,__m256i,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_cvt_roundps_epi32"><in>__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundps_epi64"><in>__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundps_epu32"><in>__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundps_epu64"><in>__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvt_roundps_pd"><in>__mmask8,__m256,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_cvt_roundps_ph"><in>__mmask16,__m512,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtsepi16_epi8"><in>__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtsepi32_epi16"><in>__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtsepi32_epi8"><in>__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtsepi64_epi16"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtsepi64_epi32"><in>__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtsepi64_epi8"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvttpd_epi32"><in>__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvttpd_epi64"><in>__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvttpd_epu32"><in>__mmask8,__m512d</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvttpd_epu64"><in>__mmask8,__m512d</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvttps_epi32"><in>__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvttps_epi64"><in>__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvttps_epu32"><in>__mmask16,__m512</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvttps_epu64"><in>__mmask8,__m256</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundpd_epi32"><in>__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtt_roundpd_epi64"><in>__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundpd_epu32"><in>__mmask8,__m512d,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtt_roundpd_epu64"><in>__mmask8,__m512d,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundps_epi32"><in>__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundps_epi64"><in>__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundps_epu32"><in>__mmask16,__m512,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtt_roundps_epu64"><in>__mmask8,__m256,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_cvtusepi16_epi8"><in>__mmask32,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtusepi32_epi16"><in>__mmask16,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtusepi32_epi8"><in>__mmask16,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtusepi64_epi16"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_cvtusepi64_epi32"><in>__mmask8,__m512i</in><out>__m256i</out></function>
	<function name="_mm512_maskz_cvtusepi64_epi8"><in>__mmask8,__m512i</in><out>__m128i</out></function>
	<function name="_mm512_maskz_dbsad_epu8"><in>__mmask32,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_div_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_div_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_div_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_div_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_exp2a23_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_exp2a23_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_exp2a23_round_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_exp2a23_round_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_expand_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_expand_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_expandloadu_epi32"><in>__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_expandloadu_epi64"><in>__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_expandloadu_pd"><in>__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_maskz_expandloadu_ps"><in>__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_maskz_expand_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_expand_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_extractf32x4_ps"><in>__mmask8,__m512,int</in><out>__m128</out></function>
	<function name="_mm512_maskz_extractf32x8_ps"><in>__mmask8,__m512,int</in><out>__m256</out></function>
	<function name="_mm512_maskz_extractf64x2_pd"><in>__mmask8,__m512d,int</in><out>__m128d</out></function>
	<function name="_mm512_maskz_extractf64x4_pd"><in>__mmask8,__m512d,int</in><out>__m256d</out></function>
	<function name="_mm512_maskz_extracti32x4_epi32"><in>__mmask8,__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_maskz_extracti32x8_epi32"><in>__mmask8,__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_extracti64x2_epi64"><in>__mmask8,__m512i,int</in><out>__m128i</out></function>
	<function name="_mm512_maskz_extracti64x4_epi64"><in>__mmask8,__m512i,int</in><out>__m256i</out></function>
	<function name="_mm512_maskz_fixupimm_pd"><in>__mmask8,__m512d,__m512d,__m512i,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fixupimm_ps"><in>__mmask16,__m512,__m512,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fixupimm_round_pd"><in>__mmask8,__m512d,__m512d,__m512i,int,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fixupimm_round_ps"><in>__mmask16,__m512,__m512,__m512i,int,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmadd_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmadd_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmadd_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmadd_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmaddsub_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmaddsub_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmaddsub_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmaddsub_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmsubadd_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmsubadd_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmsubadd_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmsubadd_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmsub_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmsub_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fmsub_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fmsub_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fnmadd_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fnmadd_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fnmadd_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fnmadd_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_fnmsub_pd"><in>__mmask8,__m512d,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fnmsub_ps"><in>__mmask16,__m512,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_fnmsub_round_pd"><in>__mmask8,__m512d,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_fnmsub_round_ps"><in>__mmask16,__m512,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_getexp_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_getexp_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_getexp_round_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_getexp_round_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_getmant_pd"><in>__mmask8,__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_maskz_getmant_ps"><in>__mmask16,__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m512</out></function>
	<function name="_mm512_maskz_getmant_round_pd"><in>__mmask8,__m512d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_getmant_round_ps"><in>__mmask16,__m512,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_insertf32x4"><in>__mmask16,__m512,__m128,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_insertf32x8"><in>__mmask16,__m512,__m256,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_insertf64x2"><in>__mmask8,__m512d,__m128d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_insertf64x4"><in>__mmask8,__m512d,__m256d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_inserti32x4"><in>__mmask16,__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_inserti32x8"><in>__mmask16,__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_inserti64x2"><in>__mmask8,__m512i,__m128i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_inserti64x4"><in>__mmask8,__m512i,__m256i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_load_epi32"><in>__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_load_epi64"><in>__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_load_pd"><in>__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_maskz_load_ps"><in>__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_maskz_loadu_epi16"><in>__mmask32,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_loadu_epi32"><in>__mmask16,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_loadu_epi64"><in>__mmask8,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_loadu_epi8"><in>__mmask64,void const*</in><out>__m512i</out></function>
	<function name="_mm512_maskz_loadu_pd"><in>__mmask8,void const*</in><out>__m512d</out></function>
	<function name="_mm512_maskz_loadu_ps"><in>__mmask16,void const*</in><out>__m512</out></function>
	<function name="_mm512_maskz_lzcnt_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_lzcnt_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_madd52hi_epu64"><in>__mmask8,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_madd52lo_epu64"><in>__mmask8,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_madd_epi16"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_maddubs_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epu32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epu64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_epu8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_max_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_max_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_max_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_max_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_min_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epu32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epu64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_epu8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_min_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_min_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_min_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_min_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_movedup_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_movehdup_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_moveldup_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_mov_epi16"><in>__mmask32,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mov_epi32"><in>__mmask16,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mov_epi64"><in>__mmask8,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mov_epi8"><in>__mmask64,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mov_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_mov_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_mul_epi32"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mul_epu32"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mulhi_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mulhi_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mulhrs_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mullo_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mullo_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mullo_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_mul_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_mul_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_mul_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_mul_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_multishift_epi64_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_or_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_or_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_or_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_or_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_packs_epi16"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_packs_epi32"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_packus_epi16"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_packus_epi32"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permute_pd"><in>__mmask8,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_permute_ps"><in>__mmask16,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_permutevar_pd"><in>__mmask8,__m512d,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_maskz_permutevar_ps"><in>__mmask16,__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_maskz_permutex2var_epi16"><in>__mmask32,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutex2var_epi32"><in>__mmask16,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutex2var_epi64"><in>__mmask8,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutex2var_epi8"><in>__mmask64,__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutex2var_pd"><in>__mmask8,__m512d,__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_permutex2var_ps"><in>__mmask16,__m512,__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_permutex_epi64"><in>__mmask8,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutex_pd"><in>__mmask8,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_permutexvar_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutexvar_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutexvar_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutexvar_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_permutexvar_pd"><in>__mmask8,__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_permutexvar_ps"><in>__mmask16,__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_range_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_range_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_range_round_pd"><in>__mmask8,__m512d,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_range_round_ps"><in>__mmask16,__m512,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_rcp14_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rcp14_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_rcp28_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rcp28_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_rcp28_round_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rcp28_round_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_reduce_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_reduce_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_reduce_round_pd"><in>__mmask8,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_reduce_round_ps"><in>__mmask16,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_rol_epi32"><in>__mmask16,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_rol_epi64"><in>__mmask8,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_rolv_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_rolv_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_ror_epi32"><in>__mmask16,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_ror_epi64"><in>__mmask8,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_rorv_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_rorv_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_roundscale_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_roundscale_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_roundscale_round_pd"><in>__mmask8,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_roundscale_round_ps"><in>__mmask16,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_rsqrt14_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rsqrt14_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_rsqrt28_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rsqrt28_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_rsqrt28_round_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_rsqrt28_round_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_scalef_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_scalef_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_scalef_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_scalef_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_set1_epi16"><in>__mmask32,short</in><out>__m512i</out></function>
	<function name="_mm512_maskz_set1_epi32"><in>__mmask16,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_set1_epi64"><in>__mmask8,__int64</in><out>__m512i</out></function>
	<function name="_mm512_maskz_set1_epi8"><in>__mmask64,char</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_epi32"><in>__mmask16,__m512i,_MM_PERM_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_f32x4"><in>__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_shuffle_f64x2"><in>__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_shufflehi_epi16"><in>__mmask32,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_i32x4"><in>__mmask16,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_i64x2"><in>__mmask8,__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shufflelo_epi16"><in>__mmask32,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_shuffle_pd"><in>__mmask8,__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_shuffle_ps"><in>__mmask16,__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_maskz_sll_epi16"><in>__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sll_epi32"><in>__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sll_epi64"><in>__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_slli_epi16"><in>__mmask32,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_slli_epi32"><in>__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_slli_epi64"><in>__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sllv_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sllv_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sllv_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sqrt_pd"><in>__mmask8,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_sqrt_ps"><in>__mmask16,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_sqrt_round_pd"><in>__mmask8,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_sqrt_round_ps"><in>__mmask16,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_sra_epi16"><in>__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sra_epi32"><in>__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sra_epi64"><in>__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srai_epi16"><in>__mmask32,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srai_epi32"><in>__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srai_epi64"><in>__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srav_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srav_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srav_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srl_epi16"><in>__mmask32,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srl_epi32"><in>__mmask16,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srl_epi64"><in>__mmask8,__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srli_epi16"><in>__mmask32,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srli_epi32"><in>__mmask16,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srli_epi64"><in>__mmask8,__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srlv_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srlv_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_srlv_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sub_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sub_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sub_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sub_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_sub_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_sub_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_sub_round_pd"><in>__mmask8,__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_maskz_sub_round_ps"><in>__mmask16,__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_maskz_subs_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_subs_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_subs_epu16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_subs_epu8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_ternarylogic_epi32"><in>__mmask16,__m512i,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_ternarylogic_epi64"><in>__mmask8,__m512i,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpackhi_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpackhi_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpackhi_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpackhi_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpackhi_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_unpackhi_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_unpacklo_epi16"><in>__mmask32,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpacklo_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpacklo_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpacklo_epi8"><in>__mmask64,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_unpacklo_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_unpacklo_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maskz_xor_epi32"><in>__mmask16,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_xor_epi64"><in>__mmask8,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_maskz_xor_pd"><in>__mmask8,__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_maskz_xor_ps"><in>__mmask16,__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_maxabs_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_max_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epu64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_max_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_max_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_max_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_max_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_min_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epu64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_min_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_min_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_min_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_min_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_movedup_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_movehdup_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_moveldup_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_movepi16_mask"><in>__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_movepi32_mask"><in>__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_movepi64_mask"><in>__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_movepi8_mask"><in>__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_movm_epi16"><in>__mmask32</in><out>__m512i</out></function>
	<function name="_mm512_movm_epi32"><in>__mmask16</in><out>__m512i</out></function>
	<function name="_mm512_movm_epi64"><in>__mmask8</in><out>__m512i</out></function>
	<function name="_mm512_movm_epi8"><in>__mmask64</in><out>__m512i</out></function>
	<function name="_mm512_mul_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mul_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mulhi_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mulhi_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mulhi_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mulhi_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mulhrs_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mullo_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mullo_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mullo_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mullox_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_mul_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_mul_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_mul_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_mul_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_multishift_epi64_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_nearbyint_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_nearbyint_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_or_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_or_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_or_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_or_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_or_si512"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_packs_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_packs_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_packstorehi_epi32"><in>void*,__m512i</in></function>
	<function name="_mm512_packstorehi_epi64"><in>void*,__m512i</in></function>
	<function name="_mm512_packstorehi_pd"><in>void*,__m512d</in></function>
	<function name="_mm512_packstorehi_ps"><in>void*,__m512</in></function>
	<function name="_mm512_packstorelo_epi32"><in>void*,__m512i</in></function>
	<function name="_mm512_packstorelo_epi64"><in>void*,__m512i</in></function>
	<function name="_mm512_packstorelo_pd"><in>void*,__m512d</in></function>
	<function name="_mm512_packstorelo_ps"><in>void*,__m512</in></function>
	<function name="_mm512_packus_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_packus_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permute4f128_epi32"><in>__m512i,_MM_PERM_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_permute4f128_ps"><in>__m512,_MM_PERM_ENUM</in><out>__m512</out></function>
	<function name="_mm512_permute_pd"><in>__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_permute_ps"><in>__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_permutevar_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutevar_pd"><in>__m512d,__m512i</in><out>__m512d</out></function>
	<function name="_mm512_permutevar_ps"><in>__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_permutex2var_epi16"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutex2var_epi32"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutex2var_epi64"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutex2var_epi8"><in>__m512i,__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutex2var_pd"><in>__m512d,__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_permutex2var_ps"><in>__m512,__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_permutex_epi64"><in>__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_permutex_pd"><in>__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_permutexvar_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutexvar_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutexvar_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutexvar_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_permutexvar_pd"><in>__m512i,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_permutexvar_ps"><in>__m512i,__m512</in><out>__m512</out></function>
	<function name="_mm512_pow_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_pow_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_prefetch_i32extgather_ps"><in>__m512i,void const *,_MM_UPCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_prefetch_i32extscatter_ps"><in>void *,__m512i,_MM_UPCONV_PS_ENUM,int,int</in></function>
	<function name="_mm512_prefetch_i32gather_pd"><in>__m256i,void const*,int,int</in></function>
	<function name="_mm512_prefetch_i32gather_ps"><in>__m512i,void const*,int,int</in></function>
	<function name="_mm512_prefetch_i32scatter_pd"><in>void*,__m256i,int,int</in></function>
	<function name="_mm512_prefetch_i32scatter_ps"><in>void*,__m512i,int,int</in></function>
	<function name="_mm512_prefetch_i64gather_pd"><in>__m512i,void const*,int,int</in></function>
	<function name="_mm512_prefetch_i64gather_ps"><in>__m512i,void const*,int,int</in></function>
	<function name="_mm512_prefetch_i64scatter_pd"><in>void*,__m512i,int,int</in></function>
	<function name="_mm512_prefetch_i64scatter_ps"><in>void*,__m512i,int,int</in></function>
	<function name="_mm512_range_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_range_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_range_round_pd"><in>__m512d,__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_range_round_ps"><in>__m512,__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_rcp14_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_rcp14_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rcp23_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rcp28_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_rcp28_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rcp28_round_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_rcp28_round_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_recip_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_recip_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_reduce_add_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_add_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_add_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_add_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_and_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_and_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_gmax_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_gmax_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_gmin_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_gmin_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_max_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_max_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_max_epu32"><in>__m512i</in><out>unsigned int</out></function>
	<function name="_mm512_reduce_max_epu64"><in>__m512i</in><out>unsigned __int64</out></function>
	<function name="_mm512_reduce_max_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_max_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_min_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_min_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_min_epu32"><in>__m512i</in><out>unsigned int</out></function>
	<function name="_mm512_reduce_min_epu64"><in>__m512i</in><out>unsigned __int64</out></function>
	<function name="_mm512_reduce_min_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_min_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_mul_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_mul_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_mul_pd"><in>__m512d</in><out>double</out></function>
	<function name="_mm512_reduce_mul_ps"><in>__m512</in><out>float</out></function>
	<function name="_mm512_reduce_or_epi32"><in>__m512i</in><out>int</out></function>
	<function name="_mm512_reduce_or_epi64"><in>__m512i</in><out>__int64</out></function>
	<function name="_mm512_reduce_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_reduce_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_reduce_round_pd"><in>__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_reduce_round_ps"><in>__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_rem_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epu32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epu64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rem_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rint_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_rint_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rol_epi32"><in>__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_rol_epi64"><in>__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_rolv_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rolv_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_ror_epi32"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_ror_epi64"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_rorv_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_rorv_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_roundfxpnt_adjust_pd"><in>__m512d,int,_MM_EXP_ADJ_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_roundfxpnt_adjust_ps"><in>__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_round_ps"><in>__m512,int,_MM_EXP_ADJ_ENUM</in><out>__m512</out></function>
	<function name="_mm512_roundscale_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_roundscale_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_roundscale_round_pd"><in>__m512d,int,int</in><out>__m512d</out></function>
	<function name="_mm512_roundscale_round_ps"><in>__m512,int,int</in><out>__m512</out></function>
	<function name="_mm512_rsqrt14_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_rsqrt14_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rsqrt23_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rsqrt28_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_rsqrt28_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_rsqrt28_round_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_rsqrt28_round_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_sad_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sbb_epi32"><in>__m512i,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_sbbr_epi32"><in>__m512i,__mmask16,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_scalef_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_scalef_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_scalef_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_scalef_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_scale_ps"><in>__m512,__m512i</in><out>__m512</out></function>
	<function name="_mm512_scale_round_ps"><in>__m512,__m512i,int</in><out>__m512</out></function>
	<function name="_mm512_set1_epi16"><in>short</in><out>__m512i</out></function>
	<function name="_mm512_set1_epi32"><in>int</in><out>__m512i</out></function>
	<function name="_mm512_set1_epi64"><in>__int64</in><out>__m512i</out></function>
	<function name="_mm512_set1_epi8"><in>char</in><out>__m512i</out></function>
	<function name="_mm512_set1_pd"><in>double</in><out>__m512d</out></function>
	<function name="_mm512_set1_ps"><in>float</in><out>__m512</out></function>
	<function name="_mm512_set4_epi32"><in>int,int,int,int</in><out>__m512i</out></function>
	<function name="_mm512_set4_epi64"><in>__int64,__int64,__int64,__int64</in><out>__m512i</out></function>
	<function name="_mm512_set4_pd"><in>double,double,double,double</in><out>__m512d</out></function>
	<function name="_mm512_set4_ps"><in>float,float,float,float</in><out>__m512</out></function>
	<function name="_mm512_set_epi32"><in>int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int</in><out>__m512i</out></function>
	<function name="_mm512_set_epi64"><in>__int64,__int64,__int64,__int64,__int64,__int64,__int64,__int64</in><out>__m512i</out></function>
	<function name="_mm512_set_pd"><in>double,double,double,double,double,double,double,double</in><out>__m512d</out></function>
	<function name="_mm512_set_ps"><in>float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float</in><out>__m512</out></function>
	<function name="_mm512_setr4_epi32"><in>int,int,int,int</in><out>__m512i</out></function>
	<function name="_mm512_setr4_epi64"><in>__int64,__int64,__int64,__int64</in><out>__m512i</out></function>
	<function name="_mm512_setr4_pd"><in>double,double,double,double</in><out>__m512d</out></function>
	<function name="_mm512_setr4_ps"><in>float,float,float,float</in><out>__m512</out></function>
	<function name="_mm512_setr_epi32"><in>int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int</in><out>__m512i</out></function>
	<function name="_mm512_setr_epi64"><in>__int64,__int64,__int64,__int64,__int64,__int64,__int64,__int64</in><out>__m512i</out></function>
	<function name="_mm512_setr_pd"><in>double,double,double,double,double,double,double,double</in><out>__m512d</out></function>
	<function name="_mm512_setr_ps"><in>float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float</in><out>__m512</out></function>
	<function name="_mm512_setzero_epi32"><out>__m512i</out></function>
	<function name="_mm512_setzero"><out>__m512</out></function>
	<function name="_mm512_setzero_pd"><out>__m512d</out></function>
	<function name="_mm512_setzero_ps"><out>__m512</out></function>
	<function name="_mm512_setzero_si512"><out>__m512i</out></function>
	<function name="_mm512_shuffle_epi32"><in>__m512i,_MM_PERM_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_shuffle_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_shuffle_f32x4"><in>__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_shuffle_f64x2"><in>__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_shufflehi_epi16"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_shuffle_i32x4"><in>__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_shuffle_i64x2"><in>__m512i,__m512i,const int</in><out>__m512i</out></function>
	<function name="_mm512_shufflelo_epi16"><in>__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_shuffle_pd"><in>__m512d,__m512d,const int</in><out>__m512d</out></function>
	<function name="_mm512_shuffle_ps"><in>__m512,__m512,const int</in><out>__m512</out></function>
	<function name="_mm512_sincos_pd"><in>__m512d *,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sincos_ps"><in>__m512 *,__m512</in><out>__m512</out></function>
	<function name="_mm512_sind_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sind_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_sinh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sinh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_sin_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sin_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_sll_epi16"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_sll_epi32"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_sll_epi64"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_slli_epi16"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_slli_epi32"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_slli_epi64"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_sllv_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sllv_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sllv_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sqrt_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sqrt_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_sqrt_round_pd"><in>__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_sqrt_round_ps"><in>__m512,int</in><out>__m512</out></function>
	<function name="_mm512_sra_epi16"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_sra_epi32"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_sra_epi64"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_srai_epi16"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srai_epi32"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srai_epi64"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srav_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_srav_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_srav_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_srl_epi16"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_srl_epi32"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_srl_epi64"><in>__m512i,__m128i</in><out>__m512i</out></function>
	<function name="_mm512_srli_epi16"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srli_epi32"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srli_epi64"><in>__m512i,unsigned int</in><out>__m512i</out></function>
	<function name="_mm512_srlv_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_srlv_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_srlv_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_store_epi32"><in>void*,__m512i</in></function>
	<function name="_mm512_store_epi64"><in>void*,__m512i</in></function>
	<function name="_mm512_storenrngo_pd"><in>void *,__m512d</in></function>
	<function name="_mm512_storenrngo_ps"><in>void *,__m512</in></function>
	<function name="_mm512_storenr_pd"><in>void *,__m512d</in></function>
	<function name="_mm512_storenr_ps"><in>void *,__m512</in></function>
	<function name="_mm512_store_pd"><in>void*,__m512d</in></function>
	<function name="_mm512_store_ps"><in>void*,__m512</in></function>
	<function name="_mm512_store_si512"><in>void*,__m512i</in></function>
	<function name="_mm512_storeu_pd"><in>void*,__m512d</in></function>
	<function name="_mm512_storeu_ps"><in>void*,__m512</in></function>
	<function name="_mm512_storeu_si512"><in>void*,__m512i</in></function>
	<function name="_mm512_stream_load_si512"><in>void const*</in><out>__m512i</out></function>
	<function name="_mm512_stream_pd"><in>void*,__m512d</in></function>
	<function name="_mm512_stream_ps"><in>void*,__m512</in></function>
	<function name="_mm512_stream_si512"><in>void*,__m512i</in></function>
	<function name="_mm512_sub_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sub_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sub_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sub_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sub_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_sub_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_subr_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_sub_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_sub_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_subr_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_subr_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_subr_round_pd"><in>__m512d,__m512d,int</in><out>__m512d</out></function>
	<function name="_mm512_subr_round_ps"><in>__m512,__m512,int</in><out>__m512</out></function>
	<function name="_mm512_subrsetb_epi32"><in>__m512i,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_subs_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_subs_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_subs_epu16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_subs_epu8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_subsetb_epi32"><in>__m512i,__m512i,__mmask16 *</in><out>__m512i</out></function>
	<function name="_mm512_svml_round_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_swizzle_epi32"><in>__m512i,_MM_SWIZZLE_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_swizzle_epi64"><in>__m512i,_MM_SWIZZLE_ENUM</in><out>__m512i</out></function>
	<function name="_mm512_swizzle_pd"><in>__m512d,_MM_SWIZZLE_ENUM</in><out>__m512d</out></function>
	<function name="_mm512_swizzle_ps"><in>__m512,_MM_SWIZZLE_ENUM</in><out>__m512</out></function>
	<function name="_mm512_tand_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_tand_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_tanh_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_tanh_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_tan_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_tan_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_ternarylogic_epi32"><in>__m512i,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_ternarylogic_epi64"><in>__m512i,__m512i,__m512i,int</in><out>__m512i</out></function>
	<function name="_mm512_test_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_test_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_test_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_test_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_testn_epi16_mask"><in>__m512i,__m512i</in><out>__mmask32</out></function>
	<function name="_mm512_testn_epi32_mask"><in>__m512i,__m512i</in><out>__mmask16</out></function>
	<function name="_mm512_testn_epi64_mask"><in>__m512i,__m512i</in><out>__mmask8</out></function>
	<function name="_mm512_testn_epi8_mask"><in>__m512i,__m512i</in><out>__mmask64</out></function>
	<function name="_mm512_trunc_pd"><in>__m512d</in><out>__m512d</out></function>
	<function name="_mm512_trunc_ps"><in>__m512</in><out>__m512</out></function>
	<function name="_mm512_undefined_epi32"><out>__m512i</out></function>
	<function name="_mm512_undefined"><out>__m512</out></function>
	<function name="_mm512_undefined_pd"><out>__m512d</out></function>
	<function name="_mm512_undefined_ps"><out>__m512</out></function>
	<function name="_mm512_unpackhi_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpackhi_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpackhi_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpackhi_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpackhi_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_unpackhi_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_unpacklo_epi16"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpacklo_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpacklo_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpacklo_epi8"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_unpacklo_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_unpacklo_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_xor_epi32"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_xor_epi64"><in>__m512i,__m512i</in><out>__m512i</out></function>
	<function name="_mm512_xor_pd"><in>__m512d,__m512d</in><out>__m512d</out></function>
	<function name="_mm512_xor_ps"><in>__m512,__m512</in><out>__m512</out></function>
	<function name="_mm512_xor_si512"><in>__m512i,__m512i</in><out>__m512i</out></function>

	<function name="_mm_acosh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_acosh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_acos_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_acos_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_add_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_add_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_addsub_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_addsub_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_aesdeclast_si128"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_aesdec_si128"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_aesenclast_si128"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_aesenc_si128"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_aesimc_si128"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_aeskeygenassist_si128"><in>__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_alignr_epi32"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_alignr_epi64"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_alignr_epi8"><in>__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_alignr_pi8"><in>__m64,__m64,int</in><out>__m64</out></function>
	<function name="_mm_asinh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_asinh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_asin_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_asin_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_atan2_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_atan2_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_atanh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_atanh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_atan_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_atan_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_avg_pu16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_avg_pu8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_blend_epi16"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_blend_epi32"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_blend_pd"><in>__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_blend_ps"><in>__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_blendv_epi8"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_blendv_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_blendv_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_broadcastb_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_broadcastd_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_broadcast_i32x2"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_broadcastmb_epi64"><in>__mmask8</in><out>__m128i</out></function>
	<function name="_mm_broadcastmw_epi32"><in>__mmask16</in><out>__m128i</out></function>
	<function name="_mm_broadcastq_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_broadcastsd_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_broadcast_ss"><in>float const *</in><out>__m128</out></function>
	<function name="_mm_broadcastss_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_broadcastw_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_bslli_si128"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_bsrli_si128"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_cbrt_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cbrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cdfnorminv_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cdfnorminv_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cdfnorm_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cdfnorm_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_ceil_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_ceil_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_cexp_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_clevict"><in>const void *,int</in></function>
	<function name="_mm_clflush"><in>void const*</in></function>
	<function name="_mm_clflushopt"><in>void const *</in></function>
	<function name="_mm_clmulepi64_si128"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_clog_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cmp_epi16_mask"><in>__m128i,__m128i,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epi32_mask"><in>__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epi64_mask"><in>__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epi8_mask"><in>__m128i,__m128i,const int</in><out>__mmask16</out></function>
	<function name="_mm_cmp_epu16_mask"><in>__m128i,__m128i,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epu32_mask"><in>__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epu64_mask"><in>__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_cmp_epu8_mask"><in>__m128i,__m128i,const int</in><out>__mmask16</out></function>
	<function name="_mm_cmpeq_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpeq_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpeq_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmplt_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmplt_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmplt_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpestra"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpestrc"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpestri"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpestrm"><in>__m128i,int,__m128i,int,const int</in><out>__m128i</out></function>
	<function name="_mm_cmpestro"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpestrs"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpestrz"><in>__m128i,int,__m128i,int,const int</in><out>int</out></function>
	<function name="_mm_cmpge_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpge_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpge_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpgt_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpgt_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpgt_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpistra"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmpistrc"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmpistri"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmpistrm"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_cmpistro"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmpistrs"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmpistrz"><in>__m128i,__m128i,const int</in><out>int</out></function>
	<function name="_mm_cmple_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmple_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmple_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpneq_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpneq_epu16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epu32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epu64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_cmpneq_epu8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_cmpord_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_cmpord_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_cmpord_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_cmpord_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_cmp_pd"><in>__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_cmp_pd_mask"><in>__m128d,__m128d,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_ps"><in>__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_cmp_ps_mask"><in>__m128,__m128,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_round_sd_mask"><in>__m128d,__m128d,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_round_ss_mask"><in>__m128,__m128,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_sd"><in>__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_cmp_sd_mask"><in>__m128d,__m128d,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmp_ss"><in>__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_cmp_ss_mask"><in>__m128,__m128,const int</in><out>__mmask8</out></function>
	<function name="_mm_cmpunord_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_cmpunord_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_cmpunord_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_cmpunord_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_comieq_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comieq_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comige_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comige_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comigt_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comigt_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comile_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comile_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comilt_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comilt_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comineq_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_comineq_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_comi_round_sd"><in>__m128d,__m128d,const int,const int</in><out>int</out></function>
	<function name="_mm_comi_round_ss"><in>__m128,__m128,const int,const int</in><out>int</out></function>
	<function name="_mm_conflict_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_conflict_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cosd_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cosd_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cosh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cosh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cos_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_cos_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_countbits_32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="_mm_countbits_64"><in>unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_mm_crc32_u16"><in>unsigned int,unsigned short</in><out>unsigned int</out></function>
	<function name="_mm_crc32_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_mm_crc32_u64"><in>unsigned __int64,unsigned __int64</in><out>unsigned __int64</out></function>
	<function name="_mm_crc32_u8"><in>unsigned int,unsigned char</in><out>unsigned int</out></function>
	<function name="_mm_csqrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_cvtepi16_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi16_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi16_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi32_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi32_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi32_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi32_pd"><in>__m128i</in><out>__m128d</out></function>
	<function name="_mm_cvtepi32_ps"><in>__m128i</in><out>__m128</out></function>
	<function name="_mm_cvtepi64_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi64_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi64_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi64_pd"><in>__m128i</in><out>__m128d</out></function>
	<function name="_mm_cvtepi64_ps"><in>__m128i</in><out>__m128</out></function>
	<function name="_mm_cvtepi8_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi8_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepi8_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu16_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu16_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu32_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu32_pd"><in>__m128i</in><out>__m128d</out></function>
	<function name="_mm_cvtepu64_pd"><in>__m128i</in><out>__m128d</out></function>
	<function name="_mm_cvtepu64_ps"><in>__m128i</in><out>__m128</out></function>
	<function name="_mm_cvtepu8_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu8_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtepu8_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvti32_sd"><in>__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_cvti32_ss"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_cvti64_sd"><in>__m128d,__int64</in><out>__m128d</out></function>
	<function name="_mm_cvti64_ss"><in>__m128,__int64</in><out>__m128</out></function>
	<function name="_mm_cvtpd_epi32"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvtpd_epi64"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvtpd_epu32"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvtpd_epu64"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvtpd_pi32"><in>__m128d</in><out>__m64</out></function>
	<function name="_mm_cvtpd_ps"><in>__m128d</in><out>__m128</out></function>
	<function name="_mm_cvtph_ps"><in>__m128i</in><out>__m128</out></function>
	<function name="_mm_cvtpi16_ps"><in>__m64</in><out>__m128</out></function>
	<function name="_mm_cvt_pi2ps"><in>__m128,__m64</in><out>__m128</out></function>
	<function name="_mm_cvtpi32_pd"><in>__m64</in><out>__m128d</out></function>
	<function name="_mm_cvtpi32_ps"><in>__m128,__m64</in><out>__m128</out></function>
	<function name="_mm_cvtpi32x2_ps"><in>__m64,__m64</in><out>__m128</out></function>
	<function name="_mm_cvtpi8_ps"><in>__m64</in><out>__m128</out></function>
	<function name="_mm_cvt_ps2pi"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvtps_epi32"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvtps_epi64"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvtps_epu32"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvtps_epu64"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvtps_pd"><in>__m128</in><out>__m128d</out></function>
	<function name="_mm_cvtps_ph"><in>__m128,int</in><out>__m128i</out></function>
	<function name="_mm_cvtps_pi16"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvtps_pi32"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvtps_pi8"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvtpu16_ps"><in>__m64</in><out>__m128</out></function>
	<function name="_mm_cvtpu8_ps"><in>__m64</in><out>__m128</out></function>
	<function name="_mm_cvt_roundi32_ss"><in>__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundi64_sd"><in>__m128d,__int64,int</in><out>__m128d</out></function>
	<function name="_mm_cvt_roundi64_ss"><in>__m128,__int64,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundsd_i32"><in>__m128d,int</in><out>int</out></function>
	<function name="_mm_cvt_roundsd_i64"><in>__m128d,int</in><out>__int64</out></function>
	<function name="_mm_cvt_roundsd_si32"><in>__m128d,int</in><out>int</out></function>
	<function name="_mm_cvt_roundsd_si64"><in>__m128d,int</in><out>__int64</out></function>
	<function name="_mm_cvt_roundsd_ss"><in>__m128,__m128d,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundsd_u32"><in>__m128d,int</in><out>unsigned int</out></function>
	<function name="_mm_cvt_roundsd_u64"><in>__m128d,int</in><out>unsigned __int64</out></function>
	<function name="_mm_cvt_roundsi32_ss"><in>__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundsi64_sd"><in>__m128d,__int64,int</in><out>__m128d</out></function>
	<function name="_mm_cvt_roundsi64_ss"><in>__m128,__int64,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundss_i32"><in>__m128,int</in><out>int</out></function>
	<function name="_mm_cvt_roundss_i64"><in>__m128,int</in><out>__int64</out></function>
	<function name="_mm_cvt_roundss_sd"><in>__m128d,__m128,int</in><out>__m128d</out></function>
	<function name="_mm_cvt_roundss_si32"><in>__m128,int</in><out>int</out></function>
	<function name="_mm_cvt_roundss_si64"><in>__m128,int</in><out>__int64</out></function>
	<function name="_mm_cvt_roundss_u32"><in>__m128,int</in><out>unsigned int</out></function>
	<function name="_mm_cvt_roundss_u64"><in>__m128,int</in><out>unsigned __int64</out></function>
	<function name="_mm_cvt_roundu32_ss"><in>__m128,unsigned int,int</in><out>__m128</out></function>
	<function name="_mm_cvt_roundu64_sd"><in>__m128d,unsigned __int64,int</in><out>__m128d</out></function>
	<function name="_mm_cvt_roundu64_ss"><in>__m128,unsigned __int64,int</in><out>__m128</out></function>
	<function name="_mm_cvtsd_f64"><in>__m128d</in><out>double</out></function>
	<function name="_mm_cvtsd_i32"><in>__m128d</in><out>int</out></function>
	<function name="_mm_cvtsd_i64"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvtsd_si32"><in>__m128d</in><out>int</out></function>
	<function name="_mm_cvtsd_si64"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvtsd_si64x"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvtsd_ss"><in>__m128,__m128d</in><out>__m128</out></function>
	<function name="_mm_cvtsd_u32"><in>__m128d</in><out>unsigned int</out></function>
	<function name="_mm_cvtsd_u64"><in>__m128d</in><out>unsigned __int64</out></function>
	<function name="_mm_cvtsepi16_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtsepi32_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtsepi32_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtsepi64_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtsepi64_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtsepi64_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvt_si2ss"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_cvtsi32_sd"><in>__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_cvtsi32_si128"><in>int</in><out>__m128i</out></function>
	<function name="_mm_cvtsi32_ss"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_cvtsi64_sd"><in>__m128d,__int64</in><out>__m128d</out></function>
	<function name="_mm_cvtsi64_si128"><in>__int64</in><out>__m128i</out></function>
	<function name="_mm_cvtsi64_ss"><in>__m128,__int64</in><out>__m128</out></function>
	<function name="_mm_cvtsi64x_sd"><in>__m128d,__int64</in><out>__m128d</out></function>
	<function name="_mm_cvtsi64x_si128"><in>__int64</in><out>__m128i</out></function>
	<function name="_mm_cvt_ss2si"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvtss_f32"><in>__m128</in><out>float</out></function>
	<function name="_mm_cvtss_i32"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvtss_i64"><in>__m128</in><out>__int64</out></function>
	<function name="_mm_cvtss_sd"><in>__m128d,__m128</in><out>__m128d</out></function>
	<function name="_mm_cvtss_si32"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvtss_si64"><in>__m128</in><out>__int64</out></function>
	<function name="_mm_cvtss_u32"><in>__m128</in><out>unsigned int</out></function>
	<function name="_mm_cvtss_u64"><in>__m128</in><out>unsigned __int64</out></function>
	<function name="_mm_cvttpd_epi32"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvttpd_epi64"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvttpd_epu32"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvttpd_epu64"><in>__m128d</in><out>__m128i</out></function>
	<function name="_mm_cvttpd_pi32"><in>__m128d</in><out>__m64</out></function>
	<function name="_mm_cvtt_ps2pi"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvttps_epi32"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvttps_epi64"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvttps_epu32"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvttps_epu64"><in>__m128</in><out>__m128i</out></function>
	<function name="_mm_cvttps_pi32"><in>__m128</in><out>__m64</out></function>
	<function name="_mm_cvtt_roundsd_i32"><in>__m128d,int</in><out>int</out></function>
	<function name="_mm_cvtt_roundsd_i64"><in>__m128d,int</in><out>__int64</out></function>
	<function name="_mm_cvtt_roundsd_si32"><in>__m128d,int</in><out>int</out></function>
	<function name="_mm_cvtt_roundsd_si64"><in>__m128d,int</in><out>__int64</out></function>
	<function name="_mm_cvtt_roundsd_u32"><in>__m128d,int</in><out>unsigned int</out></function>
	<function name="_mm_cvtt_roundsd_u64"><in>__m128d,int</in><out>unsigned __int64</out></function>
	<function name="_mm_cvtt_roundss_i32"><in>__m128,int</in><out>int</out></function>
	<function name="_mm_cvtt_roundss_i64"><in>__m128,int</in><out>__int64</out></function>
	<function name="_mm_cvtt_roundss_si32"><in>__m128,int</in><out>int</out></function>
	<function name="_mm_cvtt_roundss_si64"><in>__m128,int</in><out>__int64</out></function>
	<function name="_mm_cvtt_roundss_u32"><in>__m128,int</in><out>unsigned int</out></function>
	<function name="_mm_cvtt_roundss_u64"><in>__m128,int</in><out>unsigned __int64</out></function>
	<function name="_mm_cvttsd_i32"><in>__m128d</in><out>int</out></function>
	<function name="_mm_cvttsd_i64"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvttsd_si32"><in>__m128d</in><out>int</out></function>
	<function name="_mm_cvttsd_si64"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvttsd_si64x"><in>__m128d</in><out>__int64</out></function>
	<function name="_mm_cvttsd_u32"><in>__m128d</in><out>unsigned int</out></function>
	<function name="_mm_cvttsd_u64"><in>__m128d</in><out>unsigned __int64</out></function>
	<function name="_mm_cvtt_ss2si"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvttss_i32"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvttss_i64"><in>__m128</in><out>__int64</out></function>
	<function name="_mm_cvttss_si32"><in>__m128</in><out>int</out></function>
	<function name="_mm_cvttss_si64"><in>__m128</in><out>__int64</out></function>
	<function name="_mm_cvttss_u32"><in>__m128</in><out>unsigned int</out></function>
	<function name="_mm_cvttss_u64"><in>__m128</in><out>unsigned __int64</out></function>
	<function name="_mm_cvtu32_sd"><in>__m128d,unsigned int</in><out>__m128d</out></function>
	<function name="_mm_cvtu32_ss"><in>__m128,unsigned int</in><out>__m128</out></function>
	<function name="_mm_cvtu64_sd"><in>__m128d,unsigned __int64</in><out>__m128d</out></function>
	<function name="_mm_cvtu64_ss"><in>__m128,unsigned __int64</in><out>__m128</out></function>
	<function name="_mm_cvtusepi16_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtusepi32_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtusepi32_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtusepi64_epi16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtusepi64_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_cvtusepi64_epi8"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_dbsad_epu8"><in>__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_delay_32"><in>unsigned int</in></function>
	<function name="_mm_delay_64"><in>unsigned __int64</in></function>
	<function name="_mm_div_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_div_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_dp_pd"><in>__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_dp_ps"><in>__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_erfcinv_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_erfcinv_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_erfc_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_erfc_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_erfinv_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_erfinv_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_erf_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_erf_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_exp10_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_exp10_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_exp2_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_exp2_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_expm1_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_expm1_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_exp_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_exp_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_fixupimm_pd"><in>__m128d,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_fixupimm_ps"><in>__m128,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_fixupimm_round_sd"><in>__m128d,__m128d,__m128i,int,int</in><out>__m128d</out></function>
	<function name="_mm_fixupimm_round_ss"><in>__m128,__m128,__m128i,int,int</in><out>__m128</out></function>
	<function name="_mm_fixupimm_sd"><in>__m128d,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_fixupimm_ss"><in>__m128,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_floor_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_floor_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmadd_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmadd_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmadd_sd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmadd_ss"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmaddsub_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmaddsub_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmsubadd_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmsubadd_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmsub_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmsub_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fmsub_sd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fmsub_ss"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fnmadd_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fnmadd_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fnmadd_sd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fnmadd_ss"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fnmsub_pd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fnmsub_ps"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fnmsub_sd"><in>__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_fnmsub_ss"><in>__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_fpclass_pd_mask"><in>__m128d,int</in><out>__mmask8</out></function>
	<function name="_mm_fpclass_ps_mask"><in>__m128,int</in><out>__mmask8</out></function>
	<function name="_mm_fpclass_sd_mask"><in>__m128d,int</in><out>__mmask8</out></function>
	<function name="_mm_fpclass_ss_mask"><in>__m128,int</in><out>__mmask8</out></function>
	<function name="_mm_free"><in>void *</in></function>
	<function name="_mm_getcsr"><out>unsigned int</out></function>
	<function name="_MM_GET_EXCEPTION_MASK"><out>unsigned int</out></function>
	<function name="_MM_GET_EXCEPTION_STATE"><out>unsigned int</out></function>
	<function name="_mm_getexp_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_getexp_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_getexp_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_getexp_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_getexp_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_getexp_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_MM_GET_FLUSH_ZERO_MODE"><out>unsigned int</out></function>
	<function name="_mm_getmant_pd"><in>__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_getmant_ps"><in>__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_mm_getmant_round_sd"><in>__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128d</out></function>
	<function name="_mm_getmant_round_ss"><in>__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128</out></function>
	<function name="_mm_getmant_sd"><in>__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_getmant_ss"><in>__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_MM_GET_ROUNDING_MODE"><out>unsigned int</out></function>
	<function name="_mm_hadd_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hadd_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hadd_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_hadd_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hadd_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hadd_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_hadds_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hadds_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hsub_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hsub_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hsub_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_hsub_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hsub_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hsub_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_hsubs_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_hsubs_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_hypot_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_hypot_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_i32gather_epi32"><in>int const*,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_i32gather_epi64"><in>__int64 const*,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_i32gather_pd"><in>double const*,__m128i,const int</in><out>__m128d</out></function>
	<function name="_mm_i32gather_ps"><in>float const*,__m128i,const int</in><out>__m128</out></function>
	<function name="_mm_i32scatter_epi32"><in>void*,__m128i,__m128i,const int</in></function>
	<function name="_mm_i32scatter_epi64"><in>void*,__m128i,__m128i,const int</in></function>
	<function name="_mm_i32scatter_pd"><in>void*,__m128i,__m128d,const int</in></function>
	<function name="_mm_i32scatter_ps"><in>void*,__m128i,__m128,const int</in></function>
	<function name="_mm_i64gather_epi32"><in>int const*,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_i64gather_epi64"><in>__int64 const*,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_i64gather_pd"><in>double const*,__m128i,const int</in><out>__m128d</out></function>
	<function name="_mm_i64gather_ps"><in>float const*,__m128i,const int</in><out>__m128</out></function>
	<function name="_mm_i64scatter_epi32"><in>void*,__m128i,__m128i,const int</in></function>
	<function name="_mm_i64scatter_epi64"><in>void*,__m128i,__m128i,const int</in></function>
	<function name="_mm_i64scatter_pd"><in>void*,__m128i,__m128d,const int</in></function>
	<function name="_mm_i64scatter_ps"><in>void*,__m128i,__m128,const int</in></function>
	<function name="_mm_idiv_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_idivrem_epi32"><in>__m128i *,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_invcbrt_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_invcbrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_invsqrt_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_invsqrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_irem_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_lfence"></function>
	<function name="_mm_loadh_pd"><in>__m128d,double const*</in><out>__m128d</out></function>
	<function name="_mm_loadh_pi"><in>__m128,__m64 const*</in><out>__m128</out></function>
	<function name="_mm_loadl_epi64"><in>__m128i const*</in><out>__m128i</out></function>
	<function name="_mm_loadl_pd"><in>__m128d,double const*</in><out>__m128d</out></function>
	<function name="_mm_loadl_pi"><in>__m128,__m64 const*</in><out>__m128</out></function>
	<function name="_mm_loadr_pd"><in>double const*</in><out>__m128d</out></function>
	<function name="_mm_loadr_ps"><in>float const*</in><out>__m128</out></function>
	<function name="_mm_log10_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_log10_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_log1p_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_log1p_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_logb_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_logb_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_log_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_log_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_lzcnt_epi32"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_lzcnt_epi64"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_madd52hi_epu64"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_madd52lo_epu64"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_madd_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_madd_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_maddubs_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maddubs_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_malloc"><in>size_t,size_t</in><out>void*</out></function>
	<function name="_mm_mask2_permutex2var_epi16"><in>__m128i,__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask2_permutex2var_epi32"><in>__m128i,__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask2_permutex2var_epi64"><in>__m128i,__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask2_permutex2var_epi8"><in>__m128i,__m128i,__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask2_permutex2var_pd"><in>__m128d,__m128i,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask2_permutex2var_ps"><in>__m128,__m128i,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask3_fmadd_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmadd_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fmadd_round_sd"><in>__m128d,__m128d,__m128d,__mmask8,int</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmadd_round_ss"><in>__m128,__m128,__m128,__mmask8,int</in><out>__m128</out></function>
	<function name="_mm_mask3_fmadd_sd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmadd_ss"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fmaddsub_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmaddsub_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fmsubadd_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmsubadd_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fmsub_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmsub_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fmsub_round_sd"><in>__m128d,__m128d,__m128d,__mmask8,int</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmsub_round_ss"><in>__m128,__m128,__m128,__mmask8,int</in><out>__m128</out></function>
	<function name="_mm_mask3_fmsub_sd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fmsub_ss"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmadd_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmadd_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmadd_round_sd"><in>__m128d,__m128d,__m128d,__mmask8,int</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmadd_round_ss"><in>__m128,__m128,__m128,__mmask8,int</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmadd_sd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmadd_ss"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmsub_pd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmsub_ps"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmsub_round_sd"><in>__m128d,__m128d,__m128d,__mmask8,int</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmsub_round_ss"><in>__m128,__m128,__m128,__mmask8,int</in><out>__m128</out></function>
	<function name="_mm_mask3_fnmsub_sd"><in>__m128d,__m128d,__m128d,__mmask8</in><out>__m128d</out></function>
	<function name="_mm_mask3_fnmsub_ss"><in>__m128,__m128,__m128,__mmask8</in><out>__m128</out></function>
	<function name="_mm_mask_abs_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_abs_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_abs_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_abs_epi8"><in>__m128i,__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_add_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_add_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_add_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_add_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_adds_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_adds_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_adds_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_adds_epu8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_add_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_alignr_epi32"><in>__m128i,__mmask8,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_alignr_epi64"><in>__m128i,__mmask8,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_alignr_epi8"><in>__m128i,__mmask16,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_and_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_and_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_andnot_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_andnot_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_andnot_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_andnot_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_and_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_and_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_avg_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_avg_epu8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_blend_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_blend_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_blend_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_blend_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_blend_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_blend_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_broadcastb_epi8"><in>__m128i,__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_broadcastd_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_broadcast_i32x2"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_broadcastq_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_broadcastss_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_broadcastw_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cmp_epi16_mask"><in>__mmask8,__m128i,__m128i,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epi32_mask"><in>__mmask8,__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epi64_mask"><in>__mmask8,__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epi8_mask"><in>__mmask16,__m128i,__m128i,const int</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmp_epu16_mask"><in>__mmask8,__m128i,__m128i,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epu32_mask"><in>__mmask8,__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epu64_mask"><in>__mmask8,__m128i,__m128i,const _MM_CMPINT_ENUM</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_epu8_mask"><in>__mmask16,__m128i,__m128i,const int</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpeq_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpeq_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpeq_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpge_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpge_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpge_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpgt_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpgt_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpgt_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmple_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmple_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmple_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmplt_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmplt_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmplt_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpneq_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmpneq_epu16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epu32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epu64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmpneq_epu8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_cmp_pd_mask"><in>__mmask8,__m128d,__m128d,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_ps_mask"><in>__mmask8,__m128,__m128,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_round_sd_mask"><in>__mmask8,__m128d,__m128d,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_round_ss_mask"><in>__mmask8,__m128,__m128,const int,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_sd_mask"><in>__mmask8,__m128d,__m128d,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_cmp_ss_mask"><in>__mmask8,__m128,__m128,const int</in><out>__mmask8</out></function>
	<function name="_mm_mask_compress_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_compress_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_compress_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_compress_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_compressstoreu_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_compressstoreu_epi64"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_compressstoreu_pd"><in>void*,__mmask8,__m128d</in></function>
	<function name="_mm_mask_compressstoreu_ps"><in>void*,__mmask8,__m128</in></function>
	<function name="_mm_mask_conflict_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_conflict_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi16_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi16_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi16_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi16_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi32_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi32_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi32_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi32_pd"><in>__m128d,__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_cvtepi32_ps"><in>__m128,__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_cvtepi32_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi32_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi64_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi64_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi64_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi64_pd"><in>__m128d,__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_cvtepi64_ps"><in>__m128,__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_cvtepi64_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi64_storeu_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi64_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtepi8_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi8_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepi8_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu16_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu16_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu32_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu32_pd"><in>__m128d,__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_cvtepu64_pd"><in>__m128d,__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_cvtepu64_ps"><in>__m128,__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_cvtepu8_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu8_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtepu8_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtpd_epi32"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtpd_epi64"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtpd_epu32"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtpd_epu64"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtpd_ps"><in>__m128,__mmask8,__m128d</in><out>__m128</out></function>
	<function name="_mm_mask_cvtph_ps"><in>__m128,__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_cvtps_epi32"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtps_epi64"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtps_epu32"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtps_epu64"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtps_ph"><in>__m128i,__mmask8,__m128,int</in><out>__m128i</out></function>
	<function name="_mm_mask_cvt_roundps_ph"><in>__m128i,__mmask8,__m128,int</in><out>__m128i</out></function>
	<function name="_mm_mask_cvt_roundsd_ss"><in>__m128,__mmask8,__m128,__m128d,int</in><out>__m128</out></function>
	<function name="_mm_mask_cvt_roundss_sd"><in>__m128d,__mmask8,__m128d,__m128,int</in><out>__m128d</out></function>
	<function name="_mm_mask_cvtsd_ss"><in>__m128,__mmask8,__m128,__m128d</in><out>__m128</out></function>
	<function name="_mm_mask_cvtsepi16_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi16_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtsepi32_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi32_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi32_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtsepi32_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtsepi64_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi64_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi64_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtsepi64_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtsepi64_storeu_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtsepi64_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtss_sd"><in>__m128d,__mmask8,__m128d,__m128</in><out>__m128d</out></function>
	<function name="_mm_mask_cvttpd_epi32"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttpd_epi64"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttpd_epu32"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttpd_epu64"><in>__m128i,__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttps_epi32"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttps_epi64"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttps_epu32"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvttps_epu64"><in>__m128i,__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi16_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi16_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtusepi32_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi32_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi32_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtusepi32_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtusepi64_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi64_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi64_epi8"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_cvtusepi64_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtusepi64_storeu_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_cvtusepi64_storeu_epi8"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_dbsad_epu8"><in>__m128i,__mmask8,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_div_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_div_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_div_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_div_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_div_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_div_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_expand_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_expand_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_expandloadu_epi32"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_expandloadu_epi64"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_expandloadu_pd"><in>__m128d,__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_mask_expandloadu_ps"><in>__m128,__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_mask_expand_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_expand_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fixupimm_pd"><in>__m128d,__mmask8,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fixupimm_ps"><in>__m128,__mmask8,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_mask_fixupimm_round_sd"><in>__m128d,__mmask8,__m128d,__m128i,int,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fixupimm_round_ss"><in>__m128,__mmask8,__m128,__m128i,int,int</in><out>__m128</out></function>
	<function name="_mm_mask_fixupimm_sd"><in>__m128d,__mmask8,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fixupimm_ss"><in>__m128,__mmask8,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_mask_fmadd_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmadd_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fmadd_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fmadd_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_fmadd_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmadd_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fmaddsub_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmaddsub_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fmsubadd_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmsubadd_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fmsub_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmsub_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fmsub_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fmsub_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_fmsub_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fmsub_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fnmadd_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmadd_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fnmadd_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmadd_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_fnmadd_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmadd_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fnmsub_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmsub_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fnmsub_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmsub_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_fnmsub_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_fnmsub_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_fpclass_pd_mask"><in>__mmask8,__m128d,int</in><out>__mmask8</out></function>
	<function name="_mm_mask_fpclass_ps_mask"><in>__mmask8,__m128,int</in><out>__mmask8</out></function>
	<function name="_mm_mask_fpclass_sd_mask"><in>__mmask8,__m128d,int</in><out>__mmask8</out></function>
	<function name="_mm_mask_fpclass_ss_mask"><in>__mmask8,__m128,int</in><out>__mmask8</out></function>
	<function name="_mm_mask_getexp_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_getexp_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_getexp_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_getexp_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_getexp_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_getexp_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_getmant_pd"><in>__m128d,__mmask8,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_mask_getmant_ps"><in>__m128,__mmask8,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_mm_mask_getmant_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128d</out></function>
	<function name="_mm_mask_getmant_round_ss"><in>__m128,__mmask8,__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128</out></function>
	<function name="_mm_mask_getmant_sd"><in>__m128d,__mmask8,__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_mask_getmant_ss"><in>__m128,__mmask8,__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_mm_mask_i32gather_epi32"><in>__m128i,int const*,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_i32gather_epi64"><in>__m128i,__int64 const*,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_i32gather_pd"><in>__m128d,double const*,__m128i,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_i32gather_ps"><in>__m128,float const*,__m128i,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_mask_i32scatter_epi32"><in>void*,__mmask8,__m128i,__m128i,const int</in></function>
	<function name="_mm_mask_i32scatter_epi64"><in>void*,__mmask8,__m128i,__m128i,const int</in></function>
	<function name="_mm_mask_i32scatter_pd"><in>void*,__mmask8,__m128i,__m128d,const int</in></function>
	<function name="_mm_mask_i32scatter_ps"><in>void*,__mmask8,__m128i,__m128,const int</in></function>
	<function name="_mm_mask_i64gather_epi32"><in>__m128i,int const*,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_i64gather_epi64"><in>__m128i,__int64 const*,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_i64gather_pd"><in>__m128d,double const*,__m128i,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_i64gather_ps"><in>__m128,float const*,__m128i,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_mask_i64scatter_epi32"><in>void*,__mmask8,__m128i,__m128i,const int</in></function>
	<function name="_mm_mask_i64scatter_epi64"><in>void*,__mmask8,__m128i,__m128i,const int</in></function>
	<function name="_mm_mask_i64scatter_pd"><in>void*,__mmask8,__m128i,__m128d,const int</in></function>
	<function name="_mm_mask_i64scatter_ps"><in>void*,__mmask8,__m128i,__m128,const int</in></function>
	<function name="_mm_maskload_epi32"><in>int const*,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_load_epi32"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskload_epi64"><in>__int64 const*,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_load_epi64"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskload_pd"><in>double const *,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_load_pd"><in>__m128d,__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_maskload_ps"><in>float const *,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_load_ps"><in>__m128,__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_mask_load_sd"><in>__m128d,__mmask8,const double*</in><out>__m128d</out></function>
	<function name="_mm_mask_load_ss"><in>__m128,__mmask8,const float*</in><out>__m128</out></function>
	<function name="_mm_mask_loadu_epi16"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_loadu_epi32"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_loadu_epi64"><in>__m128i,__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_loadu_epi8"><in>__m128i,__mmask16,void const*</in><out>__m128i</out></function>
	<function name="_mm_mask_loadu_pd"><in>__m128d,__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_mask_loadu_ps"><in>__m128,__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_mask_lzcnt_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_lzcnt_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_madd52hi_epu64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_madd52lo_epu64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_madd_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_maddubs_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epu32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epu64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_epu8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_max_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_max_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_max_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_max_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_max_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_max_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_min_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epu32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epu64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_epu8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_min_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_min_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_min_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_min_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_min_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_min_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_movedup_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_movehdup_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_moveldup_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_mov_epi16"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mov_epi32"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mov_epi64"><in>__m128i,__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mov_epi8"><in>__m128i,__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_move_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskmove_si64"><in>__m64,__m64,char*</in></function>
	<function name="_mm_mask_move_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskmoveu_si128"><in>__m128i,__m128i,char*</in></function>
	<function name="_mm_mask_mov_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_mov_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_mul_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mul_epu32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mulhi_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mulhi_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mulhrs_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mullo_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mullo_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mullo_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_mul_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_mul_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_mul_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_mul_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_mul_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_mul_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_multishift_epi64_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_or_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_or_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_or_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_or_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_packs_epi16"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_packs_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_packus_epi16"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_packus_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permute_pd"><in>__m128d,__mmask8,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_permute_ps"><in>__m128,__mmask8,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_mask_permutevar_pd"><in>__m128d,__mmask8,__m128d,__m128i</in><out>__m128d</out></function>
	<function name="_mm_mask_permutevar_ps"><in>__m128,__mmask8,__m128,__m128i</in><out>__m128</out></function>
	<function name="_mm_mask_permutex2var_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permutex2var_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permutex2var_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permutex2var_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permutex2var_pd"><in>__m128d,__mmask8,__m128i,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_permutex2var_ps"><in>__m128,__mmask8,__m128i,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_permutexvar_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_permutexvar_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_range_pd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_range_ps"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_range_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_mask_range_round_ss"><in>__m128,__mmask8,__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_mask_range_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_range_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_rcp14_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rcp14_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_rcp14_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rcp14_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_rcp28_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_rcp28_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_rcp28_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rcp28_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_reduce_pd"><in>__m128d,__mmask8,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_reduce_ps"><in>__m128,__mmask8,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_reduce_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_mask_reduce_round_ss"><in>__m128,__mmask8,__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_mask_reduce_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_reduce_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_rol_epi32"><in>__m128i,__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_rol_epi64"><in>__m128i,__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_rolv_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_rolv_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_ror_epi32"><in>__m128i,__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_ror_epi64"><in>__m128i,__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mask_rorv_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_rorv_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_roundscale_pd"><in>__m128d,__mmask8,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_roundscale_ps"><in>__m128,__mmask8,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_roundscale_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,const int,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_roundscale_round_ss"><in>__m128,__mmask8,__m128,__m128,const int,const int</in><out>__m128</out></function>
	<function name="_mm_mask_roundscale_sd"><in>__m128d,__mmask8,__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_roundscale_ss"><in>__m128,__mmask8,__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_mask_rsqrt14_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rsqrt14_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_rsqrt14_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rsqrt14_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_rsqrt28_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_rsqrt28_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_rsqrt28_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_rsqrt28_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_scalef_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_scalef_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_scalef_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_scalef_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_scalef_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_scalef_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_set1_epi16"><in>__m128i,__mmask8,short</in><out>__m128i</out></function>
	<function name="_mm_mask_set1_epi32"><in>__m128i,__mmask8,int</in><out>__m128i</out></function>
	<function name="_mm_mask_set1_epi64"><in>__m128i,__mmask8,__int64</in><out>__m128i</out></function>
	<function name="_mm_mask_set1_epi8"><in>__m128i,__mmask16,char</in><out>__m128i</out></function>
	<function name="_mm_mask_shuffle_epi32"><in>__m128i,__mmask8,__m128i,_MM_PERM_ENUM</in><out>__m128i</out></function>
	<function name="_mm_mask_shuffle_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_shufflehi_epi16"><in>__m128i,__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_shufflelo_epi16"><in>__m128i,__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_shuffle_pd"><in>__m128d,__mmask8,__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_mask_shuffle_ps"><in>__m128,__mmask8,__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_mask_sll_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sll_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sll_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_slli_epi16"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_slli_epi32"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_slli_epi64"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_sllv_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sllv_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sllv_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sqrt_pd"><in>__m128d,__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_sqrt_ps"><in>__m128,__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_sqrt_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_sqrt_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_sqrt_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_sqrt_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_sra_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sra_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sra_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srai_epi16"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_srai_epi32"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_srai_epi64"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_srav_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srav_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srav_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srl_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srl_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srl_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srli_epi16"><in>__m128i,__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_srli_epi32"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_srli_epi64"><in>__m128i,__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_mask_srlv_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srlv_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_srlv_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskstore_epi32"><in>int*,__m128i,__m128i</in></function>
	<function name="_mm_mask_store_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_maskstore_epi64"><in>__int64*,__m128i,__m128i</in></function>
	<function name="_mm_mask_store_epi64"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_maskstore_pd"><in>double *,__m128i,__m128d</in></function>
	<function name="_mm_mask_store_pd"><in>void*,__mmask8,__m128d</in></function>
	<function name="_mm_maskstore_ps"><in>float *,__m128i,__m128</in></function>
	<function name="_mm_mask_store_ps"><in>void*,__mmask8,__m128</in></function>
	<function name="_mm_mask_store_sd"><in>double*,__mmask8,__m128d</in></function>
	<function name="_mm_mask_store_ss"><in>float*,__mmask8,__m128</in></function>
	<function name="_mm_mask_storeu_epi16"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_storeu_epi32"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_storeu_epi64"><in>void*,__mmask8,__m128i</in></function>
	<function name="_mm_mask_storeu_epi8"><in>void*,__mmask16,__m128i</in></function>
	<function name="_mm_mask_storeu_pd"><in>void*,__mmask8,__m128d</in></function>
	<function name="_mm_mask_storeu_ps"><in>void*,__mmask8,__m128</in></function>
	<function name="_mm_mask_sub_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sub_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sub_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sub_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sub_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_sub_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_sub_round_sd"><in>__m128d,__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mask_sub_round_ss"><in>__m128,__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mask_sub_sd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_subs_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_subs_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_subs_epu16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_subs_epu8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_sub_ss"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_ternarylogic_epi32"><in>__m128i,__mmask8,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_ternarylogic_epi64"><in>__m128i,__mmask8,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_mask_test_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_test_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_test_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_test_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_testn_epi16_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_testn_epi32_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_testn_epi64_mask"><in>__mmask8,__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_mask_testn_epi8_mask"><in>__mmask16,__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_mask_unpackhi_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpackhi_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpackhi_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpackhi_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpackhi_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_unpackhi_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_unpacklo_epi16"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpacklo_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpacklo_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpacklo_epi8"><in>__m128i,__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_unpacklo_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_unpacklo_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_mask_xor_epi32"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_xor_epi64"><in>__m128i,__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mask_xor_pd"><in>__m128d,__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_mask_xor_ps"><in>__m128,__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_abs_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_abs_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_abs_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_abs_epi8"><in>__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_add_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_add_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_add_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_add_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_adds_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_adds_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_adds_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_adds_epu8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_add_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_alignr_epi32"><in>__mmask8,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_alignr_epi64"><in>__mmask8,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_alignr_epi8"><in>__mmask16,__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_and_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_and_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_andnot_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_andnot_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_andnot_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_andnot_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_and_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_and_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_avg_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_avg_epu8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_broadcastb_epi8"><in>__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_broadcastd_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_broadcast_i32x2"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_broadcastq_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_broadcastss_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_broadcastw_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_compress_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_compress_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_compress_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_compress_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_conflict_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_conflict_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi16_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi16_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi16_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi32_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi32_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi32_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi32_pd"><in>__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvtepi32_ps"><in>__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtepi64_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi64_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi64_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi64_pd"><in>__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvtepi64_ps"><in>__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtepi8_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi8_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepi8_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu16_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu16_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu32_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu32_pd"><in>__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvtepu64_pd"><in>__mmask8,__m128i</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvtepu64_ps"><in>__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtepu8_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu8_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtepu8_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtpd_epi32"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtpd_epi64"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtpd_epu32"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtpd_epu64"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtpd_ps"><in>__mmask8,__m128d</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtph_ps"><in>__mmask8,__m128i</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtps_epi32"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtps_epi64"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtps_epu32"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtps_epu64"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtps_ph"><in>__mmask8,__m128,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvt_roundps_ph"><in>__mmask8,__m128,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvt_roundsd_ss"><in>__mmask8,__m128,__m128d,int</in><out>__m128</out></function>
	<function name="_mm_maskz_cvt_roundss_sd"><in>__mmask8,__m128d,__m128,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvtsd_ss"><in>__mmask8,__m128,__m128d</in><out>__m128</out></function>
	<function name="_mm_maskz_cvtsepi16_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtsepi32_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtsepi32_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtsepi64_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtsepi64_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtsepi64_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtss_sd"><in>__mmask8,__m128d,__m128</in><out>__m128d</out></function>
	<function name="_mm_maskz_cvttpd_epi32"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttpd_epi64"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttpd_epu32"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttpd_epu64"><in>__mmask8,__m128d</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttps_epi32"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttps_epi64"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttps_epu32"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvttps_epu64"><in>__mmask8,__m128</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi16_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi32_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi32_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi64_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi64_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_cvtusepi64_epi8"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_dbsad_epu8"><in>__mmask8,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_div_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_div_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_div_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_div_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_div_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_div_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_expand_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_expand_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_expandloadu_epi32"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_expandloadu_epi64"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_expandloadu_pd"><in>__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_maskz_expandloadu_ps"><in>__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_maskz_expand_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_expand_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fixupimm_pd"><in>__mmask8,__m128d,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fixupimm_ps"><in>__mmask8,__m128,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fixupimm_round_sd"><in>__mmask8,__m128d,__m128d,__m128i,int,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fixupimm_round_ss"><in>__mmask8,__m128,__m128,__m128i,int,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fixupimm_sd"><in>__mmask8,__m128d,__m128d,__m128i,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fixupimm_ss"><in>__mmask8,__m128,__m128,__m128i,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fmadd_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmadd_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fmadd_round_sd"><in>__mmask8,__m128d,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmadd_round_ss"><in>__mmask8,__m128,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fmadd_sd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmadd_ss"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fmaddsub_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmaddsub_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fmsubadd_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmsubadd_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fmsub_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmsub_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fmsub_round_sd"><in>__mmask8,__m128d,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmsub_round_ss"><in>__mmask8,__m128,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fmsub_sd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fmsub_ss"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmadd_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmadd_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmadd_round_sd"><in>__mmask8,__m128d,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmadd_round_ss"><in>__mmask8,__m128,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmadd_sd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmadd_ss"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmsub_pd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmsub_ps"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmsub_round_sd"><in>__mmask8,__m128d,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmsub_round_ss"><in>__mmask8,__m128,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_fnmsub_sd"><in>__mmask8,__m128d,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_fnmsub_ss"><in>__mmask8,__m128,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_getexp_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_getexp_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_getexp_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_getexp_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_getexp_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_getexp_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_getmant_pd"><in>__mmask8,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_maskz_getmant_ps"><in>__mmask8,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_mm_maskz_getmant_round_sd"><in>__mmask8,__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_getmant_round_ss"><in>__mmask8,__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM,int</in><out>__m128</out></function>
	<function name="_mm_maskz_getmant_sd"><in>__mmask8,__m128d,__m128d,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128d</out></function>
	<function name="_mm_maskz_getmant_ss"><in>__mmask8,__m128,__m128,_MM_MANTISSA_NORM_ENUM,_MM_MANTISSA_SIGN_ENUM</in><out>__m128</out></function>
	<function name="_mm_maskz_load_epi32"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_load_epi64"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_load_pd"><in>__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_maskz_load_ps"><in>__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_maskz_load_sd"><in>__mmask8,const double*</in><out>__m128d</out></function>
	<function name="_mm_maskz_load_ss"><in>__mmask8,const float*</in><out>__m128</out></function>
	<function name="_mm_maskz_loadu_epi16"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_loadu_epi32"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_loadu_epi64"><in>__mmask8,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_loadu_epi8"><in>__mmask16,void const*</in><out>__m128i</out></function>
	<function name="_mm_maskz_loadu_pd"><in>__mmask8,void const*</in><out>__m128d</out></function>
	<function name="_mm_maskz_loadu_ps"><in>__mmask8,void const*</in><out>__m128</out></function>
	<function name="_mm_maskz_lzcnt_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_lzcnt_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_madd52hi_epu64"><in>__mmask8,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_madd52lo_epu64"><in>__mmask8,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_madd_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_maddubs_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epu32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epu64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_epu8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_max_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_max_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_max_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_max_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_max_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_max_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_min_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epu32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epu64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_epu8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_min_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_min_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_min_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_min_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_min_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_min_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_movedup_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_movehdup_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_moveldup_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_mov_epi16"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mov_epi32"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mov_epi64"><in>__mmask8,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mov_epi8"><in>__mmask16,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_move_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_move_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_mov_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_mov_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_mul_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mul_epu32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mulhi_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mulhi_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mulhrs_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mullo_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mullo_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mullo_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_mul_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_mul_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_mul_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_mul_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_mul_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_mul_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_multishift_epi64_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_or_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_or_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_or_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_or_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_packs_epi16"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_packs_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_packus_epi16"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_packus_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permute_pd"><in>__mmask8,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_maskz_permute_ps"><in>__mmask8,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_maskz_permutevar_pd"><in>__mmask8,__m128d,__m128i</in><out>__m128d</out></function>
	<function name="_mm_maskz_permutevar_ps"><in>__mmask8,__m128,__m128i</in><out>__m128</out></function>
	<function name="_mm_maskz_permutex2var_epi16"><in>__mmask8,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permutex2var_epi32"><in>__mmask8,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permutex2var_epi64"><in>__mmask8,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permutex2var_epi8"><in>__mmask16,__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permutex2var_pd"><in>__mmask8,__m128d,__m128i,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_permutex2var_ps"><in>__mmask8,__m128,__m128i,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_permutexvar_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_permutexvar_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_range_pd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_range_ps"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_range_round_sd"><in>__mmask8,__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_range_round_ss"><in>__mmask8,__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_maskz_range_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_range_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_rcp14_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rcp14_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_rcp14_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rcp14_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_rcp28_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_rcp28_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_rcp28_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rcp28_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_reduce_pd"><in>__mmask8,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_reduce_ps"><in>__mmask8,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_reduce_round_sd"><in>__mmask8,__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_reduce_round_ss"><in>__mmask8,__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_maskz_reduce_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_reduce_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_rol_epi32"><in>__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_rol_epi64"><in>__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_rolv_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_rolv_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_ror_epi32"><in>__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_ror_epi64"><in>__mmask8,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_maskz_rorv_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_rorv_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_roundscale_pd"><in>__mmask8,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_roundscale_ps"><in>__mmask8,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_roundscale_round_sd"><in>__mmask8,__m128d,__m128d,const int,const int</in><out>__m128d</out></function>
	<function name="_mm_maskz_roundscale_round_ss"><in>__mmask8,__m128,__m128,const int,const int</in><out>__m128</out></function>
	<function name="_mm_maskz_roundscale_sd"><in>__mmask8,__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_maskz_roundscale_ss"><in>__mmask8,__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_maskz_rsqrt14_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rsqrt14_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_rsqrt14_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rsqrt14_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_rsqrt28_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_rsqrt28_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_rsqrt28_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_rsqrt28_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_scalef_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_scalef_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_scalef_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_scalef_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_scalef_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_scalef_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_set1_epi16"><in>__mmask8,short</in><out>__m128i</out></function>
	<function name="_mm_maskz_set1_epi32"><in>__mmask8,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_set1_epi64"><in>__mmask8,__int64</in><out>__m128i</out></function>
	<function name="_mm_maskz_set1_epi8"><in>__mmask16,char</in><out>__m128i</out></function>
	<function name="_mm_maskz_shuffle_epi32"><in>__mmask8,__m128i,_MM_PERM_ENUM</in><out>__m128i</out></function>
	<function name="_mm_maskz_shuffle_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_shufflehi_epi16"><in>__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_shufflelo_epi16"><in>__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_shuffle_pd"><in>__mmask8,__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_maskz_shuffle_ps"><in>__mmask8,__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_maskz_sll_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sll_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sll_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_slli_epi16"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_slli_epi32"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_slli_epi64"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_sllv_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sllv_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sllv_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sqrt_pd"><in>__mmask8,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_sqrt_ps"><in>__mmask8,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_sqrt_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_sqrt_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_sqrt_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_sqrt_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_sra_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sra_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sra_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srai_epi16"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srai_epi32"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srai_epi64"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srav_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srav_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srav_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srl_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srl_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srl_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srli_epi16"><in>__mmask8,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srli_epi32"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srli_epi64"><in>__mmask8,__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_maskz_srlv_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srlv_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_srlv_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_sub_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_sub_round_sd"><in>__mmask8,__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_maskz_sub_round_ss"><in>__mmask8,__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_maskz_sub_sd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_subs_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_subs_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_subs_epu16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_subs_epu8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_sub_ss"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_ternarylogic_epi32"><in>__mmask8,__m128i,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_ternarylogic_epi64"><in>__mmask8,__m128i,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpackhi_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpackhi_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpackhi_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpackhi_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpackhi_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_unpackhi_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_unpacklo_epi16"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpacklo_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpacklo_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpacklo_epi8"><in>__mmask16,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_unpacklo_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_unpacklo_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_maskz_xor_epi32"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_xor_epi64"><in>__mmask8,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_maskz_xor_pd"><in>__mmask8,__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_maskz_xor_ps"><in>__mmask8,__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_max_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_max_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mfence"></function>
	<function name="_mm_minpos_epu16"><in>__m128i</in><out>__m128i</out></function>
	<function name="_mm_min_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_min_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_mmask_i32gather_epi32"><in>__m128i,__mmask8,__m128i,void const*,const int</in><out>__m128i</out></function>
	<function name="_mm_mmask_i32gather_epi64"><in>__m128i,__mmask8,__m128i,void const*,const int</in><out>__m128i</out></function>
	<function name="_mm_mmask_i32gather_pd"><in>__m128d,__mmask8,__m128i,void const*,const int</in><out>__m128d</out></function>
	<function name="_mm_mmask_i32gather_ps"><in>__m128,__mmask8,__m128i,void const*,const int</in><out>__m128</out></function>
	<function name="_mm_mmask_i64gather_epi32"><in>__m128i,__mmask8,__m128i,void const*,const int</in><out>__m128i</out></function>
	<function name="_mm_mmask_i64gather_epi64"><in>__m128i,__mmask8,__m128i,void const*,const int</in><out>__m128i</out></function>
	<function name="_mm_mmask_i64gather_pd"><in>__m128d,__mmask8,__m128i,void const*,const int</in><out>__m128d</out></function>
	<function name="_mm_mmask_i64gather_ps"><in>__m128,__mmask8,__m128i,void const*,const int</in><out>__m128</out></function>
	<function name="_mm_monitor"><in>void const*,unsigned,unsigned</in></function>
	<function name="_mm_movehdup_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_moveldup_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_movemask_epi8"><in>__m128i</in><out>int</out></function>
	<function name="_mm_movemask_pd"><in>__m128d</in><out>int</out></function>
	<function name="_mm_movemask_pi8"><in>__m64</in><out>int</out></function>
	<function name="_mm_movemask_ps"><in>__m128</in><out>int</out></function>
	<function name="_mm_movepi16_mask"><in>__m128i</in><out>__mmask8</out></function>
	<function name="_mm_movepi32_mask"><in>__m128i</in><out>__mmask8</out></function>
	<function name="_mm_movepi64_mask"><in>__m128i</in><out>__mmask8</out></function>
	<function name="_mm_movepi64_pi64"><in>__m128i</in><out>__m64</out></function>
	<function name="_mm_movepi8_mask"><in>__m128i</in><out>__mmask16</out></function>
	<function name="_mm_movm_epi16"><in>__mmask8</in><out>__m128i</out></function>
	<function name="_mm_movm_epi32"><in>__mmask8</in><out>__m128i</out></function>
	<function name="_mm_movm_epi64"><in>__mmask8</in><out>__m128i</out></function>
	<function name="_mm_movm_epi8"><in>__mmask16</in><out>__m128i</out></function>
	<function name="_mm_movpi64_epi64"><in>__m64</in><out>__m128i</out></function>
	<function name="_mm_mpsadbw_epu8"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_mulhi_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mulhi_epu16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mulhi_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_mulhi_pu16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_mulhrs_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mulhrs_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_mul_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_mul_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_multishift_epi64_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_mwait"><in>unsigned,unsigned</in></function>
	<function name="_mm_packs_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_packs_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_packs_pu16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_packus_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_packus_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_pause"></function>
	<function name="_mm_permute_pd"><in>__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_permute_ps"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_permutevar_pd"><in>__m128d,__m128i</in><out>__m128d</out></function>
	<function name="_mm_permutevar_ps"><in>__m128,__m128i</in><out>__m128</out></function>
	<function name="_mm_permutex2var_epi16"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_permutex2var_epi32"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_permutex2var_epi64"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_permutex2var_epi8"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_permutex2var_pd"><in>__m128d,__m128i,__m128d</in><out>__m128d</out></function>
	<function name="_mm_permutex2var_ps"><in>__m128,__m128i,__m128</in><out>__m128</out></function>
	<function name="_mm_permutexvar_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_permutexvar_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_popcnt_u32"><in>unsigned int</in><out>int</out></function>
	<function name="_mm_popcnt_u64"><in>unsigned __int64</in><out>__int64</out></function>
	<function name="_mm_pow_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_pow_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_prefetch"><in>char const*,int</in></function>
	<function name="_mm_prefetch"><in>char const*,int</in></function>
	<function name="_mm_prefetch"><in>char const*,int</in></function>
	<function name="_mm_range_pd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_range_ps"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_range_round_sd"><in>__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_range_round_ss"><in>__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_rcp14_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_rcp14_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_rcp14_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_rcp14_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_rcp28_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_rcp28_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_rcp28_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_rcp28_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_rcp_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_rcp_ss"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_reduce_pd"><in>__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_reduce_ps"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_reduce_round_sd"><in>__m128d,__m128d,int,int</in><out>__m128d</out></function>
	<function name="_mm_reduce_round_ss"><in>__m128,__m128,int,int</in><out>__m128</out></function>
	<function name="_mm_reduce_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_reduce_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_rem_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epu16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epu64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rem_epu8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rol_epi32"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_rol_epi64"><in>__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_rolv_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rolv_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_ror_epi32"><in>__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_ror_epi64"><in>__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_rorv_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_rorv_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_roundscale_pd"><in>__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_roundscale_ps"><in>__m128,int</in><out>__m128</out></function>
	<function name="_mm_roundscale_round_sd"><in>__m128d,__m128d,const int,const int</in><out>__m128d</out></function>
	<function name="_mm_roundscale_round_ss"><in>__m128,__m128,const int,const int</in><out>__m128</out></function>
	<function name="_mm_roundscale_sd"><in>__m128d,__m128d,const int</in><out>__m128d</out></function>
	<function name="_mm_roundscale_ss"><in>__m128,__m128,const int</in><out>__m128</out></function>
	<function name="_mm_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_rsqrt14_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_rsqrt14_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_rsqrt28_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_rsqrt28_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_rsqrt28_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_rsqrt28_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_rsqrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_rsqrt_ss"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_sad_epu8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sad_pu8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_scalef_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_scalef_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_scalef_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_scalef_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_scalef_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_scalef_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_setcsr"><in>unsigned int</in></function>
	<function name="_MM_SET_EXCEPTION_MASK"><in>unsigned int</in></function>
	<function name="_MM_SET_EXCEPTION_STATE"><in>unsigned int</in></function>
	<function name="_MM_SET_FLUSH_ZERO_MODE"><in>unsigned int</in></function>
	<function name="_MM_SET_ROUNDING_MODE"><in>unsigned int</in></function>
	<function name="_mm_sfence"></function>
	<function name="_mm_sha1msg1_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sha1msg2_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sha1nexte_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sha1rnds4_epu32"><in>__m128i,__m128i,const int</in><out>__m128i</out></function>
	<function name="_mm_sha256msg1_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sha256msg2_epu32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sha256rnds2_epu32"><in>__m128i,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_shuffle_epi32"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_shuffle_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_shufflehi_epi16"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_shufflelo_epi16"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_shuffle_pd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_shuffle_pi16"><in>__m64,int</in><out>__m64</out></function>
	<function name="_mm_shuffle_pi8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_shuffle_ps"><in>__m128,__m128,unsigned int</in><out>__m128</out></function>
	<function name="_mm_sign_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sign_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sign_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sign_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_sign_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_sign_pi8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_sincos_pd"><in>__m128d *,__m128d</in><out>__m128d</out></function>
	<function name="_mm_sincos_ps"><in>__m128 *,__m128</in><out>__m128</out></function>
	<function name="_mm_sind_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_sind_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_sinh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_sinh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_sin_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_sin_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_slli_si128"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_spflt_32"><in>unsigned int</in></function>
	<function name="_mm_spflt_64"><in>unsigned __int64</in></function>
	<function name="_mm_sqrt_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_sqrt_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_sqrt_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_sqrt_ss"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_sra_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sra_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_sra_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_srai_epi16"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_srai_epi32"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_srai_epi64"><in>__m128i,unsigned int</in><out>__m128i</out></function>
	<function name="_mm_srai_pi16"><in>__m64,int</in><out>__m64</out></function>
	<function name="_mm_srai_pi32"><in>__m64,int</in><out>__m64</out></function>
	<function name="_mm_sra_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_sra_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_srav_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_srav_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_srav_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_srli_si128"><in>__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_storeh_pd"><in>double*,__m128d</in></function>
	<function name="_mm_storeh_pi"><in>__m64*,__m128</in></function>
	<function name="_mm_storel_epi64"><in>__m128i*,__m128i</in></function>
	<function name="_mm_storel_pd"><in>double*,__m128d</in></function>
	<function name="_mm_storel_pi"><in>__m64*,__m128</in></function>
	<function name="_mm_storer_pd"><in>double*,__m128d</in></function>
	<function name="_mm_storer_ps"><in>float*,__m128</in></function>
	<function name="_mm_storeu_pd"><in>double*,__m128d</in></function>
	<function name="_mm_storeu_ps"><in>float*,__m128</in></function>
	<function name="_mm_storeu_si128"><in>__m128i*,__m128i</in></function>
	<function name="_mm_storeu_si16"><in>void*,__m128i</in></function>
	<function name="_mm_storeu_si16"><in>void*,__m128i</in></function>
	<function name="_mm_storeu_si32"><in>void*,__m128i</in></function>
	<function name="_mm_storeu_si32"><in>void*,__m128i</in></function>
	<function name="_mm_storeu_si64"><in>void*,__m128i</in></function>
	<function name="_mm_storeu_si64"><in>void*,__m128i</in></function>
	<function name="_mm_stream_load_si128"><in>__m128i*</in><out>__m128i</out></function>
	<function name="_mm_stream_pd"><in>double*,__m128d</in></function>
	<function name="_mm_stream_pi"><in>__m64*,__m64</in></function>
	<function name="_mm_stream_ps"><in>float*,__m128</in></function>
	<function name="_mm_stream_si128"><in>__m128i*,__m128i</in></function>
	<function name="_mm_stream_si32"><in>int*,int</in></function>
	<function name="_mm_stream_si64"><in>__int64*,__int64</in></function>
	<function name="_mm_sub_round_sd"><in>__m128d,__m128d,int</in><out>__m128d</out></function>
	<function name="_mm_sub_round_ss"><in>__m128,__m128,int</in><out>__m128</out></function>
	<function name="_mm_sub_sd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_sub_ss"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_svml_ceil_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_svml_ceil_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_svml_floor_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_svml_floor_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_svml_round_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_svml_round_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_svml_sqrt_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_svml_sqrt_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_tand_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_tand_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_tanh_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_tanh_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_tan_pd"><in>__m128d</in><out>__m128d</out></function>
	<function name="_mm_tan_ps"><in>__m128</in><out>__m128</out></function>
	<function name="_mm_ternarylogic_epi32"><in>__m128i,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_ternarylogic_epi64"><in>__m128i,__m128i,__m128i,int</in><out>__m128i</out></function>
	<function name="_mm_testc_pd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_testc_ps"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_testc_si128"><in>__m128i,__m128i</in><out>int</out></function>
	<function name="_mm_test_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_test_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_test_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_test_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_test_mix_ones_zeros"><in>__m128i,__m128i</in><out>int</out></function>
	<function name="_mm_testn_epi16_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_testn_epi32_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_testn_epi64_mask"><in>__m128i,__m128i</in><out>__mmask8</out></function>
	<function name="_mm_testn_epi8_mask"><in>__m128i,__m128i</in><out>__mmask16</out></function>
	<function name="_mm_testnzc_pd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_testnzc_ps"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_testnzc_si128"><in>__m128i,__m128i</in><out>int</out></function>
	<function name="_mm_testz_pd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_testz_ps"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_testz_si128"><in>__m128i,__m128i</in><out>int</out></function>
	<function name="_MM_TRANSPOSE4_PS"><in>__m128,__m128,__m128,__m128</in></function>
	<function name="_mm_tzcnt_32"><in>unsigned int</in><out>int</out></function>
	<function name="_mm_tzcnt_64"><in>unsigned __int64</in><out>__int64</out></function>
	<function name="_mm_tzcnti_32"><in>int,unsigned int</in><out>int</out></function>
	<function name="_mm_tzcnti_64"><in>__int64,unsigned __int64</in><out>__int64</out></function>
	<function name="_mm_ucomieq_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomieq_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_ucomige_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomige_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_ucomigt_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomigt_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_ucomile_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomile_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_ucomilt_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomilt_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_ucomineq_sd"><in>__m128d,__m128d</in><out>int</out></function>
	<function name="_mm_ucomineq_ss"><in>__m128,__m128</in><out>int</out></function>
	<function name="_mm_udiv_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_udivrem_epi32"><in>__m128i *,__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_undefined_pd"><out>__m128d</out></function>
	<function name="_mm_undefined_ps"><out>__m128</out></function>
	<function name="_mm_undefined_si128"><out>__m128i</out></function>
	<function name="_mm_unpackhi_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpackhi_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpackhi_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpackhi_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpackhi_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_unpackhi_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpackhi_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpackhi_pi8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpackhi_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_unpacklo_epi16"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpacklo_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpacklo_epi64"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpacklo_epi8"><in>__m128i,__m128i</in><out>__m128i</out></function>
	<function name="_mm_unpacklo_pd"><in>__m128d,__m128d</in><out>__m128d</out></function>
	<function name="_mm_unpacklo_pi16"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpacklo_pi32"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpacklo_pi8"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_mm_unpacklo_ps"><in>__m128,__m128</in><out>__m128</out></function>
	<function name="_mm_urem_epi32"><in>__m128i,__m128i</in><out>__m128i</out></function>

	<function name="_m_pmaddwd"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_maskmovq"><in>__m64,__m64,char*</in></function>
	<function name="_m_packssdw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_packsswb"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_packuswb"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pandn"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pavgb"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pavgw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pinsrw"><in>__m64,int,int</in><out>__m64</out></function>
	<function name="_m_pmaxsw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pmaxub"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pminsw"><in>__m64,__m64</in><out>__m64</out></function>

	<function name="_m_pminub"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pmovmskb"><in>__m64</in><out>int</out></function>
	<function name="_m_pmulhuw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pmulhw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psadbw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_pshufw"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_pslldi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_pslld"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psllqi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psllq"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psllwi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psllw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psradi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psrad"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psrawi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psraw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psrldi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psrld"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psrlqi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psrlq"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_psrlwi"><in>__m64,int</in><out>__m64</out></function>
	<function name="_m_psrlw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpckhbw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpckhdq"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpckhwd"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpcklbw"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpckldq"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="_m_punpcklwd"><in>__m64,__m64</in><out>__m64</out></function>

	<function name="__builtin_fabsq"><in>__float128</in><out>__float128</out></function>
	<function name="__builtin_copysignq"><in>__float128,__float128</in><out>__float128</out></function>
	<function name="__builtin_ia32_pause"><in>void</in></function>
	<function name="__builtin_infq"><in>void</in><out>__float128</out></function>
	<function name="__builtin_huge_valq"><in>void</in><out>__float128</out></function>
	<function name="__builtin_cpu_init"><in>void</in></function>
	<function name="__builtin_cpu_is"><in>const char *</in><out>int</out></function>
	<function name="__builtin_cpu_supports"><in>const char *</in><out>int</out></function>
	<function name="__builtin_ia32_paddw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_paddd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psubw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psubd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_paddsb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_paddsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psubsb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_psubsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_paddusb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_paddusw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psubusb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_psubusw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pmullw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pmulhw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pandn"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="__builtin_ia32_por"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="__builtin_ia32_pxor"><in>__m64,__m64</in><out>__m64</out></function>
	<function name="__builtin_ia32_pcmpeqb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pcmpeqw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pcmpeqd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pcmpgtb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pcmpgtw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pcmpgtd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_punpckhbw"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_punpckhwd"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_punpckhdq"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_punpcklbw"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_punpcklwd"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_punpckldq"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_packsswb"><in>__v4hi,__v4hi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_packssdw"><in>__v2si,__v2si</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_packuswb"><in>__v4hi,__v4hi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_psllw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pslld"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psllq"><in>v1di,v1di</in><out>v1di</out></function>
	<function name="__builtin_ia32_psrlw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psrld"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psrlq"><in>v1di,v1di</in><out>v1di</out></function>
	<function name="__builtin_ia32_psraw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psrad"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psllwi"><in>__v4hi,int</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pslldi"><in>__v2si,int</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psllqi"><in>v1di,int</in><out>v1di</out></function>
	<function name="__builtin_ia32_psrlwi"><in>__v4hi,int</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psrldi"><in>__v2si,int</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psrlqi"><in>v1di,int</in><out>v1di</out></function>
	<function name="__builtin_ia32_psrawi"><in>__v4hi,int</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psradi"><in>__v2si,int</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pmulhuw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pavgb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pavgw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_psadbw"><in>__v8qi,__v8qi</in><out>v1di</out></function>
	<function name="__builtin_ia32_pmaxub"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pmaxsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pminub"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pminsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pmovmskb"><in>__v8qi</in><out>int</out></function>
	<function name="__builtin_ia32_maskmovq"><in>__v8qi,__v8qi,char *</in></function>
	<function name="__builtin_ia32_movntq"><in>__m64 *,__m64</in></function>
	<function name="__builtin_ia32_sfence"><in>void</in></function>
	<function name="__builtin_ia32_comieq"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_comineq"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_comilt"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_comile"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_comigt"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_comige"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomieq"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomineq"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomilt"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomile"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomigt"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_ucomige"><in>__v4sf,__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_addss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_subss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_mulss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_divss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpeqps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpltps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpleps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpgtps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpgeps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpunordps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpneqps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpnltps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpnleps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpngtps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpngeps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpordps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpeqss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpltss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpless"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpunordss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpneqss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpnltss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpnless"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpordss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_maxps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_maxss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_minps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_minss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_andps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_andnps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_orps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_xorps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movss"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movhlps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movlhps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_unpckhps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_unpcklps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtpi2ps"><in>__v4sf,__v2si</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtsi2ss"><in>__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtps2pi"><in>__v4sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_cvtss2si"><in>__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_cvttps2pi"><in>__v4sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_cvttss2si"><in>__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_rcpps"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_rsqrtps"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_sqrtps"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_rcpss"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_rsqrtss"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_sqrtss"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_shufps"><in>__v4sf,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movntps"><in>float *,__v4sf</in></function>
	<function name="__builtin_ia32_movmskps"><in>__v4sf</in><out>int</out></function>
	<function name="__builtin_ia32_loadups"><in>float *</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_storeups"><in>float *,__v4sf</in></function>
	<function name="__builtin_ia32_loadss"><in>float *</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_loadhps"><in>__v4sf,const __v2sf *</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_loadlps"><in>__v4sf,const __v2sf *</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_storehps"><in>__v2sf *,__v4sf</in></function>
	<function name="__builtin_ia32_storelps"><in>__v2sf *,__v4sf</in></function>
	<function name="__builtin_ia32_comisdeq"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_comisdlt"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_comisdle"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_comisdgt"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_comisdge"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_comisdneq"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdeq"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdlt"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdle"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdgt"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdge"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_ucomisdneq"><in>__v2df,__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_cmpeqpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpltpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmplepd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpgtpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpgepd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpunordpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpneqpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpnltpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpnlepd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpngtpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpngepd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpordpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpeqsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpltsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmplesd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpunordsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpneqsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpnltsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpnlesd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpordsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_paddq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psubq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_addsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_subsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_mulsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_divsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_minpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_maxpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_minsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_maxsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_andpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_andnpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_orpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_xorpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_movsd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_unpckhpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_unpcklpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_paddb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_paddw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_paddq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psubb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_psubw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psubq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmullw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmulhw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pandn128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pavgb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pavgw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pcmpeqb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pcmpeqw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pcmpeqd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pcmpgtb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pcmpgtw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pcmpgtd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmaxub128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pmaxsw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pminub128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pminsw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_punpckhbw128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_punpckhwd128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_punpckhdq128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_punpckhqdq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_punpcklbw128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_punpcklwd128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_punpckldq128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_punpcklqdq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_packsswb128"><in>v8hi,v8hi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_packssdw128"><in>__v4si,__v4si</in><out>v8hi</out></function>
	<function name="__builtin_ia32_packuswb128"><in>v8hi,v8hi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pmulhuw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_maskmovdqu"><in>__v16qi,__v16qi</in></function>
	<function name="__builtin_ia32_loadupd"><in>double *</in><out>__v2df</out></function>
	<function name="__builtin_ia32_storeupd"><in>double *,__v2df</in></function>
	<function name="__builtin_ia32_loadhpd"><in>__v2df,double const *</in><out>__v2df</out></function>
	<function name="__builtin_ia32_loadlpd"><in>__v2df,double const *</in><out>__v2df</out></function>
	<function name="__builtin_ia32_movmskpd"><in>__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_pmovmskb128"><in>__v16qi</in><out>int</out></function>
	<function name="__builtin_ia32_movnti"><in>int *,int</in></function>
	<function name="__builtin_ia32_movnti64"><in>long long int *,long long int</in></function>
	<function name="__builtin_ia32_movntpd"><in>double *,__v2df</in></function>
	<function name="__builtin_ia32_movntdq"><in>__v2df *,__v2df</in></function>
	<function name="__builtin_ia32_pshufd"><in>__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pshuflw"><in>v8hi,int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pshufhw"><in>v8hi,int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psadbw128"><in>__v16qi,__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_sqrtpd"><in>__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_sqrtsd"><in>__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_shufpd"><in>__v2df,__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvtdq2pd"><in>__v4si</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvtdq2ps"><in>__v4si</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtpd2dq"><in>__v2df</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvtpd2pi"><in>__v2df</in><out>__v2si</out></function>
	<function name="__builtin_ia32_cvtpd2ps"><in>__v2df</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvttpd2dq"><in>__v2df</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvttpd2pi"><in>__v2df</in><out>__v2si</out></function>
	<function name="__builtin_ia32_cvtpi2pd"><in>__v2si</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvtsd2si"><in>__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_cvttsd2si"><in>__v2df</in><out>int</out></function>
	<function name="__builtin_ia32_cvtsd2si64"><in>__v2df</in><out>long long</out></function>
	<function name="__builtin_ia32_cvttsd2si64"><in>__v2df</in><out>long long</out></function>
	<function name="__builtin_ia32_cvtps2dq"><in>__v4sf</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvtps2pd"><in>__v4sf</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvttps2dq"><in>__v4sf</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvtsi2sd"><in>__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvtsi642sd"><in>__v2df,long long</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cvtsd2ss"><in>__v4sf,__v2df</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtss2sd"><in>__v2df,__v4sf</in><out>__v2df</out></function>
	<function name="__builtin_ia32_clflush"><in>const void *</in></function>
	<function name="__builtin_ia32_lfence"><in>void</in></function>
	<function name="__builtin_ia32_mfence"><in>void</in></function>
	<function name="__builtin_ia32_loaddqu"><in>const char *</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_storedqu"><in>char *,__v16qi</in></function>
	<function name="__builtin_ia32_pmuludq"><in>__v2si,__v2si</in><out>v1di</out></function>
	<function name="__builtin_ia32_pmuludq128"><in>__v4si,__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psllw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pslld128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psllq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psrlw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psrld128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psrlq128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psraw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psrad128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pslldqi128"><in>__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psllwi128"><in>v8hi,int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pslldi128"><in>__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psllqi128"><in>__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psrldqi128"><in>__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psrlwi128"><in>v8hi,int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psrldi128"><in>__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psrlqi128"><in>__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psrawi128"><in>v8hi,int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_psradi128"><in>__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmaddwd128"><in>v8hi,v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_movq128"><in>__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_addsubpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_addsubps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_haddpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_haddps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_hsubpd"><in>__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_hsubps"><in>__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_lddqu"><in>char const *</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_monitor"><in>void *,unsigned int,unsigned int</in></function>
	<function name="__builtin_ia32_movshdup"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movsldup"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_mwait"><in>unsigned int,unsigned int</in></function>
	<function name="__builtin_ia32_phaddd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_phaddw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_phaddsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_phsubd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_phsubw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_phsubsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pmaddubsw"><in>__v8qi,__v8qi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pmulhrsw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pshufb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_psignb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_psignd"><in>__v2si,__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_psignw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_palignr"><in>v1di,v1di,int</in><out>v1di</out></function>
	<function name="__builtin_ia32_pabsb"><in>__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pabsd"><in>__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pabsw"><in>__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_phaddd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_phaddw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_phaddsw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_phsubd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_phsubw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_phsubsw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmaddubsw128"><in>__v16qi,__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmulhrsw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pshufb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_psignb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_psignd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psignw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_palignr128"><in>__v2di,__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pabsb128"><in>__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pabsd128"><in>__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pabsw128"><in>v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_blendpd"><in>__v2df,__v2df,const int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_blendps"><in>__v4sf,__v4sf,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_blendvpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_blendvps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_dppd"><in>__v2df,__v2df,const int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_dpps"><in>__v4sf,__v4sf,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_insertps128"><in>__v4sf,__v4sf,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_movntdqa"><in>__v2di *</in><out>__v2di</out></function>
	<function name="__builtin_ia32_mpsadbw128"><in>__v16qi,__v16qi,const int</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_packusdw128"><in>__v4si,__v4si</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pblendvb128"><in>__v16qi,__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pblendw128"><in>v8hi,v8hi,const int</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pcmpeqq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_phminposuw128"><in>v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmaxsb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pmaxsd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmaxud128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmaxuw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pminsb128"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pminsd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pminud128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pminuw128"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmovsxbd128"><in>__v16qi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmovsxbq128"><in>__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmovsxbw128"><in>__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmovsxdq128"><in>__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmovsxwd128"><in>v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmovsxwq128"><in>v8hi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmovzxbd128"><in>__v16qi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmovzxbq128"><in>__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmovzxbw128"><in>__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pmovzxdq128"><in>__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmovzxwd128"><in>v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pmovzxwq128"><in>v8hi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmuldq128"><in>__v4si,__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pmulld128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_ptestc128"><in>__v2di,__v2di</in><out>int</out></function>
	<function name="__builtin_ia32_ptestnzc128"><in>__v2di,__v2di</in><out>int</out></function>
	<function name="__builtin_ia32_ptestz128"><in>__v2di,__v2di</in><out>int</out></function>
	<function name="__builtin_ia32_roundpd"><in>__v2df,const int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_roundps"><in>__v4sf,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_roundsd"><in>__v2df,__v2df,const int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_roundss"><in>__v4sf,__v4sf,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vec_set___v4sf"><in>__v4sf,float,const int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vec_ext___v16qi"><in>__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_vec_set___v16qi"><in>__v16qi,int,const int</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vec_set___v4si"><in>__v4si,int,const int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vec_set___v2di"><in>__v2di,long long,const int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vec_ext___v4sf"><in>__v4sf,const int</in><out>float</out></function>
	<function name="__builtin_ia32_vec_ext___v4si"><in>__v4si,const int</in><out>int</out></function>
	<function name="__builtin_ia32_vec_ext___v2di"><in>__v2di,const int</in><out>long long</out></function>
	<function name="__builtin_ia32_pcmpestrm128"><in>__v16qi,int,__v16qi,int,const int</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pcmpestri128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpestria128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpestric128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpestrio128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpestris128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpestriz128"><in>__v16qi,int,__v16qi,int,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistrm128"><in>__v16qi,__v16qi,const int</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pcmpistri128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistria128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistric128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistrio128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistris128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpistriz128"><in>__v16qi,__v16qi,const int</in><out>int</out></function>
	<function name="__builtin_ia32_pcmpgtq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_crc32qi"><in>unsigned int,unsigned char</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_crc32hi"><in>unsigned int,unsigned short</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_crc32si"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_crc32di"><in>unsigned long long,unsigned long long</in><out>unsigned long long</out></function>
	<function name="__builtin_ia32_addpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_addps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_addsubpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_addsubps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_andnpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_andnps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_andpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_andps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_blendpd256"><in>v4df,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_blendps256"><in>v8sf,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_blendvpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_blendvps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_cmppd"><in>__v2df,__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmppd256"><in>v4df,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_cmpps"><in>__v4sf,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cmpps256"><in>v8sf,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_cmpsd"><in>__v2df,__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_cmpss"><in>__v4sf,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtdq2pd256"><in>__v4si</in><out>v4df</out></function>
	<function name="__builtin_ia32_cvtdq2ps256"><in>v8si</in><out>v8sf</out></function>
	<function name="__builtin_ia32_cvtpd2dq256"><in>v4df</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvtpd2ps256"><in>v4df</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_cvtps2dq256"><in>v8sf</in><out>v8si</out></function>
	<function name="__builtin_ia32_cvtps2pd256"><in>__v4sf</in><out>v4df</out></function>
	<function name="__builtin_ia32_cvttpd2dq256"><in>v4df</in><out>__v4si</out></function>
	<function name="__builtin_ia32_cvttps2dq256"><in>v8sf</in><out>v8si</out></function>
	<function name="__builtin_ia32_divpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_divps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_dpps256"><in>v8sf,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_haddpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_haddps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_hsubpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_hsubps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_lddqu256"><in>pcchar</in><out>v32qi</out></function>
	<function name="__builtin_ia32_loaddqu256"><in>pcchar</in><out>v32qi</out></function>
	<function name="__builtin_ia32_loadupd256"><in>pcdouble</in><out>v4df</out></function>
	<function name="__builtin_ia32_loadups256"><in>pcfloat</in><out>v8sf</out></function>
	<function name="__builtin_ia32_maskloadpd"><in>pc__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_maskloadpd256"><in>pcv4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_maskloadps"><in>pc__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_maskloadps256"><in>pcv8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_maskstorepd"><in>p__v2df,__v2df,__v2df</in></function>
	<function name="__builtin_ia32_maskstorepd256"><in>pv4df,v4df,v4df</in></function>
	<function name="__builtin_ia32_maskstoreps"><in>p__v4sf,__v4sf,__v4sf</in></function>
	<function name="__builtin_ia32_maskstoreps256"><in>pv8sf,v8sf,v8sf</in></function>
	<function name="__builtin_ia32_maxpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_maxps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_minpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_minps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_movddup256"><in>v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_movmskpd256"><in>v4df</in><out>int</out></function>
	<function name="__builtin_ia32_movmskps256"><in>v8sf</in><out>int</out></function>
	<function name="__builtin_ia32_movshdup256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_movsldup256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_mulpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_mulps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_orpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_orps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_pd_pd256"><in>v4df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_pd256_pd"><in>__v2df</in><out>v4df</out></function>
	<function name="__builtin_ia32_ps_ps256"><in>v8sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_ps256_ps"><in>__v4sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_ptestc256"><in>v4di,v4di,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_ptestnzc256"><in>v4di,v4di,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_ptestz256"><in>v4di,v4di,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_rcpps256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_roundpd256"><in>v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_roundps256"><in>v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_rsqrtps_nr256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_rsqrtps256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_shufpd256"><in>v4df,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_shufps256"><in>v8sf,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_si_si256"><in>v8si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_si256_si"><in>__v4si</in><out>v8si</out></function>
	<function name="__builtin_ia32_sqrtpd256"><in>v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_sqrtps_nr256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_sqrtps256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_storedqu256"><in>pchar,v32qi</in></function>
	<function name="__builtin_ia32_storeupd256"><in>pdouble,v4df</in></function>
	<function name="__builtin_ia32_storeups256"><in>pfloat,v8sf</in></function>
	<function name="__builtin_ia32_subpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_subps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_unpckhpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_unpckhps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_unpcklpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_unpcklps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vbroadcastf128_pd256"><in>pc__v2df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vbroadcastf128_ps256"><in>pc__v4sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vbroadcastsd256"><in>pcdouble</in><out>v4df</out></function>
	<function name="__builtin_ia32_vbroadcastss"><in>pcfloat</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vbroadcastss256"><in>pcfloat</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vextractf128_pd256"><in>v4df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vextractf128_ps256"><in>v8sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vextractf128_si256"><in>v8si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vinsertf128_pd256"><in>v4df,__v2df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_vinsertf128_ps256"><in>v8sf,__v4sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vinsertf128_si256"><in>v8si,__v4si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_vperm2f128_pd256"><in>v4df,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_vperm2f128_ps256"><in>v8sf,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vperm2f128_si256"><in>v8si,v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_vpermil2pd"><in>__v2df,__v2df,__v2di,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vpermil2pd256"><in>v4df,v4df,v4di,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_vpermil2ps"><in>__v4sf,__v4sf,__v4si,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vpermil2ps256"><in>v8sf,v8sf,v8si,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vpermilpd"><in>__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vpermilpd256"><in>v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_vpermilps"><in>__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vpermilps256"><in>v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vpermilvarpd"><in>__v2df,__v2di</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vpermilvarpd256"><in>v4df,v4di</in><out>v4df</out></function>
	<function name="__builtin_ia32_vpermilvarps"><in>__v4sf,__v4si</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vpermilvarps256"><in>v8sf,v8si</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vtestcpd"><in>__v2df,__v2df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestcpd256"><in>v4df,v4df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestcps"><in>__v4sf,__v4sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestcps256"><in>v8sf,v8sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestnzcpd"><in>__v2df,__v2df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestnzcpd256"><in>v4df,v4df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestnzcps"><in>__v4sf,__v4sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestnzcps256"><in>v8sf,v8sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestzpd"><in>__v2df,__v2df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestzpd256"><in>v4df,v4df,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestzps"><in>__v4sf,__v4sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vtestzps256"><in>v8sf,v8sf,ptest</in><out>int</out></function>
	<function name="__builtin_ia32_vzeroall"><in>void</in></function>
	<function name="__builtin_ia32_vzeroupper"><in>void</in></function>
	<function name="__builtin_ia32_xorpd256"><in>v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_xorps256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_mpsadbw256"><in>v32qi,v32qi,int</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pabsb256"><in>v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pabsw256"><in>v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pabsd256"><in>v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_packssdw256"><in>v8si,v8si</in><out>v16hi</out></function>
	<function name="__builtin_ia32_packsswb256"><in>v16hi,v16hi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_packusdw256"><in>v8si,v8si</in><out>v16hi</out></function>
	<function name="__builtin_ia32_packuswb256"><in>v16hi,v16hi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_paddb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_paddw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_paddd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_paddq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_paddsb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_paddsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_paddusb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_paddusw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_palignr256"><in>v4di,v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_andsi256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_andnotsi256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_pavgb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pavgw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pblendvb256"><in>v32qi,v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pblendw256"><in>v16hi,v16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pcmpeqb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pcmpeqw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pcmpeqd256"><in>c8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pcmpeqq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_pcmpgtb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pcmpgtw256"><in>16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pcmpgtd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pcmpgtq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_phaddw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_phaddd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_phaddsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_phsubw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_phsubd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_phsubsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmaddubsw256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pmaddwd256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmaxsb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pmaxsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmaxsd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmaxub256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pmaxuw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmaxud256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pminsb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pminsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pminsd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pminub256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pminuw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pminud256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmovmskb256"><in>v32qi</in><out>int</out></function>
	<function name="__builtin_ia32_pmovsxbw256"><in>__v16qi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmovsxbd256"><in>__v16qi</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmovsxbq256"><in>__v16qi</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmovsxwd256"><in>v8hi</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmovsxwq256"><in>v8hi</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmovsxdq256"><in>__v4si</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmovzxbw256"><in>__v16qi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmovzxbd256"><in>__v16qi</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmovzxbq256"><in>__v16qi</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmovzxwd256"><in>v8hi</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmovzxwq256"><in>v8hi</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmovzxdq256"><in>__v4si</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmuldq256"><in>v8si,v8si</in><out>v4di</out></function>
	<function name="__builtin_ia32_pmulhrsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmulhuw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmulhw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmullw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pmulld256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pmuludq256"><in>v8si,v8si</in><out>v4di</out></function>
	<function name="__builtin_ia32_por256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psadbw256"><in>v32qi,v32qi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pshufb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pshufd256"><in>v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_pshufhw256"><in>v16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pshuflw256"><in>v16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psignb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_psignw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psignd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pslldqi256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_psllwi256"><in>16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psllw256"><in>v16hi,v8hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pslldi256"><in>v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_pslld256"><in>v8si,__v4si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psllqi256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_psllq256"><in>v4di,__v2di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psrawi256"><in>v16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psraw256"><in>v16hi,v8hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psradi256"><in>v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_psrad256"><in>v8si,__v4si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psrldqi256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_psrlwi256"><in>v16hi,int</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psrlw256"><in>v16hi,v8hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psrldi256"><in>v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_psrld256"><in>v8si,__v4si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psrlqi256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_psrlq256"><in>v4di,__v2di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psubb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_psubw256"><in>v16hi,v16hi</in><out>v32hi</out></function>
	<function name="__builtin_ia32_psubd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psubq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psubsb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_psubsw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_psubusb256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_psubusw256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_punpckhbw256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_punpckhwd256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_punpckhdq256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_punpckhqdq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_punpcklbw256"><in>v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_punpcklwd256"><in>v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_punpckldq256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_punpcklqdq256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_pxor256"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_movntdqa256"><in>pv4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_vbroadcastss_ps"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vbroadcastss_ps256"><in>__v4sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vbroadcastsd_pd256"><in>__v2df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vbroadcastsi256"><in>__v2di</in><out>v4di</out></function>
	<function name="__builtin_ia32_pblendd128"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pblendd256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pbroadcastb256"><in>__v16qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_pbroadcastw256"><in>v8hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_pbroadcastd256"><in>__v4si</in><out>v8si</out></function>
	<function name="__builtin_ia32_pbroadcastq256"><in>__v2di</in><out>v4di</out></function>
	<function name="__builtin_ia32_pbroadcastb128"><in>__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_pbroadcastw128"><in>v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_pbroadcastd128"><in>__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_pbroadcastq128"><in>__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_permvarsi256"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_permdf256"><in>v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_permvarsf256"><in>v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_permdi256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_permti256"><in>v4di,v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_extract128i256"><in>v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_insert128i256"><in>v4di,__v2di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_maskloadd256"><in>pcv8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_maskloadq256"><in>pcv4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_maskloadd"><in>pc__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_maskloadq"><in>pc__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_maskstored256"><in>pv8si,v8si,v8si</in></function>
	<function name="__builtin_ia32_maskstoreq256"><in>pv4di,v4di,v4di</in></function>
	<function name="__builtin_ia32_maskstored"><in>p__v4si,__v4si,__v4si</in></function>
	<function name="__builtin_ia32_maskstoreq"><in>p__v2di,__v2di,__v2di</in></function>
	<function name="__builtin_ia32_psllv8si"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psll__v4si"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psllv4di"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psll__v2di"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_psrav8si"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psra__v4si"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psrlv8si"><in>v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_psrl__v4si"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_psrlv4di"><in>v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_psrl__v2di"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_gathersi__v2df"><in>__v2df,pcdouble,__v4si,__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_gathersiv4df"><in>v4df,pcdouble,__v4si,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_gatherdi__v2df"><in>__v2df,pcdouble,__v2di,__v2df,int</in><out>__v2df</out></function>
	<function name="__builtin_ia32_gatherdiv4df"><in>v4df,pcdouble,v4di,v4df,int</in><out>v4df</out></function>
	<function name="__builtin_ia32_gathersi__v4sf"><in>__v4sf,pcfloat,__v4si,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_gathersiv8sf"><in>v8sf,pcfloat,v8si,v8sf,int</in><out>v8sf</out></function>
	<function name="__builtin_ia32_gatherdi__v4sf"><in>__v4sf,pcfloat,__v2di,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_gatherdi__v4sf256"><in>__v4sf,pcfloat,v4di,__v4sf,int</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_gathersi__v2di"><in>__v2di,pcint64,__v4si,__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_gathersiv4di"><in>v4di,pcint64,__v4si,v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_gatherdi__v2di"><in>__v2di,pcint64,__v2di,__v2di,int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_gatherdiv4di"><in>v4di,pcint64,v4di,v4di,int</in><out>v4di</out></function>
	<function name="__builtin_ia32_gathersi__v4si"><in>__v4si,pcint,__v4si,__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_gathersiv8si"><in>v8si,pcint,v8si,v8si,int</in><out>v8si</out></function>
	<function name="__builtin_ia32_gatherdi__v4si"><in>__v4si,pcint,__v2di,__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_gatherdi__v4si256"><in>__v4si,pcint,v4di,__v4si,int</in><out>__v4si</out></function>
	<function name="__builtin_ia32_aesenc128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_aesenclast128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_aesdec128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_aesdeclast128"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_aeskeygenassist128"><in>__v2di,const int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_aesimc128"><in>__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_pclmulqdq128"><in>__v2di,__v2di,const int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_rdfsbase32"><in>void</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_rdfsbase64"><in>void</in><out>unsigned long long</out></function>
	<function name="__builtin_ia32_rdgsbase32"><in>void</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_rdgsbase64"><in>void</in><out>unsigned long long</out></function>
	<function name="_writefsbase_u32"><in>unsigned int</in></function>
	<function name="_writefsbase_u64"><in>unsigned long long</in></function>
	<function name="_writegsbase_u32"><in>unsigned int</in></function>
	<function name="_writegsbase_u64"><in>unsigned long long</in></function>
	<function name="__builtin_ia32_rdrand16_step"><in>unsigned short *</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_rdrand32_step"><in>unsigned int *</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_rdrand64_step"><in>unsigned long long *</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_movntsd"><in>double *,__v2df</in></function>
	<function name="__builtin_ia32_movntss"><in>float *,__v4sf</in></function>
	<function name="__builtin_ia32_extrq"><in>__v2di,__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_extrqi"><in>__v2di,const unsigned int,const unsigned int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_insertq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_insertqi"><in>__v2di,__v2di,const unsigned int,const unsigned int</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vfrczpd"><in>__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfrczps"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfrczsd"><in>__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfrczss"><in>__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfrczpd256"><in>v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfrczps256"><in>v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vpcmov"><in>__v2di,__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcmov___v2di"><in>__v2di,__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcmov___v4si"><in>__v4si,__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcmov_v8hi"><in>v8hi,v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcmov___v16qi"><in>__v16qi,__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcmov___v2df"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vpcmov___v4sf"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vpcmov_v4di256"><in>v4di,v4di,v4di</in><out>v4di</out></function>
	<function name="__builtin_ia32_vpcmov_v8si256"><in>v8si,v8si,v8si</in><out>v8si</out></function>
	<function name="__builtin_ia32_vpcmov_v16hi256"><in>v16hi,v16hi,v16hi</in><out>v16hi</out></function>
	<function name="__builtin_ia32_vpcmov_v32qi256"><in>v32qi,v32qi,v32qi</in><out>v32qi</out></function>
	<function name="__builtin_ia32_vpcmov_v4df256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vpcmov_v8sf256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vpcomeqb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomeqw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomeqd"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomeqq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomequb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomequd"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomequq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomequw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomeqw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomfalseb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomfalsed"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomfalseq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomfalseub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomfalseud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomfalseuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomfalseuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomfalsew"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomgeb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomged"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomgeq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomgeub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomgeud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomgeuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomgeuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomgew"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomgtb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomgtd"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomgtq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomgtub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomgtud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomgtuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomgtuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomgtw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomleb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomled"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomleq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomleub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomleud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomleuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomleuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomlew"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomltb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomltd"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomltq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomltub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomltud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomltuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomltuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomltw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomneb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomned"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomneq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomneub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomneud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomneuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomneuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomnew"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomtrueb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomtrued"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomtrueq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomtrueub"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpcomtrueud"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpcomtrueuq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpcomtrueuw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpcomtruew"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vphaddbd"><in>__v16qi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vphaddbq"><in>__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphaddbw"><in>__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vphadddq"><in>__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphaddubd"><in>__v16qi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vphaddubq"><in>__v16qi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphaddubw"><in>__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vphaddudq"><in>__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphadduwd"><in>v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vphadduwq"><in>v8hi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphaddwd"><in>v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vphaddwq"><in>v8hi</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphsubbw"><in>__v16qi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vphsubdq"><in>__v4si</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vphsubwd"><in>v8hi</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmacsdd"><in>__v4si,__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmacsdqh"><in>__v4si,__v4si,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpmacsdql"><in>__v4si,__v4si,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpmacssdd"><in>__v4si,__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmacssdqh"><in>__v4si,__v4si,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpmacssdql"><in>__v4si,__v4si,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpmacsswd"><in>v8hi,v8hi,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmacssww"><in>v8hi,v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpmacswd"><in>v8hi,v8hi,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmacsww"><in>v8hi,v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpmadcsswd"><in>v8hi,v8hi,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpmadcswd"><in>v8hi,v8hi,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpperm"><in>__v16qi,__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vprotb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vprotd"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vprotq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vprotw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpshab"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpshad"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpshaq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpshaw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vpshlb"><in>__v16qi,__v16qi</in><out>__v16qi</out></function>
	<function name="__builtin_ia32_vpshld"><in>__v4si,__v4si</in><out>__v4si</out></function>
	<function name="__builtin_ia32_vpshlq"><in>__v2di,__v2di</in><out>__v2di</out></function>
	<function name="__builtin_ia32_vpshlw"><in>v8hi,v8hi</in><out>v8hi</out></function>
	<function name="__builtin_ia32_vfmaddpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmaddps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmaddsd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmaddss"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmsubpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmsubps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmsubsd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmsubss"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfnmaddpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfnmaddps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfnmaddsd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfnmaddss"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfnmsubpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfnmsubps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfnmsubsd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfnmsubss"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmaddsubpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmaddsubps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmsubaddpd"><in>__v2df,__v2df,__v2df</in><out>__v2df</out></function>
	<function name="__builtin_ia32_vfmsubaddps"><in>__v4sf,__v4sf,__v4sf</in><out>__v4sf</out></function>
	<function name="__builtin_ia32_vfmaddpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfmaddps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vfmsubpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfmsubps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vfnmaddpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfnmaddps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vfnmsubpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfnmsubps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vfmaddsubpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfmaddsubps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_vfmsubaddpd256"><in>v4df,v4df,v4df</in><out>v4df</out></function>
	<function name="__builtin_ia32_vfmsubaddps256"><in>v8sf,v8sf,v8sf</in><out>v8sf</out></function>
	<function name="__builtin_ia32_llwpcb16"><in>void *</in></function>
	<function name="__builtin_ia32_llwpcb32"><in>void *</in></function>
	<function name="__builtin_ia32_llwpcb64"><in>void *</in></function>
	<function name="__builtin_ia32_llwpcb16"><in>void</in><out>void *</out></function>
	<function name="__builtin_ia32_llwpcb32"><in>void</in><out>void *</out></function>
	<function name="__builtin_ia32_llwpcb64"><in>void</in><out>void *</out></function>
	<function name="__builtin_ia32_lwpval16"><in>unsigned short,unsigned int,unsigned short</in></function>
	<function name="__builtin_ia32_lwpval32"><in>unsigned int,unsigned int,unsigned int</in></function>
	<function name="__builtin_ia32_lwpval64"><in>unsigned __int64,unsigned int,unsigned int</in></function>
	<function name="__builtin_ia32_lwpins16"><in>unsigned short,unsigned int,unsigned short</in><out>unsigned char</out></function>
	<function name="__builtin_ia32_lwpins32"><in>unsigned int,unsigned int,unsigned int</in><out>unsigned char</out></function>
	<function name="__builtin_ia32_lwpins64"><in>unsigned __int64,unsigned int,unsigned int</in><out>unsigned char</out></function>
	<function name="__builtin_ia32_bextr_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_bextr_u64"><in>unsigned long long,unsigned long long</in><out>unsigned long long</out></function>
	<function name="_bzhi_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_pdep_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_pext_u32"><in>unsigned int,unsigned int</in><out>unsigned int</out></function>
	<function name="_bzhi_u64"><in>unsigned long long,unsigned long long</in><out>unsigned long long</out></function>
	<function name="_pdep_u64"><in>unsigned long long,unsigned long long</in><out>unsigned long long</out></function>
	<function name="_pext_u64"><in>unsigned long long,unsigned long long</in><out>unsigned long long</out></function>
	<function name="__builtin_ia32_lzcnt_16"><in>unsigned short</in><out>unsigned short</out></function>
	<function name="__builtin_ia32_lzcnt_u32"><in>unsigned int</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_lzcnt_u64"><in>unsigned long long</in><out>unsigned long long</out></function>
	<function name="__builtin_ia32_fxsave"><in>void *</in></function>
	<function name="__builtin_ia32_fxrstor"><in>void *</in></function>
	<function name="__builtin_ia32_fxsave64"><in>void *</in></function>
	<function name="__builtin_ia32_fxrstor64"><in>void *</in></function>
	<function name="__builtin_ia32_xsave"><in>void *,long long</in></function>
	<function name="__builtin_ia32_xrstor"><in>void *,long long</in></function>
	<function name="__builtin_ia32_xsave64"><in>void *,long long</in></function>
	<function name="__builtin_ia32_xrstor64"><in>void *,long long</in></function>
	<function name="__builtin_ia32_xsaveopt"><in>void *,long long</in></function>
	<function name="__builtin_ia32_xsaveopt64"><in>void *,long long</in></function>
	<function name="__builtin_ia32_bextri_u32"><in>unsigned int,const unsigned int</in><out>unsigned int</out></function>
	<function name="__builtin_ia32_bextri_u64"><in>unsigned long long,const unsigned long long</in><out>unsigned long long</out></function>
	<function name="__builtin_ia32_femms"><in>void</in></function>
	<function name="__builtin_ia32_pavgusb"><in>__v8qi,__v8qi</in><out>__v8qi</out></function>
	<function name="__builtin_ia32_pf2id"><in>__v2sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pfacc"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfadd"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfcmpeq"><in>__v2sf,__v2sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pfcmpge"><in>__v2sf,__v2sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pfcmpgt"><in>__v2sf,__v2sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pfmax"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfmin"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfmul"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfrcp"><in>__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfrcpit1"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfrcpit2"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfrsqrt"><in>__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfsub"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfsubr"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pi2fd"><in>__v2si</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pmulhrw"><in>__v4hi,__v4hi</in><out>__v4hi</out></function>
	<function name="__builtin_ia32_pf2iw"><in>__v2sf</in><out>__v2si</out></function>
	<function name="__builtin_ia32_pfnacc"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pfpnacc"><in>__v2sf,__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pi2fw"><in>__v2si</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pswapdsf"><in>__v2sf</in><out>__v2sf</out></function>
	<function name="__builtin_ia32_pswapdsi"><in>__v2si</in><out>__v2si</out></function>
	<function name="__builtin_ia32_monitorx"><in>void *,unsigned int,unsigned int</in></function>
	<function name="__builtin_ia32_mwaitx"><in>unsigned int,unsigned int,unsigned int</in></function>
	<function name="__builtin_i32_clzero"><in>void *</in></function>
	<function name="__builtin_ia32_wrpkru"><in>unsigned int</in></function>
	<function name="__builtin_ia32_rdpkru"><out>unsigned int</out></function>
</builtins>
